
free_rtors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f4  080057f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057fc  080057fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055dc  2000000c  08005810  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055e8  08005810  000255e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b5f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c8b  00000000  00000000  00036b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  0003a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002da9c  00000000  00000000  0003ba10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb58  00000000  00000000  000694ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001179bd  00000000  00000000  00078004  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f9c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  0018fa3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800575c 	.word	0x0800575c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	0800575c 	.word	0x0800575c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b0b2      	sub	sp, #200	; 0xc8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 8000546:	f001 fdb3 	bl	80020b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ButtonPressedSem */
  const osSemaphoreAttr_t ButtonPressedSem_attributes = {
 800054a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <MX_FREERTOS_Init+0x180>)
 800055a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <MX_FREERTOS_Init+0x184>)
 8000560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000564:	2350      	movs	r3, #80	; 0x50
 8000566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    .name = "ButtonPressedSem",
    .cb_mem = &ButtonPressedSemControlBlock,
    .cb_size = sizeof(ButtonPressedSemControlBlock),
  };
  ButtonPressedSemHandle = osSemaphoreNew(1, 1, &ButtonPressedSem_attributes);
 800056a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800056e:	461a      	mov	r2, r3
 8000570:	2101      	movs	r1, #1
 8000572:	2001      	movs	r0, #1
 8000574:	f001 ff0e 	bl	8002394 <osSemaphoreNew>
 8000578:	4602      	mov	r2, r0
 800057a:	4b53      	ldr	r3, [pc, #332]	; (80006c8 <MX_FREERTOS_Init+0x188>)
 800057c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800057e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000582:	2224      	movs	r2, #36	; 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f8df 	bl	800574a <memset>
 800058c:	4b4f      	ldr	r3, [pc, #316]	; (80006cc <MX_FREERTOS_Init+0x18c>)
 800058e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000592:	4b4f      	ldr	r3, [pc, #316]	; (80006d0 <MX_FREERTOS_Init+0x190>)
 8000594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000598:	235c      	movs	r3, #92	; 0x5c
 800059a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800059e:	4b4d      	ldr	r3, [pc, #308]	; (80006d4 <MX_FREERTOS_Init+0x194>)
 80005a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80005ac:	2318      	movs	r3, #24
 80005ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    .stack_size = sizeof(defaultTaskBuffer),
    .cb_mem = &defaultTaskControlBlock,
    .cb_size = sizeof(defaultTaskControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005b6:	461a      	mov	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	4847      	ldr	r0, [pc, #284]	; (80006d8 <MX_FREERTOS_Init+0x198>)
 80005bc:	f001 fde0 	bl	8002180 <osThreadNew>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b46      	ldr	r3, [pc, #280]	; (80006dc <MX_FREERTOS_Init+0x19c>)
 80005c4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Blink1Task */
  const osThreadAttr_t Blink1Task_attributes = {
 80005c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ca:	2224      	movs	r2, #36	; 0x24
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 f8bb 	bl	800574a <memset>
 80005d4:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <MX_FREERTOS_Init+0x1a0>)
 80005d6:	673b      	str	r3, [r7, #112]	; 0x70
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <MX_FREERTOS_Init+0x1a4>)
 80005da:	67bb      	str	r3, [r7, #120]	; 0x78
 80005dc:	235c      	movs	r3, #92	; 0x5c
 80005de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <MX_FREERTOS_Init+0x1a8>)
 80005e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80005ee:	2308      	movs	r3, #8
 80005f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    .stack_size = sizeof(Blink1TaskBuffer),
    .cb_mem = &Blink1TaskControlBlock,
    .cb_size = sizeof(Blink1TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  Blink1TaskHandle = osThreadNew(StartBlink1Task, NULL, &Blink1Task_attributes);
 80005f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f8:	461a      	mov	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	483b      	ldr	r0, [pc, #236]	; (80006ec <MX_FREERTOS_Init+0x1ac>)
 80005fe:	f001 fdbf 	bl	8002180 <osThreadNew>
 8000602:	4602      	mov	r2, r0
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <MX_FREERTOS_Init+0x1b0>)
 8000606:	601a      	str	r2, [r3, #0]

  /* definition and creation of Blink2Task */
  const osThreadAttr_t Blink2Task_attributes = {
 8000608:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f89a 	bl	800574a <memset>
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <MX_FREERTOS_Init+0x1b4>)
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <MX_FREERTOS_Init+0x1b8>)
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
 800061e:	235c      	movs	r3, #92	; 0x5c
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <MX_FREERTOS_Init+0x1bc>)
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800062a:	663b      	str	r3, [r7, #96]	; 0x60
 800062c:	2308      	movs	r3, #8
 800062e:	667b      	str	r3, [r7, #100]	; 0x64
    .stack_size = sizeof(Blink2TaskBuffer),
    .cb_mem = &Blink2TaskControlBlock,
    .cb_size = sizeof(Blink2TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  Blink2TaskHandle = osThreadNew(StartBlink2Task, NULL, &Blink2Task_attributes);
 8000630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000634:	461a      	mov	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	4831      	ldr	r0, [pc, #196]	; (8000700 <MX_FREERTOS_Init+0x1c0>)
 800063a:	f001 fda1 	bl	8002180 <osThreadNew>
 800063e:	4602      	mov	r2, r0
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_FREERTOS_Init+0x1c4>)
 8000642:	601a      	str	r2, [r3, #0]

  /* definition and creation of ButtonTask */
  const osThreadAttr_t ButtonTask_attributes = {
 8000644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000648:	2224      	movs	r2, #36	; 0x24
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f005 f87c 	bl	800574a <memset>
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <MX_FREERTOS_Init+0x1c8>)
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_FREERTOS_Init+0x1cc>)
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
 800065a:	235c      	movs	r3, #92	; 0x5c
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
 800065e:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <MX_FREERTOS_Init+0x1d0>)
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
    .stack_size = sizeof(ButtonTaskBuffer),
    .cb_mem = &ButtonTaskControlBlock,
    .cb_size = sizeof(ButtonTaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 800066c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000670:	461a      	mov	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	4827      	ldr	r0, [pc, #156]	; (8000714 <MX_FREERTOS_Init+0x1d4>)
 8000676:	f001 fd83 	bl	8002180 <osThreadNew>
 800067a:	4602      	mov	r2, r0
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_FREERTOS_Init+0x1d8>)
 800067e:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED3Task */
  const osThreadAttr_t LED3Task_attributes = {
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2224      	movs	r2, #36	; 0x24
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 f85f 	bl	800574a <memset>
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_FREERTOS_Init+0x1dc>)
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_FREERTOS_Init+0x1e0>)
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	235c      	movs	r3, #92	; 0x5c
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_FREERTOS_Init+0x1e4>)
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	2308      	movs	r3, #8
 80006a4:	61fb      	str	r3, [r7, #28]
    .stack_size = sizeof(LED3TaskBuffer),
    .cb_mem = &LED3TaskControlBlock,
    .cb_size = sizeof(LED3TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  LED3TaskHandle = osThreadNew(StartLED3Task, NULL, &LED3Task_attributes);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	461a      	mov	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	481e      	ldr	r0, [pc, #120]	; (8000728 <MX_FREERTOS_Init+0x1e8>)
 80006ae:	f001 fd67 	bl	8002180 <osThreadNew>
 80006b2:	4602      	mov	r2, r0
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_FREERTOS_Init+0x1ec>)
 80006b6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006b8:	bf00      	nop
 80006ba:	37c8      	adds	r7, #200	; 0xc8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08005774 	.word	0x08005774
 80006c4:	20004d98 	.word	0x20004d98
 80006c8:	20004d94 	.word	0x20004d94
 80006cc:	08005788 	.word	0x08005788
 80006d0:	200054a8 	.word	0x200054a8
 80006d4:	200050a8 	.word	0x200050a8
 80006d8:	08000731 	.word	0x08000731
 80006dc:	2000498c 	.word	0x2000498c
 80006e0:	08005794 	.word	0x08005794
 80006e4:	20004e44 	.word	0x20004e44
 80006e8:	200052a8 	.word	0x200052a8
 80006ec:	08000741 	.word	0x08000741
 80006f0:	20005504 	.word	0x20005504
 80006f4:	080057a0 	.word	0x080057a0
 80006f8:	20004de8 	.word	0x20004de8
 80006fc:	20004b94 	.word	0x20004b94
 8000700:	08000761 	.word	0x08000761
 8000704:	20004b90 	.word	0x20004b90
 8000708:	080057ac 	.word	0x080057ac
 800070c:	20004930 	.word	0x20004930
 8000710:	20004990 	.word	0x20004990
 8000714:	08000781 	.word	0x08000781
 8000718:	200050a4 	.word	0x200050a4
 800071c:	080057b8 	.word	0x080057b8
 8000720:	20005508 	.word	0x20005508
 8000724:	20004ea0 	.word	0x20004ea0
 8000728:	080007b5 	.word	0x080007b5
 800072c:	200050a0 	.word	0x200050a0

08000730 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f001 fdfd 	bl	8002338 <osDelay>
 800073e:	e7fb      	b.n	8000738 <StartDefaultTask+0x8>

08000740 <StartBlink1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink1Task */
void StartBlink1Task(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink1Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8000748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <StartBlink1Task+0x1c>)
 800074e:	f000 fd56 	bl	80011fe <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f001 fdef 	bl	8002338 <osDelay>
	HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 800075a:	e7f5      	b.n	8000748 <StartBlink1Task+0x8>
 800075c:	40022000 	.word	0x40022000

08000760 <StartBlink2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink2Task */
void StartBlink2Task(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink2Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000768:	2101      	movs	r1, #1
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <StartBlink2Task+0x1c>)
 800076c:	f000 fd47 	bl	80011fe <HAL_GPIO_TogglePin>
    osDelay(2000);
 8000770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000774:	f001 fde0 	bl	8002338 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000778:	e7f6      	b.n	8000768 <StartBlink2Task+0x8>
 800077a:	bf00      	nop
 800077c:	40022400 	.word	0x40022400

08000780 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin))
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <StartButtonTask+0x2c>)
 800078e:	f000 fd05 	bl	800119c <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d004      	beq.n	80007a2 <StartButtonTask+0x22>
	{
		osSemaphoreRelease(ButtonPressedSemHandle);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <StartButtonTask+0x30>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fefd 	bl	800259c <osSemaphoreRelease>
	}
    osDelay(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f001 fdc8 	bl	8002338 <osDelay>
	if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin))
 80007a8:	e7ee      	b.n	8000788 <StartButtonTask+0x8>
 80007aa:	bf00      	nop
 80007ac:	40020800 	.word	0x40020800
 80007b0:	20004d94 	.word	0x20004d94

080007b4 <StartLED3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED3Task */
void StartLED3Task(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED3Task */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(ButtonPressedSemHandle, osWaitForever) == osOK)
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <StartLED3Task+0x2c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fe83 	bl	80024d0 <osSemaphoreAcquire>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <StartLED3Task+0x24>
		 HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80007d0:	2108      	movs	r1, #8
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <StartLED3Task+0x30>)
 80007d4:	f000 fd13 	bl	80011fe <HAL_GPIO_TogglePin>
	  osThreadYield();
 80007d8:	f001 fd7c 	bl	80022d4 <osThreadYield>
	  if (osSemaphoreAcquire(ButtonPressedSemHandle, osWaitForever) == osOK)
 80007dc:	e7ee      	b.n	80007bc <StartLED3Task+0x8>
 80007de:	bf00      	nop
 80007e0:	20004d94 	.word	0x20004d94
 80007e4:	40022400 	.word	0x40022400

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x100>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a33      	ldr	r2, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x100>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a2d      	ldr	r2, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0x100>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <MX_GPIO_Init+0x100>)
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_GPIO_Init+0x100>)
 8000864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_GPIO_Init+0x100>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <MX_GPIO_Init+0x104>)
 800087e:	f000 fca5 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	210b      	movs	r1, #11
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x108>)
 8000888:	f000 fca0 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_GPIO_Init+0x10c>)
 80008a2:	f000 fad1 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0x104>)
 80008c0:	f000 fac2 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 80008c4:	230b      	movs	r3, #11
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0x108>)
 80008dc:	f000 fab4 	bl	8000e48 <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40022000 	.word	0x40022000
 80008f0:	40022400 	.word	0x40022400
 80008f4:	40020800 	.word	0x40020800

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 f995 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f808 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff ff70 	bl	80007e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000908:	f7ff fe1a 	bl	8000540 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800090c:	f001 fc04 	bl	8002118 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x18>
	...

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2234      	movs	r2, #52	; 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f004 ff11 	bl	800574a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <SystemClock_Config+0xd4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <SystemClock_Config+0xd4>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0xd4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <SystemClock_Config+0xd8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a25      	ldr	r2, [pc, #148]	; (80009ec <SystemClock_Config+0xd8>)
 8000956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <SystemClock_Config+0xd8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000970:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 800097c:	230c      	movs	r3, #12
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000980:	23c0      	movs	r3, #192	; 0xc0
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fc9f 	bl	80012d4 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800099c:	f000 f83a 	bl	8000a14 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a0:	f000 fc48 	bl	8001234 <HAL_PWREx_EnableOverDrive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009aa:	f000 f833 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2106      	movs	r1, #6
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fef3 	bl	80017b8 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009d8:	f000 f81c 	bl	8000a14 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80009dc:	f000 ffd4 	bl	8001988 <HAL_RCC_EnableCSS>
}
 80009e0:	bf00      	nop
 80009e2:	3750      	adds	r7, #80	; 0x50
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a02:	f000 f91f 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	f06f 0001 	mvn.w	r0, #1
 8000a62:	f000 f9c7 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2019      	movs	r0, #25
 8000a8a:	f000 f9b3 	bl	8000df4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 f9cc 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_InitTick+0xa0>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <HAL_InitTick+0xa0>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_InitTick+0xa0>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f848 	bl	8001b4c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000abc:	f001 f832 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac8:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <HAL_InitTick+0xa4>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	0c9b      	lsrs	r3, r3, #18
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <HAL_InitTick+0xac>)
 8000ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_InitTick+0xa8>)
 8000adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_InitTick+0xa8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_InitTick+0xa8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <HAL_InitTick+0xa8>)
 8000af6:	f001 f876 	bl	8001be6 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d104      	bne.n	8000b0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_InitTick+0xa8>)
 8000b02:	f001 f8a5 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3730      	adds	r7, #48	; 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	20005564 	.word	0x20005564
 8000b20:	40010000 	.word	0x40010000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b28:	f001 f842 	bl	8001bb0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <HardFault_Handler+0x4>

08000b36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <BusFault_Handler+0x4>

08000b42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <UsageFault_Handler+0x4>

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5e:	f001 f8a1 	bl	8001ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20005564 	.word	0x20005564

08000b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <SystemInit+0x5c>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <SystemInit+0x5c>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <SystemInit+0x60>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <SystemInit+0x60>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <SystemInit+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <SystemInit+0x60>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <SystemInit+0x60>)
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <SystemInit+0x64>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <SystemInit+0x60>)
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <SystemInit+0x68>)
 8000ba2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <SystemInit+0x60>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <SystemInit+0x60>)
 8000baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x60>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SystemInit+0x5c>)
 8000bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bbc:	609a      	str	r2, [r3, #8]
#endif
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	fef6ffff 	.word	0xfef6ffff
 8000bd4:	24003010 	.word	0x24003010

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffb3 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fd71 	bl	80056ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fe75 	bl	80008f8 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000c14:	08005804 	.word	0x08005804
  ldr  r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c24:	200055e8 	.word	0x200055e8

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>

08000c2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f8d5 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff ff1d 	bl	8000a74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c3a:	f7ff fef3 	bl	8000a24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	200055a4 	.word	0x200055a4

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200055a4 	.word	0x200055a4

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	05fa0000 	.word	0x05fa0000

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e175      	b.n	8001154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8164 	bne.w	800114e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x4e>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	69b9      	ldr	r1, [r7, #24]
 8000eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0203 	and.w	r2, r3, #3
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d00b      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80be 	beq.w	800114e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a64      	ldr	r2, [pc, #400]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_GPIO_Init+0x320>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fea:	4a60      	ldr	r2, [pc, #384]	; (800116c <HAL_GPIO_Init+0x324>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d031      	beq.n	8001082 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d02b      	beq.n	800107e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <HAL_GPIO_Init+0x334>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x22a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x226>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x222>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x21e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x21a>
 800105e:	2309      	movs	r3, #9
 8001060:	e012      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001062:	230a      	movs	r3, #10
 8001064:	e010      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001066:	2308      	movs	r3, #8
 8001068:	e00e      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106a:	2307      	movs	r3, #7
 800106c:	e00c      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800106e:	2306      	movs	r3, #6
 8001070:	e00a      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001072:	2305      	movs	r3, #5
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001076:	2304      	movs	r3, #4
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x240>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x240>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001098:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_GPIO_Init+0x324>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_GPIO_Init+0x350>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x350>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_GPIO_Init+0x350>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f ae86 	bls.w	8000e68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40022400 	.word	0x40022400
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	401a      	ands	r2, r3
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	429a      	cmp	r2, r3
 8001216:	d104      	bne.n	8001222 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001220:	e002      	b.n	8001228 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_PWREx_EnableOverDrive+0x98>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_PWREx_EnableOverDrive+0x98>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001262:	f7ff fd03 	bl	8000c6c <HAL_GetTick>
 8001266:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001268:	e009      	b.n	800127e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800126a:	f7ff fcff 	bl	8000c6c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001278:	d901      	bls.n	800127e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e022      	b.n	80012c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128a:	d1ee      	bne.n	800126a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff fce8 	bl	8000c6c <HAL_GetTick>
 800129c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800129e:	e009      	b.n	80012b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012a0:	f7ff fce4 	bl	8000c6c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ae:	d901      	bls.n	80012b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e007      	b.n	80012c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012c0:	d1ee      	bne.n	80012a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e25e      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8087 	beq.w	8001406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f8:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d112      	bne.n	8001336 <HAL_RCC_OscConfig+0x62>
 8001310:	4b90      	ldr	r3, [pc, #576]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131c:	d10b      	bne.n	8001336 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d06c      	beq.n	8001404 <HAL_RCC_OscConfig+0x130>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d168      	bne.n	8001404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e238      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x7a>
 8001340:	4b84      	ldr	r3, [pc, #528]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a83      	ldr	r2, [pc, #524]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e02e      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x9c>
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7e      	ldr	r2, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0xc0>
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 8001394:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc5a 	bl	8000c6c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fc56 	bl	8000c6c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1ec      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b61      	ldr	r3, [pc, #388]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc46 	bl	8000c6c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fc42 	bl	8000c6c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1d8      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x110>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d069      	beq.n	80014e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001412:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x190>
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x17a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1ac      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	493d      	ldr	r1, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e040      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a38      	ldr	r2, [pc, #224]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fbf8 	bl	8000c6c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fbf4 	bl	8000c6c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e18a      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4929      	ldr	r1, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e018      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbd4 	bl	8000c6c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbd0 	bl	8000c6c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e166      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d038      	beq.n	8001564 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fbb1 	bl	8000c6c <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fbad 	bl	8000c6c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e143      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x23a>
 800152c:	e01a      	b.n	8001564 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fb97 	bl	8000c6c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fb93 	bl	8000c6c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d903      	bls.n	8001558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e129      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
 8001554:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b95      	ldr	r3, [pc, #596]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800155a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ee      	bne.n	8001542 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a4 	beq.w	80016ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001572:	4b8f      	ldr	r3, [pc, #572]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b8c      	ldr	r3, [pc, #560]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a8b      	ldr	r2, [pc, #556]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b86      	ldr	r3, [pc, #536]	; (80017b4 <HAL_RCC_OscConfig+0x4e0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015a6:	4b83      	ldr	r3, [pc, #524]	; (80017b4 <HAL_RCC_OscConfig+0x4e0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a82      	ldr	r2, [pc, #520]	; (80017b4 <HAL_RCC_OscConfig+0x4e0>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb5b 	bl	8000c6c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fb57 	bl	8000c6c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0ed      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015cc:	4b79      	ldr	r3, [pc, #484]	; (80017b4 <HAL_RCC_OscConfig+0x4e0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x31a>
 80015e0:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a72      	ldr	r2, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e02d      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x33c>
 80015f6:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a6d      	ldr	r2, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b6b      	ldr	r3, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a6a      	ldr	r2, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e01c      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x35e>
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a64      	ldr	r2, [pc, #400]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a61      	ldr	r2, [pc, #388]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b5c      	ldr	r3, [pc, #368]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5b      	ldr	r2, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d015      	beq.n	800167e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fb0b 	bl	8000c6c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fb07 	bl	8000c6c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e09b      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ee      	beq.n	800165a <HAL_RCC_OscConfig+0x386>
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff faf5 	bl	8000c6c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff faf1 	bl	8000c6c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e085      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ee      	bne.n	8001686 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ae:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a3f      	ldr	r2, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d071      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d069      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d14b      	bne.n	800176e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fac3 	bl	8000c6c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fabf 	bl	8000c6c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e055      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	019b      	lsls	r3, r3, #6
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	071b      	lsls	r3, r3, #28
 8001734:	491e      	ldr	r1, [pc, #120]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa91 	bl	8000c6c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fa8d 	bl	8000c6c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e023      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x47a>
 800176c:	e01b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fa77 	bl	8000c6c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fa73 	bl	8000c6c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e009      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x4ae>
 80017a0:	e001      	b.n	80017a6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0ce      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b69      	ldr	r3, [pc, #420]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d910      	bls.n	8001800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 020f 	bic.w	r2, r3, #15
 80017e6:	4964      	ldr	r1, [pc, #400]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b62      	ldr	r3, [pc, #392]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b6      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001830:	4b52      	ldr	r3, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a51      	ldr	r2, [pc, #324]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	494c      	ldr	r1, [pc, #304]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d040      	beq.n	80018dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d115      	bne.n	800189a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07d      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e071      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e069      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ac:	f7ff f9de 	bl	8000c6c <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff f9da 	bl	8000c6c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e051      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d210      	bcs.n	800190c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 020f 	bic.w	r2, r3, #15
 80018f2:	4921      	ldr	r1, [pc, #132]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e030      	b.n	800196e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4915      	ldr	r1, [pc, #84]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490d      	ldr	r1, [pc, #52]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194a:	f000 f82d 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 800194e:	4601      	mov	r1, r0
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	fa21 f303 	lsr.w	r3, r1, r3
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_ClockConfig+0x1cc>)
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff f884 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	080057dc 	.word	0x080057dc
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_EnableCSS+0x1c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_RCC_EnableCSS+0x1c>)
 8001992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d007      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x32>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d008      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x38>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 808d 	bne.w	8001aee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019d6:	60bb      	str	r3, [r7, #8]
       break;
 80019d8:	e08c      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	60bb      	str	r3, [r7, #8]
      break;
 80019de:	e089      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ea:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d023      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	ea03 0501 	and.w	r5, r3, r1
 8001a0c:	ea04 0602 	and.w	r6, r4, r2
 8001a10:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a12:	fb02 f106 	mul.w	r1, r2, r6
 8001a16:	2200      	movs	r2, #0
 8001a18:	fb02 f205 	mul.w	r2, r2, r5
 8001a1c:	440a      	add	r2, r1
 8001a1e:	493a      	ldr	r1, [pc, #232]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a20:	fba5 0101 	umull	r0, r1, r5, r1
 8001a24:	1853      	adds	r3, r2, r1
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f04f 0400 	mov.w	r4, #0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4623      	mov	r3, r4
 8001a32:	f7fe fc05 	bl	8000240 <__aeabi_uldivmod>
 8001a36:	4603      	mov	r3, r0
 8001a38:	460c      	mov	r4, r1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e049      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	f04f 0400 	mov.w	r4, #0
 8001a48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	ea03 0501 	and.w	r5, r3, r1
 8001a54:	ea04 0602 	and.w	r6, r4, r2
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	0154      	lsls	r4, r2, #5
 8001a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a6a:	014b      	lsls	r3, r1, #5
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4622      	mov	r2, r4
 8001a70:	1b49      	subs	r1, r1, r5
 8001a72:	eb62 0206 	sbc.w	r2, r2, r6
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f04f 0400 	mov.w	r4, #0
 8001a7e:	0194      	lsls	r4, r2, #6
 8001a80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	eb64 0402 	sbc.w	r4, r4, r2
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	00e2      	lsls	r2, r4, #3
 8001a96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a9a:	00d9      	lsls	r1, r3, #3
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	195b      	adds	r3, r3, r5
 8001aa2:	eb44 0406 	adc.w	r4, r4, r6
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	02a2      	lsls	r2, r4, #10
 8001ab0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ab4:	0299      	lsls	r1, r3, #10
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	4621      	mov	r1, r4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f04f 0400 	mov.w	r4, #0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	f7fe fbba 	bl	8000240 <__aeabi_uldivmod>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	3301      	adds	r3, #1
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	60bb      	str	r3, [r7, #8]
      break;
 8001aec:	e002      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001af0:	60bb      	str	r3, [r7, #8]
      break;
 8001af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af4:	68bb      	ldr	r3, [r7, #8]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	017d7840 	.word	0x017d7840

08001b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	080057ec 	.word	0x080057ec

08001b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetClockConfig+0x60>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	2b80      	cmp	r3, #128	; 0x80
 8001bbe:	d104      	bne.n	8001bca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001bc0:	f000 f80a 	bl	8001bd8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	4002380e 	.word	0x4002380e

08001bd8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e01d      	b.n	8001c34 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f815 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f000 f985 	bl	8001f34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_TIM_Base_Start_IT+0x50>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d00b      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x42>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d007      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	00010007 	.word	0x00010007

08001ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0202 	mvn.w	r2, #2
 8001cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f905 	bl	8001ef6 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8f7 	bl	8001ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f908 	bl	8001f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0204 	mvn.w	r2, #4
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8db 	bl	8001ef6 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8cd 	bl	8001ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8de 	bl	8001f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0208 	mvn.w	r2, #8
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8b1 	bl	8001ef6 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8a3 	bl	8001ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8b4 	bl	8001f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0210 	mvn.w	r2, #16
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f887 	bl	8001ef6 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f879 	bl	8001ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f88a 	bl	8001f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10e      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d107      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0201 	mvn.w	r2, #1
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fde4 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b80      	cmp	r3, #128	; 0x80
 8001e34:	d10e      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d107      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f91a 	bl	8002088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e62:	d10e      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d107      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f90d 	bl	800209c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d10e      	bne.n	8001eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d107      	bne.n	8001eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f838 	bl	8001f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d10e      	bne.n	8001eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d107      	bne.n	8001eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0220 	mvn.w	r2, #32
 8001ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8cd 	bl	8002074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a40      	ldr	r2, [pc, #256]	; (8002048 <TIM_Base_SetConfig+0x114>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d00f      	beq.n	8001f74 <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <TIM_Base_SetConfig+0x118>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <TIM_Base_SetConfig+0x11c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <TIM_Base_SetConfig+0x120>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <TIM_Base_SetConfig+0x124>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <TIM_Base_SetConfig+0x114>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02b      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d027      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	; (800204c <TIM_Base_SetConfig+0x118>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d023      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <TIM_Base_SetConfig+0x11c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <TIM_Base_SetConfig+0x120>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01b      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a29      	ldr	r2, [pc, #164]	; (8002058 <TIM_Base_SetConfig+0x124>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d017      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <TIM_Base_SetConfig+0x128>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <TIM_Base_SetConfig+0x12c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00f      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <TIM_Base_SetConfig+0x130>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00b      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <TIM_Base_SetConfig+0x134>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <TIM_Base_SetConfig+0x138>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d003      	beq.n	8001fe6 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <TIM_Base_SetConfig+0x13c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d108      	bne.n	8001ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <TIM_Base_SetConfig+0x114>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0xf8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800
 8002068:	40001800 	.word	0x40001800
 800206c:	40001c00 	.word	0x40001c00
 8002070:	40002000 	.word	0x40002000

08002074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020b6:	f3ef 8305 	mrs	r3, IPSR
 80020ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80020bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c2:	f3ef 8310 	mrs	r3, PRIMASK
 80020c6:	607b      	str	r3, [r7, #4]
  return(result);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <osKernelInitialize+0x32>
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <osKernelInitialize+0x64>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d109      	bne.n	80020ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020d6:	f3ef 8311 	mrs	r3, BASEPRI
 80020da:	603b      	str	r3, [r7, #0]
  return(result);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80020e2:	f06f 0305 	mvn.w	r3, #5
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e00c      	b.n	8002104 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <osKernelInitialize+0x64>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <osKernelInitialize+0x64>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000028 	.word	0x20000028

08002118 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800211e:	f3ef 8305 	mrs	r3, IPSR
 8002122:	60bb      	str	r3, [r7, #8]
  return(result);
 8002124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212a:	f3ef 8310 	mrs	r3, PRIMASK
 800212e:	607b      	str	r3, [r7, #4]
  return(result);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <osKernelStart+0x32>
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <osKernelStart+0x64>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d109      	bne.n	8002152 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800213e:	f3ef 8311 	mrs	r3, BASEPRI
 8002142:	603b      	str	r3, [r7, #0]
  return(result);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <osKernelStart+0x3a>
    stat = osErrorISR;
 800214a:	f06f 0305 	mvn.w	r3, #5
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00e      	b.n	8002170 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <osKernelStart+0x64>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <osKernelStart+0x64>)
 800215c:	2202      	movs	r2, #2
 800215e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002160:	f001 fd5c 	bl	8003c1c <vTaskStartScheduler>
      stat = osOK;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e002      	b.n	8002170 <osKernelStart+0x58>
    } else {
      stat = osError;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000028 	.word	0x20000028

08002180 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b092      	sub	sp, #72	; 0x48
 8002184:	af04      	add	r7, sp, #16
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002190:	f3ef 8305 	mrs	r3, IPSR
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8094 	bne.w	80022c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219e:	f3ef 8310 	mrs	r3, PRIMASK
 80021a2:	623b      	str	r3, [r7, #32]
  return(result);
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 808d 	bne.w	80022c6 <osThreadNew+0x146>
 80021ac:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <osThreadNew+0x150>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d106      	bne.n	80021c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021b4:	f3ef 8311 	mrs	r3, BASEPRI
 80021b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 8082 	bne.w	80022c6 <osThreadNew+0x146>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d07e      	beq.n	80022c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80021cc:	2318      	movs	r3, #24
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80021d0:	2300      	movs	r3, #0
 80021d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80021d4:	f107 031b 	add.w	r3, r7, #27
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d045      	beq.n	8002272 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <osThreadNew+0x74>
        name = attr->name;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <osThreadNew+0x9a>
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	2b38      	cmp	r3, #56	; 0x38
 800220c:	d805      	bhi.n	800221a <osThreadNew+0x9a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <osThreadNew+0x9e>
        return (NULL);
 800221a:	2300      	movs	r3, #0
 800221c:	e054      	b.n	80022c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00e      	beq.n	8002254 <osThreadNew+0xd4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b5b      	cmp	r3, #91	; 0x5b
 800223c:	d90a      	bls.n	8002254 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <osThreadNew+0xd4>
        mem = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
 8002252:	e010      	b.n	8002276 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10c      	bne.n	8002276 <osThreadNew+0xf6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <osThreadNew+0xf6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <osThreadNew+0xf6>
          mem = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002270:	e001      	b.n	8002276 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	2b01      	cmp	r3, #1
 800227a:	d110      	bne.n	800229e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002284:	9202      	str	r2, [sp, #8]
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f001 faf0 	bl	8003878 <xTaskCreateStatic>
 8002298:	4603      	mov	r3, r0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e013      	b.n	80022c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d110      	bne.n	80022c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f001 fb3d 	bl	8003936 <xTaskCreate>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <osThreadNew+0x146>
          hTask = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80022c6:	697b      	ldr	r3, [r7, #20]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3738      	adds	r7, #56	; 0x38
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000028 	.word	0x20000028

080022d4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022da:	f3ef 8305 	mrs	r3, IPSR
 80022de:	60bb      	str	r3, [r7, #8]
  return(result);
 80022e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	607b      	str	r3, [r7, #4]
  return(result);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <osThreadYield+0x32>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <osThreadYield+0x5c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d109      	bne.n	800230e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022fa:	f3ef 8311 	mrs	r3, BASEPRI
 80022fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <osThreadYield+0x3a>
    stat = osErrorISR;
 8002306:	f06f 0305 	mvn.w	r3, #5
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e009      	b.n	8002322 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <osThreadYield+0x60>)
 8002314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000028 	.word	0x20000028
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002340:	f3ef 8305 	mrs	r3, IPSR
 8002344:	613b      	str	r3, [r7, #16]
  return(result);
 8002346:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234c:	f3ef 8310 	mrs	r3, PRIMASK
 8002350:	60fb      	str	r3, [r7, #12]
  return(result);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <osDelay+0x34>
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <osDelay+0x58>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d109      	bne.n	8002374 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002360:	f3ef 8311 	mrs	r3, BASEPRI
 8002364:	60bb      	str	r3, [r7, #8]
  return(result);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <osDelay+0x3c>
    stat = osErrorISR;
 800236c:	f06f 0305 	mvn.w	r3, #5
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e007      	b.n	8002384 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <osDelay+0x4c>
      vTaskDelay(ticks);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f001 fc16 	bl	8003bb0 <vTaskDelay>
    }
  }

  return (stat);
 8002384:	697b      	ldr	r3, [r7, #20]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000028 	.word	0x20000028

08002394 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a4:	f3ef 8305 	mrs	r3, IPSR
 80023a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80023aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 8088 	bne.w	80024c2 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b2:	f3ef 8310 	mrs	r3, PRIMASK
 80023b6:	617b      	str	r3, [r7, #20]
  return(result);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8081 	bne.w	80024c2 <osSemaphoreNew+0x12e>
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <osSemaphoreNew+0x138>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d105      	bne.n	80023d4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023c8:	f3ef 8311 	mrs	r3, BASEPRI
 80023cc:	613b      	str	r3, [r7, #16]
  return(result);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d176      	bne.n	80024c2 <osSemaphoreNew+0x12e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d073      	beq.n	80024c2 <osSemaphoreNew+0x12e>
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d86f      	bhi.n	80024c2 <osSemaphoreNew+0x12e>
    mem = -1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d015      	beq.n	800241a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <osSemaphoreNew+0x70>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b4f      	cmp	r3, #79	; 0x4f
 80023fc:	d902      	bls.n	8002404 <osSemaphoreNew+0x70>
        mem = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	e00c      	b.n	800241e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d108      	bne.n	800241e <osSemaphoreNew+0x8a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <osSemaphoreNew+0x8a>
          mem = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	e001      	b.n	800241e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d04d      	beq.n	80024c2 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d129      	bne.n	8002480 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10b      	bne.n	800244a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	2303      	movs	r3, #3
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	2001      	movs	r0, #1
 8002442:	f000 fa55 	bl	80028f0 <xQueueGenericCreateStatic>
 8002446:	6278      	str	r0, [r7, #36]	; 0x24
 8002448:	e005      	b.n	8002456 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800244a:	2203      	movs	r2, #3
 800244c:	2100      	movs	r1, #0
 800244e:	2001      	movs	r0, #1
 8002450:	f000 faca 	bl	80029e8 <xQueueGenericCreate>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d022      	beq.n	80024a2 <osSemaphoreNew+0x10e>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01f      	beq.n	80024a2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002462:	2300      	movs	r3, #0
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800246a:	f000 fb8d 	bl	8002b88 <xQueueGenericSend>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d016      	beq.n	80024a2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8002474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002476:	f001 f82c 	bl	80034d2 <vQueueDelete>
            hSemaphore = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e010      	b.n	80024a2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	461a      	mov	r2, r3
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fb0c 	bl	8002aac <xQueueCreateCountingSemaphoreStatic>
 8002494:	6278      	str	r0, [r7, #36]	; 0x24
 8002496:	e004      	b.n	80024a2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fb3f 	bl	8002b1e <xQueueCreateCountingSemaphore>
 80024a0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <osSemaphoreNew+0x122>
          name = attr->name;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e001      	b.n	80024ba <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80024ba:	69f9      	ldr	r1, [r7, #28]
 80024bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024be:	f001 f955 	bl	800376c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000028 	.word	0x20000028

080024d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80024e8:	f06f 0303 	mvn.w	r3, #3
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e04b      	b.n	8002588 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f0:	f3ef 8305 	mrs	r3, IPSR
 80024f4:	617b      	str	r3, [r7, #20]
  return(result);
 80024f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10f      	bne.n	800251c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002500:	613b      	str	r3, [r7, #16]
  return(result);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <osSemaphoreAcquire+0x4c>
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <osSemaphoreAcquire+0xc4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d128      	bne.n	8002562 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002510:	f3ef 8311 	mrs	r3, BASEPRI
 8002514:	60fb      	str	r3, [r7, #12]
  return(result);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8002522:	f06f 0303 	mvn.w	r3, #3
 8002526:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002528:	e02d      	b.n	8002586 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	461a      	mov	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	69b8      	ldr	r0, [r7, #24]
 8002538:	f000 ff48 	bl	80033cc <xQueueReceiveFromISR>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d003      	beq.n	800254a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8002542:	f06f 0302 	mvn.w	r3, #2
 8002546:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002548:	e01d      	b.n	8002586 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01a      	beq.n	8002586 <osSemaphoreAcquire+0xb6>
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <osSemaphoreAcquire+0xc8>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002560:	e011      	b.n	8002586 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	69b8      	ldr	r0, [r7, #24]
 8002566:	f000 fe21 	bl	80031ac <xQueueSemaphoreTake>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d00b      	beq.n	8002588 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8002576:	f06f 0301 	mvn.w	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e004      	b.n	8002588 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800257e:	f06f 0302 	mvn.w	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	e000      	b.n	8002588 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8002586:	bf00      	nop
      }
    }
  }

  return (stat);
 8002588:	69fb      	ldr	r3, [r7, #28]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000028 	.word	0x20000028
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80025b2:	f06f 0303 	mvn.w	r3, #3
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	e03e      	b.n	8002638 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ba:	f3ef 8305 	mrs	r3, IPSR
 80025be:	617b      	str	r3, [r7, #20]
  return(result);
 80025c0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ca:	613b      	str	r3, [r7, #16]
  return(result);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <osSemaphoreRelease+0x4a>
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <osSemaphoreRelease+0xa8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d120      	bne.n	800261c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025da:	f3ef 8311 	mrs	r3, BASEPRI
 80025de:	60fb      	str	r3, [r7, #12]
  return(result);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	4619      	mov	r1, r3
 80025f0:	69b8      	ldr	r0, [r7, #24]
 80025f2:	f000 fc67 	bl	8002ec4 <xQueueGiveFromISR>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d003      	beq.n	8002604 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80025fc:	f06f 0302 	mvn.w	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002602:	e018      	b.n	8002636 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d015      	beq.n	8002636 <osSemaphoreRelease+0x9a>
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <osSemaphoreRelease+0xac>)
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800261a:	e00c      	b.n	8002636 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	69b8      	ldr	r0, [r7, #24]
 8002624:	f000 fab0 	bl	8002b88 <xQueueGenericSend>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d004      	beq.n	8002638 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800262e:	f06f 0302 	mvn.w	r3, #2
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e000      	b.n	8002638 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002636:	bf00      	nop
    }
  }

  return (stat);
 8002638:	69fb      	ldr	r3, [r7, #28]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000028 	.word	0x20000028
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <vApplicationGetIdleTaskMemory+0x2c>)
 800265c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <vApplicationGetIdleTaskMemory+0x30>)
 8002662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000002c 	.word	0x2000002c
 800267c:	20000088 	.word	0x20000088

08002680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000288 	.word	0x20000288
 80026b0:	200002e4 	.word	0x200002e4

080026b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f103 0208 	add.w	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f103 0208 	add.w	r2, r3, #8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0208 	add.w	r2, r3, #8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d103      	bne.n	8002776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e00c      	b.n	8002790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3308      	adds	r3, #8
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e002      	b.n	8002784 <vListInsert+0x2e>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d2f6      	bcs.n	800277e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6852      	ldr	r2, [r2, #4]
 80027e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d103      	bne.n	80027fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	b672      	cpsid	i
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	b662      	cpsie	i
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	e7fe      	b.n	8002846 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002848:	f002 fc4e 	bl	80050e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	3b01      	subs	r3, #1
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	441a      	add	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	22ff      	movs	r2, #255	; 0xff
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d114      	bne.n	80028c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01a      	beq.n	80028dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3310      	adds	r3, #16
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fc4a 	bl	8004144 <xTaskRemoveFromEventList>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <xQueueGenericReset+0xd0>)
 80028b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	e009      	b.n	80028dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3310      	adds	r3, #16
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fef1 	bl	80026b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff feec 	bl	80026b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028dc:	f002 fc36 	bl	800514c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <xQueueGenericCreateStatic+0x2c>
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	b672      	cpsid	i
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	b662      	cpsie	i
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
 800291a:	e7fe      	b.n	800291a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <xQueueGenericCreateStatic+0x4a>
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	b672      	cpsid	i
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	b662      	cpsie	i
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	e7fe      	b.n	8002938 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <xQueueGenericCreateStatic+0x56>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <xQueueGenericCreateStatic+0x5a>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <xQueueGenericCreateStatic+0x5c>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <xQueueGenericCreateStatic+0x78>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	b672      	cpsid	i
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	b662      	cpsie	i
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e7fe      	b.n	8002966 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <xQueueGenericCreateStatic+0x84>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <xQueueGenericCreateStatic+0x88>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <xQueueGenericCreateStatic+0x8a>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10b      	bne.n	8002996 <xQueueGenericCreateStatic+0xa6>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	b672      	cpsid	i
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	b662      	cpsie	i
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	e7fe      	b.n	8002994 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002996:	2350      	movs	r3, #80	; 0x50
 8002998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d00b      	beq.n	80029b8 <xQueueGenericCreateStatic+0xc8>
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	b672      	cpsid	i
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	b662      	cpsie	i
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e7fe      	b.n	80029b6 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f844 	bl	8002a66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <xQueueGenericCreate+0x2c>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	b672      	cpsid	i
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	b662      	cpsie	i
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e7fe      	b.n	8002a12 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e004      	b.n	8002a2a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3350      	adds	r3, #80	; 0x50
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 fc7c 	bl	800532c <pvPortMalloc>
 8002a34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00f      	beq.n	8002a5c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	3350      	adds	r3, #80	; 0x50
 8002a40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f805 	bl	8002a66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e002      	b.n	8002a88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a94:	2101      	movs	r1, #1
 8002a96:	69b8      	ldr	r0, [r7, #24]
 8002a98:	f7ff fec0 	bl	800281c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	b672      	cpsid	i
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	b662      	cpsie	i
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90b      	bls.n	8002af6 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	b672      	cpsid	i
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	b662      	cpsie	i
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e7fe      	b.n	8002af4 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002af6:	2302      	movs	r3, #2
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fef5 	bl	80028f0 <xQueueGenericCreateStatic>
 8002b06:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002b14:	69fb      	ldr	r3, [r7, #28]
	}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <xQueueCreateCountingSemaphore+0x28>
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	b672      	cpsid	i
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	b662      	cpsie	i
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e7fe      	b.n	8002b44 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90b      	bls.n	8002b66 <xQueueCreateCountingSemaphore+0x48>
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	b672      	cpsid	i
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	b662      	cpsie	i
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e7fe      	b.n	8002b64 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002b66:	2202      	movs	r2, #2
 8002b68:	2100      	movs	r1, #0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff3c 	bl	80029e8 <xQueueGenericCreate>
 8002b70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002b7e:	697b      	ldr	r3, [r7, #20]
	}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <xQueueGenericSend+0x34>
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	b672      	cpsid	i
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	b662      	cpsie	i
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x42>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <xQueueGenericSend+0x46>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericSend+0x48>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <xQueueGenericSend+0x64>
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	b672      	cpsid	i
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	b662      	cpsie	i
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d103      	bne.n	8002bfa <xQueueGenericSend+0x72>
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <xQueueGenericSend+0x76>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <xQueueGenericSend+0x78>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <xQueueGenericSend+0x94>
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	b672      	cpsid	i
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	b662      	cpsie	i
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	e7fe      	b.n	8002c1a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c1c:	f001 fc56 	bl	80044cc <xTaskGetSchedulerState>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <xQueueGenericSend+0xa4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <xQueueGenericSend+0xa8>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <xQueueGenericSend+0xaa>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xQueueGenericSend+0xc6>
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	b672      	cpsid	i
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	b662      	cpsie	i
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c4e:	f002 fa4b 	bl	80050e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <xQueueGenericSend+0xdc>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d129      	bne.n	8002cb8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6a:	f000 fc6e 	bl	800354a <prvCopyDataToQueue>
 8002c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 fa61 	bl	8004144 <xTaskRemoveFromEventList>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <xQueueGenericSend+0x200>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	e00a      	b.n	8002cb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <xQueueGenericSend+0x200>)
 8002ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cb0:	f002 fa4c 	bl	800514c <vPortExitCritical>
				return pdPASS;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e063      	b.n	8002d80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cbe:	f002 fa45 	bl	800514c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e05c      	b.n	8002d80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fa9b 	bl	800420c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cda:	f002 fa37 	bl	800514c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cde:	f001 f805 	bl	8003cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ce2:	f002 fa01 	bl	80050e8 <vPortEnterCritical>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d103      	bne.n	8002cfc <xQueueGenericSend+0x174>
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSend+0x18a>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d12:	f002 fa1b 	bl	800514c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d16:	1d3a      	adds	r2, r7, #4
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fa8a 	bl	8004238 <xTaskCheckForTimeOut>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d124      	bne.n	8002d74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2c:	f000 fd05 	bl	800373a <prvIsQueueFull>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	3310      	adds	r3, #16
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f9ae 	bl	80040a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d46:	f000 fc90 	bl	800366a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d4a:	f000 ffdd 	bl	8003d08 <xTaskResumeAll>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af7c 	bne.w	8002c4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <xQueueGenericSend+0x200>)
 8002d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	e772      	b.n	8002c4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6a:	f000 fc7e 	bl	800366a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d6e:	f000 ffcb 	bl	8003d08 <xTaskResumeAll>
 8002d72:	e76c      	b.n	8002c4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d76:	f000 fc78 	bl	800366a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d7a:	f000 ffc5 	bl	8003d08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d7e:	2300      	movs	r3, #0
		}
	}
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3738      	adds	r7, #56	; 0x38
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <xQueueGenericSendFromISR+0x30>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	b672      	cpsid	i
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	b662      	cpsie	i
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e7fe      	b.n	8002dba <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSendFromISR+0x3e>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <xQueueGenericSendFromISR+0x42>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueGenericSendFromISR+0x44>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <xQueueGenericSendFromISR+0x60>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	b672      	cpsid	i
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	b662      	cpsie	i
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d103      	bne.n	8002dfa <xQueueGenericSendFromISR+0x6e>
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericSendFromISR+0x72>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericSendFromISR+0x74>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <xQueueGenericSendFromISR+0x90>
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	b672      	cpsid	i
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	b662      	cpsie	i
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e7fe      	b.n	8002e1a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e1c:	f002 fa44 	bl	80052a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e20:	f3ef 8211 	mrs	r2, BASEPRI
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	b672      	cpsid	i
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	b662      	cpsie	i
 8002e38:	61ba      	str	r2, [r7, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <xQueueGenericSendFromISR+0xc6>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d12c      	bne.n	8002eac <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e62:	f000 fb72 	bl	800354a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e66:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d112      	bne.n	8002e96 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f961 	bl	8004144 <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	b25a      	sxtb	r2, r3
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002eaa:	e001      	b.n	8002eb0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3738      	adds	r7, #56	; 0x38
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08e      	sub	sp, #56	; 0x38
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	b672      	cpsid	i
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	b662      	cpsie	i
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	e7fe      	b.n	8002eee <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <xQueueGiveFromISR+0x4c>
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	b672      	cpsid	i
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	b662      	cpsie	i
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <xQueueGiveFromISR+0x5c>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueGiveFromISR+0x60>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueGiveFromISR+0x62>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <xQueueGiveFromISR+0x7e>
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	b672      	cpsid	i
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	b662      	cpsie	i
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e7fe      	b.n	8002f40 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f42:	f002 f9b1 	bl	80052a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002f46:	f3ef 8211 	mrs	r2, BASEPRI
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	b672      	cpsid	i
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	b662      	cpsie	i
 8002f5e:	617a      	str	r2, [r7, #20]
 8002f60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002f62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d22b      	bcs.n	8002fce <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d112      	bne.n	8002fb8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3324      	adds	r3, #36	; 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f8d0 	bl	8004144 <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e007      	b.n	8002fc8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
 8002fcc:	e001      	b.n	8002fd2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3738      	adds	r7, #56	; 0x38
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <xQueueReceive+0x32>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	b672      	cpsid	i
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	b662      	cpsie	i
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	e7fe      	b.n	8003018 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <xQueueReceive+0x40>
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <xQueueReceive+0x44>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <xQueueReceive+0x46>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <xQueueReceive+0x62>
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	b672      	cpsid	i
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	b662      	cpsie	i
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	e7fe      	b.n	8003048 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f001 fa3f 	bl	80044cc <xTaskGetSchedulerState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <xQueueReceive+0x72>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueReceive+0x76>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueReceive+0x78>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <xQueueReceive+0x94>
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	b672      	cpsid	i
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	b662      	cpsie	i
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e7fe      	b.n	800307a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800307c:	f002 f834 	bl	80050e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01f      	beq.n	80030cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003090:	f000 fac5 	bl	800361e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f84b 	bl	8004144 <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <xQueueReceive+0x1c0>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030c4:	f002 f842 	bl	800514c <vPortExitCritical>
				return pdPASS;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e069      	b.n	80031a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d2:	f002 f83b 	bl	800514c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e062      	b.n	80031a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d106      	bne.n	80030ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f891 	bl	800420c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ee:	f002 f82d 	bl	800514c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f2:	f000 fdfb 	bl	8003cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f6:	f001 fff7 	bl	80050e8 <vPortEnterCritical>
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003100:	b25b      	sxtb	r3, r3
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d103      	bne.n	8003110 <xQueueReceive+0x128>
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003116:	b25b      	sxtb	r3, r3
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d103      	bne.n	8003126 <xQueueReceive+0x13e>
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003126:	f002 f811 	bl	800514c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312a:	1d3a      	adds	r2, r7, #4
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f880 	bl	8004238 <xTaskCheckForTimeOut>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d123      	bne.n	8003186 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800313e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003140:	f000 fae5 	bl	800370e <prvIsQueueEmpty>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	3324      	adds	r3, #36	; 0x24
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffa4 	bl	80040a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315a:	f000 fa86 	bl	800366a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800315e:	f000 fdd3 	bl	8003d08 <xTaskResumeAll>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d189      	bne.n	800307c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <xQueueReceive+0x1c0>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e780      	b.n	800307c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800317a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800317c:	f000 fa75 	bl	800366a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003180:	f000 fdc2 	bl	8003d08 <xTaskResumeAll>
 8003184:	e77a      	b.n	800307c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003188:	f000 fa6f 	bl	800366a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800318c:	f000 fdbc 	bl	8003d08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003192:	f000 fabc 	bl	800370e <prvIsQueueEmpty>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f43f af6f 	beq.w	800307c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800319e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3730      	adds	r7, #48	; 0x30
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	; 0x38
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <xQueueSemaphoreTake+0x34>
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	b672      	cpsid	i
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	b662      	cpsie	i
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	e7fe      	b.n	80031de <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <xQueueSemaphoreTake+0x54>
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	b672      	cpsid	i
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	b662      	cpsie	i
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e7fe      	b.n	80031fe <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003200:	f001 f964 	bl	80044cc <xTaskGetSchedulerState>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <xQueueSemaphoreTake+0x64>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <xQueueSemaphoreTake+0x68>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <xQueueSemaphoreTake+0x6a>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <xQueueSemaphoreTake+0x86>
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	b672      	cpsid	i
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	b662      	cpsie	i
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e7fe      	b.n	8003230 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003232:	f001 ff59 	bl	80050e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d024      	beq.n	800328c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003252:	f001 fabf 	bl	80047d4 <pvTaskIncrementMutexHeldCount>
 8003256:	4602      	mov	r2, r0
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00f      	beq.n	8003284 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f000 ff6b 	bl	8004144 <xTaskRemoveFromEventList>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b54      	ldr	r3, [pc, #336]	; (80033c8 <xQueueSemaphoreTake+0x21c>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003284:	f001 ff62 	bl	800514c <vPortExitCritical>
				return pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	e098      	b.n	80033be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d112      	bne.n	80032b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <xQueueSemaphoreTake+0x104>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	b672      	cpsid	i
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	b662      	cpsie	i
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e7fe      	b.n	80032ae <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032b0:	f001 ff4c 	bl	800514c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e082      	b.n	80033be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032be:	f107 030c 	add.w	r3, r7, #12
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 ffa2 	bl	800420c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032cc:	f001 ff3e 	bl	800514c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032d0:	f000 fd0c 	bl	8003cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d4:	f001 ff08 	bl	80050e8 <vPortEnterCritical>
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d103      	bne.n	80032ee <xQueueSemaphoreTake+0x142>
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d103      	bne.n	8003304 <xQueueSemaphoreTake+0x158>
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003304:	f001 ff22 	bl	800514c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003308:	463a      	mov	r2, r7
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 ff91 	bl	8004238 <xTaskCheckForTimeOut>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d132      	bne.n	8003382 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800331c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800331e:	f000 f9f6 	bl	800370e <prvIsQueueEmpty>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d026      	beq.n	8003376 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003330:	f001 feda 	bl	80050e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f001 f8e5 	bl	8004508 <xTaskPriorityInherit>
 800333e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003340:	f001 ff04 	bl	800514c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	3324      	adds	r3, #36	; 0x24
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fea7 	bl	80040a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003354:	f000 f989 	bl	800366a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003358:	f000 fcd6 	bl	8003d08 <xTaskResumeAll>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	f47f af67 	bne.w	8003232 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <xQueueSemaphoreTake+0x21c>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	e75d      	b.n	8003232 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003378:	f000 f977 	bl	800366a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337c:	f000 fcc4 	bl	8003d08 <xTaskResumeAll>
 8003380:	e757      	b.n	8003232 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003384:	f000 f971 	bl	800366a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003388:	f000 fcbe 	bl	8003d08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800338c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800338e:	f000 f9be 	bl	800370e <prvIsQueueEmpty>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f43f af4c 	beq.w	8003232 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80033a0:	f001 fea2 	bl	80050e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033a6:	f000 f8b8 	bl	800351a <prvGetDisinheritPriorityAfterTimeout>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 f986 	bl	80046c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033b8:	f001 fec8 	bl	800514c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3738      	adds	r7, #56	; 0x38
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <xQueueReceiveFromISR+0x2e>
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	b672      	cpsid	i
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	b662      	cpsie	i
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	e7fe      	b.n	80033f8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <xQueueReceiveFromISR+0x3c>
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <xQueueReceiveFromISR+0x40>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <xQueueReceiveFromISR+0x42>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <xQueueReceiveFromISR+0x5e>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	b672      	cpsid	i
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	b662      	cpsie	i
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e7fe      	b.n	8003428 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800342a:	f001 ff3d 	bl	80052a8 <vPortValidateInterruptPriority>
	__asm volatile
 800342e:	f3ef 8211 	mrs	r2, BASEPRI
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	b672      	cpsid	i
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	b662      	cpsie	i
 8003446:	61ba      	str	r2, [r7, #24]
 8003448:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800344a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02f      	beq.n	80034ba <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003468:	f000 f8d9 	bl	800361e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	1e5a      	subs	r2, r3, #1
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d112      	bne.n	80034a4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	3310      	adds	r3, #16
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fe5a 	bl	8004144 <xTaskRemoveFromEventList>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e007      	b.n	80034b4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034a8:	3301      	adds	r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	b25a      	sxtb	r2, r3
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80034b4:	2301      	movs	r3, #1
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
 80034b8:	e001      	b.n	80034be <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <vQueueDelete+0x2a>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	b672      	cpsid	i
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	b662      	cpsie	i
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	e7fe      	b.n	80034fa <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f95d 	bl	80037bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f001 ffd5 	bl	80054bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e001      	b.n	800353c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800353c:	68fb      	ldr	r3, [r7, #12]
	}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d14d      	bne.n	800360c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	f001 f835 	bl	80045e4 <xTaskPriorityDisinherit>
 800357a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	e043      	b.n	800360c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6898      	ldr	r0, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	461a      	mov	r2, r3
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	f002 f8cd 	bl	8005734 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d32b      	bcc.n	800360c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e026      	b.n	800360c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68d8      	ldr	r0, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	461a      	mov	r2, r3
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	f002 f8b3 	bl	8005734 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	425b      	negs	r3, r3
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d207      	bcs.n	80035fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	425b      	negs	r3, r3
 80035f4:	441a      	add	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d105      	bne.n	800360c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3b01      	subs	r3, #1
 800360a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003614:	697b      	ldr	r3, [r7, #20]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d018      	beq.n	8003662 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d303      	bcc.n	8003652 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68d9      	ldr	r1, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	461a      	mov	r2, r3
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f002 f869 	bl	8005734 <memcpy>
	}
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003672:	f001 fd39 	bl	80050e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800367e:	e011      	b.n	80036a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3324      	adds	r3, #36	; 0x24
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fd59 	bl	8004144 <xTaskRemoveFromEventList>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003698:	f000 fe32 	bl	8004300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3b01      	subs	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dce9      	bgt.n	8003680 <prvUnlockQueue+0x16>
 80036ac:	e000      	b.n	80036b0 <prvUnlockQueue+0x46>
					break;
 80036ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036b8:	f001 fd48 	bl	800514c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036bc:	f001 fd14 	bl	80050e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036c8:	e011      	b.n	80036ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3310      	adds	r3, #16
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fd34 	bl	8004144 <xTaskRemoveFromEventList>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036e2:	f000 fe0d 	bl	8004300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036e6:	7bbb      	ldrb	r3, [r7, #14]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	dce9      	bgt.n	80036ca <prvUnlockQueue+0x60>
 80036f6:	e000      	b.n	80036fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003702:	f001 fd23 	bl	800514c <vPortExitCritical>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003716:	f001 fce7 	bl	80050e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003722:	2301      	movs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e001      	b.n	800372c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800372c:	f001 fd0e 	bl	800514c <vPortExitCritical>

	return xReturn;
 8003730:	68fb      	ldr	r3, [r7, #12]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003742:	f001 fcd1 	bl	80050e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	429a      	cmp	r2, r3
 8003750:	d102      	bne.n	8003758 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e001      	b.n	800375c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800375c:	f001 fcf6 	bl	800514c <vPortExitCritical>

	return xReturn;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e014      	b.n	80037a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800379e:	e005      	b.n	80037ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d9e7      	bls.n	800377c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	200055a8 	.word	0x200055a8

080037bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e016      	b.n	80037f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <vQueueUnregisterQueue+0x50>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <vQueueUnregisterQueue+0x50>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2100      	movs	r1, #0
 80037e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80037e4:	4a09      	ldr	r2, [pc, #36]	; (800380c <vQueueUnregisterQueue+0x50>)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
				break;
 80037f0:	e005      	b.n	80037fe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b07      	cmp	r3, #7
 80037fc:	d9e5      	bls.n	80037ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200055a8 	.word	0x200055a8

08003810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003820:	f001 fc62 	bl	80050e8 <vPortEnterCritical>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382a:	b25b      	sxtb	r3, r3
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d103      	bne.n	800383a <vQueueWaitForMessageRestricted+0x2a>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003840:	b25b      	sxtb	r3, r3
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d103      	bne.n	8003850 <vQueueWaitForMessageRestricted+0x40>
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003850:	f001 fc7c 	bl	800514c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fc41 	bl	80040ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff fefd 	bl	800366a <prvUnlockQueue>
	}
 8003870:	bf00      	nop
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	; 0x38
 800387c:	af04      	add	r7, sp, #16
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <xTaskCreateStatic+0x2c>
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	b672      	cpsid	i
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	b662      	cpsie	i
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	e7fe      	b.n	80038a2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <xTaskCreateStatic+0x4a>
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	b672      	cpsid	i
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	b662      	cpsie	i
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	e7fe      	b.n	80038c0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038c2:	235c      	movs	r3, #92	; 0x5c
 80038c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b5c      	cmp	r3, #92	; 0x5c
 80038ca:	d00b      	beq.n	80038e4 <xTaskCreateStatic+0x6c>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	b672      	cpsid	i
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	b662      	cpsie	i
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e7fe      	b.n	80038e2 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01e      	beq.n	8003928 <xTaskCreateStatic+0xb0>
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003902:	2300      	movs	r3, #0
 8003904:	9303      	str	r3, [sp, #12]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f850 	bl	80039c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003922:	f000 f8d5 	bl	8003ad0 <prvAddNewTaskToReadyList>
 8003926:	e001      	b.n	800392c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800392c:	697b      	ldr	r3, [r7, #20]
	}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08c      	sub	sp, #48	; 0x30
 800393a:	af04      	add	r7, sp, #16
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4618      	mov	r0, r3
 800394c:	f001 fcee 	bl	800532c <pvPortMalloc>
 8003950:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003958:	205c      	movs	r0, #92	; 0x5c
 800395a:	f001 fce7 	bl	800532c <pvPortMalloc>
 800395e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
 800396c:	e005      	b.n	800397a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f001 fda4 	bl	80054bc <vPortFree>
 8003974:	e001      	b.n	800397a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	2300      	movs	r3, #0
 800398c:	9303      	str	r3, [sp, #12]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	9302      	str	r3, [sp, #8]
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f80e 	bl	80039c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a4:	69f8      	ldr	r0, [r7, #28]
 80039a6:	f000 f893 	bl	8003ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e002      	b.n	80039b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039b6:	69bb      	ldr	r3, [r7, #24]
	}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	21a5      	movs	r1, #165	; 0xa5
 80039da:	f001 feb6 	bl	800574a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80039e8:	440b      	add	r3, r1
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <prvInitialiseNewTask+0x5a>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	b672      	cpsid	i
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	b662      	cpsie	i
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e7fe      	b.n	8003a18 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e012      	b.n	8003a46 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	7819      	ldrb	r1, [r3, #0]
 8003a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3334      	adds	r3, #52	; 0x34
 8003a30:	460a      	mov	r2, r1
 8003a32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d9e9      	bls.n	8003a20 <prvInitialiseNewTask+0x60>
 8003a4c:	e000      	b.n	8003a50 <prvInitialiseNewTask+0x90>
		{
			break;
 8003a4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	2b37      	cmp	r3, #55	; 0x37
 8003a5c:	d901      	bls.n	8003a62 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5e:	2337      	movs	r3, #55	; 0x37
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2200      	movs	r2, #0
 8003a72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fe3b 	bl	80026f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3318      	adds	r3, #24
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fe36 	bl	80026f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f001 fa0f 	bl	8004ed4 <pxPortInitialiseStack>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad8:	f001 fb06 	bl	80050e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aee:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d110      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003afc:	f000 fc24 	bl	8004348 <prvInitialiseTaskLists>
 8003b00:	e00d      	b.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d802      	bhi.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <prvAddNewTaskToReadyList+0x74>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <prvAddNewTaskToReadyList+0xd8>)
 8003b52:	441a      	add	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7fe fdd7 	bl	800270e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b60:	f001 faf4 	bl	800514c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d207      	bcs.n	8003b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <prvAddNewTaskToReadyList+0xdc>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000bb8 	.word	0x20000bb8
 8003b98:	200006e4 	.word	0x200006e4
 8003b9c:	20000bc4 	.word	0x20000bc4
 8003ba0:	20000bd4 	.word	0x20000bd4
 8003ba4:	20000bc0 	.word	0x20000bc0
 8003ba8:	200006e8 	.word	0x200006e8
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <vTaskDelay+0x64>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <vTaskDelay+0x32>
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	b672      	cpsid	i
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	b662      	cpsie	i
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	e7fe      	b.n	8003be0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003be2:	f000 f883 	bl	8003cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003be6:	2100      	movs	r1, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fe07 	bl	80047fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bee:	f000 f88b 	bl	8003d08 <xTaskResumeAll>
 8003bf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <vTaskDelay+0x68>)
 8003bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000be0 	.word	0x20000be0
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c2a:	463a      	mov	r2, r7
 8003c2c:	1d39      	adds	r1, r7, #4
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fd0a 	bl	800264c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	9202      	str	r2, [sp, #8]
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	460a      	mov	r2, r1
 8003c4a:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <vTaskStartScheduler+0xb8>)
 8003c4c:	4822      	ldr	r0, [pc, #136]	; (8003cd8 <vTaskStartScheduler+0xbc>)
 8003c4e:	f7ff fe13 	bl	8003878 <xTaskCreateStatic>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <vTaskStartScheduler+0xc0>)
 8003c56:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c58:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <vTaskStartScheduler+0xc0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e001      	b.n	8003c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c70:	f000 fe18 	bl	80048a4 <xTimerCreateTimerTask>
 8003c74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d117      	bne.n	8003cac <vTaskStartScheduler+0x90>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	b672      	cpsid	i
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	b662      	cpsie	i
 8003c90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <vTaskStartScheduler+0xc4>)
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <vTaskStartScheduler+0xc8>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <vTaskStartScheduler+0xcc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ca6:	f001 f9a3 	bl	8004ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003caa:	e00f      	b.n	8003ccc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d10b      	bne.n	8003ccc <vTaskStartScheduler+0xb0>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	b672      	cpsid	i
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	b662      	cpsie	i
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e7fe      	b.n	8003cca <vTaskStartScheduler+0xae>
}
 8003ccc:	bf00      	nop
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	080057c4 	.word	0x080057c4
 8003cd8:	08004319 	.word	0x08004319
 8003cdc:	20000bdc 	.word	0x20000bdc
 8003ce0:	20000bd8 	.word	0x20000bd8
 8003ce4:	20000bc4 	.word	0x20000bc4
 8003ce8:	20000bbc 	.word	0x20000bbc

08003cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <vTaskSuspendAll+0x18>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <vTaskSuspendAll+0x18>)
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000be0 	.word	0x20000be0

08003d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <xTaskResumeAll+0x118>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <xTaskResumeAll+0x2e>
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	b672      	cpsid	i
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	b662      	cpsie	i
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e7fe      	b.n	8003d34 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d36:	f001 f9d7 	bl	80050e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <xTaskResumeAll+0x118>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <xTaskResumeAll+0x118>)
 8003d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <xTaskResumeAll+0x118>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d162      	bne.n	8003e12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <xTaskResumeAll+0x11c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05e      	beq.n	8003e12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d54:	e02f      	b.n	8003db6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <xTaskResumeAll+0x120>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3318      	adds	r3, #24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fd30 	bl	80027c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fd2b 	bl	80027c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <xTaskResumeAll+0x124>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d903      	bls.n	8003d86 <xTaskResumeAll+0x7e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <xTaskResumeAll+0x124>)
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <xTaskResumeAll+0x128>)
 8003d94:	441a      	add	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fcb6 	bl	800270e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <xTaskResumeAll+0x12c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003db0:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <xTaskResumeAll+0x130>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <xTaskResumeAll+0x120>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1cb      	bne.n	8003d56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dc4:	f000 fb5c 	bl	8004480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <xTaskResumeAll+0x134>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d010      	beq.n	8003df6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dd4:	f000 f846 	bl	8003e64 <xTaskIncrementTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <xTaskResumeAll+0x130>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f1      	bne.n	8003dd4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <xTaskResumeAll+0x134>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <xTaskResumeAll+0x130>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <xTaskResumeAll+0x138>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e12:	f001 f99b 	bl	800514c <vPortExitCritical>

	return xAlreadyYielded;
 8003e16:	68bb      	ldr	r3, [r7, #8]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000be0 	.word	0x20000be0
 8003e24:	20000bb8 	.word	0x20000bb8
 8003e28:	20000b78 	.word	0x20000b78
 8003e2c:	20000bc0 	.word	0x20000bc0
 8003e30:	200006e8 	.word	0x200006e8
 8003e34:	200006e4 	.word	0x200006e4
 8003e38:	20000bcc 	.word	0x20000bcc
 8003e3c:	20000bc8 	.word	0x20000bc8
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <xTaskGetTickCount+0x1c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e50:	687b      	ldr	r3, [r7, #4]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000bbc 	.word	0x20000bbc

08003e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <xTaskIncrementTick+0x154>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 808f 	bne.w	8003f96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <xTaskIncrementTick+0x158>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e80:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <xTaskIncrementTick+0x158>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d121      	bne.n	8003ed0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <xTaskIncrementTick+0x4a>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	b672      	cpsid	i
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	b662      	cpsie	i
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	e7fe      	b.n	8003eac <xTaskIncrementTick+0x48>
 8003eae:	4b44      	ldr	r3, [pc, #272]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <xTaskIncrementTick+0x160>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <xTaskIncrementTick+0x160>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <xTaskIncrementTick+0x164>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a3f      	ldr	r2, [pc, #252]	; (8003fc8 <xTaskIncrementTick+0x164>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	f000 fad8 	bl	8004480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <xTaskIncrementTick+0x168>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d34e      	bcc.n	8003f78 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <xTaskIncrementTick+0x84>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <xTaskIncrementTick+0x86>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <xTaskIncrementTick+0x168>)
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	601a      	str	r2, [r3, #0]
					break;
 8003ef6:	e03f      	b.n	8003f78 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <xTaskIncrementTick+0x15c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d203      	bcs.n	8003f18 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f10:	4a2e      	ldr	r2, [pc, #184]	; (8003fcc <xTaskIncrementTick+0x168>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6013      	str	r3, [r2, #0]
						break;
 8003f16:	e02f      	b.n	8003f78 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fc53 	bl	80027c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3318      	adds	r3, #24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fc4a 	bl	80027c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <xTaskIncrementTick+0x16c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d903      	bls.n	8003f48 <xTaskIncrementTick+0xe4>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <xTaskIncrementTick+0x16c>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <xTaskIncrementTick+0x170>)
 8003f56:	441a      	add	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe fbd5 	bl	800270e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <xTaskIncrementTick+0x174>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d3b3      	bcc.n	8003eda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f76:	e7b0      	b.n	8003eda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <xTaskIncrementTick+0x174>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	4915      	ldr	r1, [pc, #84]	; (8003fd4 <xTaskIncrementTick+0x170>)
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d907      	bls.n	8003fa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e004      	b.n	8003fa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <xTaskIncrementTick+0x178>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <xTaskIncrementTick+0x178>)
 8003f9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <xTaskIncrementTick+0x17c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fac:	697b      	ldr	r3, [r7, #20]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000be0 	.word	0x20000be0
 8003fbc:	20000bbc 	.word	0x20000bbc
 8003fc0:	20000b70 	.word	0x20000b70
 8003fc4:	20000b74 	.word	0x20000b74
 8003fc8:	20000bd0 	.word	0x20000bd0
 8003fcc:	20000bd8 	.word	0x20000bd8
 8003fd0:	20000bc0 	.word	0x20000bc0
 8003fd4:	200006e8 	.word	0x200006e8
 8003fd8:	200006e4 	.word	0x200006e4
 8003fdc:	20000bc8 	.word	0x20000bc8
 8003fe0:	20000bcc 	.word	0x20000bcc

08003fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <vTaskSwitchContext+0xa8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <vTaskSwitchContext+0xac>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ff8:	e042      	b.n	8004080 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <vTaskSwitchContext+0xac>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <vTaskSwitchContext+0xb0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e011      	b.n	800402c <vTaskSwitchContext+0x48>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <vTaskSwitchContext+0x42>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	b672      	cpsid	i
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	b662      	cpsie	i
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e7fe      	b.n	8004024 <vTaskSwitchContext+0x40>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b01      	subs	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	491a      	ldr	r1, [pc, #104]	; (8004098 <vTaskSwitchContext+0xb4>)
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0e3      	beq.n	8004008 <vTaskSwitchContext+0x24>
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <vTaskSwitchContext+0xb4>)
 800404c:	4413      	add	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3308      	adds	r3, #8
 8004062:	429a      	cmp	r2, r3
 8004064:	d104      	bne.n	8004070 <vTaskSwitchContext+0x8c>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <vTaskSwitchContext+0xb8>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4a06      	ldr	r2, [pc, #24]	; (8004094 <vTaskSwitchContext+0xb0>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000be0 	.word	0x20000be0
 8004090:	20000bcc 	.word	0x20000bcc
 8004094:	20000bc0 	.word	0x20000bc0
 8004098:	200006e8 	.word	0x200006e8
 800409c:	200006e4 	.word	0x200006e4

080040a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <vTaskPlaceOnEventList+0x28>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	b672      	cpsid	i
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	b662      	cpsie	i
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e7fe      	b.n	80040c6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <vTaskPlaceOnEventList+0x48>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3318      	adds	r3, #24
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fe fb40 	bl	8002756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040d6:	2101      	movs	r1, #1
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f000 fb8f 	bl	80047fc <prvAddCurrentTaskToDelayedList>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200006e4 	.word	0x200006e4

080040ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <vTaskPlaceOnEventListRestricted+0x2a>
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	b672      	cpsid	i
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	b662      	cpsie	i
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	e7fe      	b.n	8004114 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <vTaskPlaceOnEventListRestricted+0x54>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3318      	adds	r3, #24
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7fe faf5 	bl	800270e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	68b8      	ldr	r0, [r7, #8]
 8004134:	f000 fb62 	bl	80047fc <prvAddCurrentTaskToDelayedList>
	}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200006e4 	.word	0x200006e4

08004144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <xTaskRemoveFromEventList+0x2e>
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	b672      	cpsid	i
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	b662      	cpsie	i
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e7fe      	b.n	8004170 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3318      	adds	r3, #24
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fb26 	bl	80027c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <xTaskRemoveFromEventList+0xb0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11d      	bne.n	80041c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe fb1d 	bl	80027c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <xTaskRemoveFromEventList+0xb4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d903      	bls.n	80041a2 <xTaskRemoveFromEventList+0x5e>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <xTaskRemoveFromEventList+0xb4>)
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <xTaskRemoveFromEventList+0xb8>)
 80041b0:	441a      	add	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f7fe faa8 	bl	800270e <vListInsertEnd>
 80041be:	e005      	b.n	80041cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3318      	adds	r3, #24
 80041c4:	4619      	mov	r1, r3
 80041c6:	480e      	ldr	r0, [pc, #56]	; (8004200 <xTaskRemoveFromEventList+0xbc>)
 80041c8:	f7fe faa1 	bl	800270e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <xTaskRemoveFromEventList+0xc0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d905      	bls.n	80041e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <xTaskRemoveFromEventList+0xc4>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e001      	b.n	80041ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80041ea:	697b      	ldr	r3, [r7, #20]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000be0 	.word	0x20000be0
 80041f8:	20000bc0 	.word	0x20000bc0
 80041fc:	200006e8 	.word	0x200006e8
 8004200:	20000b78 	.word	0x20000b78
 8004204:	200006e4 	.word	0x200006e4
 8004208:	20000bcc 	.word	0x20000bcc

0800420c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <vTaskInternalSetTimeOutState+0x24>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <vTaskInternalSetTimeOutState+0x28>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	20000bd0 	.word	0x20000bd0
 8004234:	20000bbc 	.word	0x20000bbc

08004238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xTaskCheckForTimeOut+0x28>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	b672      	cpsid	i
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	b662      	cpsie	i
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	e7fe      	b.n	800425e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <xTaskCheckForTimeOut+0x46>
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	b672      	cpsid	i
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	b662      	cpsie	i
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e7fe      	b.n	800427c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800427e:	f000 ff33 	bl	80050e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <xTaskCheckForTimeOut+0xc0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d102      	bne.n	80042a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e023      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <xTaskCheckForTimeOut+0xc4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d007      	beq.n	80042be <xTaskCheckForTimeOut+0x86>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e015      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d20b      	bcs.n	80042e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff99 	bl	800420c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e004      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ea:	f000 ff2f 	bl	800514c <vPortExitCritical>

	return xReturn;
 80042ee:	69fb      	ldr	r3, [r7, #28]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000bbc 	.word	0x20000bbc
 80042fc:	20000bd0 	.word	0x20000bd0

08004300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <vTaskMissedYield+0x14>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000bcc 	.word	0x20000bcc

08004318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004320:	f000 f852 	bl	80043c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <prvIdleTask+0x28>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d9f9      	bls.n	8004320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <prvIdleTask+0x2c>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800433c:	e7f0      	b.n	8004320 <prvIdleTask+0x8>
 800433e:	bf00      	nop
 8004340:	200006e8 	.word	0x200006e8
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	e00c      	b.n	800436e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <prvInitialiseTaskLists+0x60>)
 8004360:	4413      	add	r3, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe f9a6 	bl	80026b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3301      	adds	r3, #1
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b37      	cmp	r3, #55	; 0x37
 8004372:	d9ef      	bls.n	8004354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004374:	480d      	ldr	r0, [pc, #52]	; (80043ac <prvInitialiseTaskLists+0x64>)
 8004376:	f7fe f99d 	bl	80026b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800437a:	480d      	ldr	r0, [pc, #52]	; (80043b0 <prvInitialiseTaskLists+0x68>)
 800437c:	f7fe f99a 	bl	80026b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004380:	480c      	ldr	r0, [pc, #48]	; (80043b4 <prvInitialiseTaskLists+0x6c>)
 8004382:	f7fe f997 	bl	80026b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004386:	480c      	ldr	r0, [pc, #48]	; (80043b8 <prvInitialiseTaskLists+0x70>)
 8004388:	f7fe f994 	bl	80026b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800438c:	480b      	ldr	r0, [pc, #44]	; (80043bc <prvInitialiseTaskLists+0x74>)
 800438e:	f7fe f991 	bl	80026b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <prvInitialiseTaskLists+0x78>)
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <prvInitialiseTaskLists+0x64>)
 8004396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <prvInitialiseTaskLists+0x7c>)
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <prvInitialiseTaskLists+0x68>)
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200006e8 	.word	0x200006e8
 80043ac:	20000b48 	.word	0x20000b48
 80043b0:	20000b5c 	.word	0x20000b5c
 80043b4:	20000b78 	.word	0x20000b78
 80043b8:	20000b8c 	.word	0x20000b8c
 80043bc:	20000ba4 	.word	0x20000ba4
 80043c0:	20000b70 	.word	0x20000b70
 80043c4:	20000b74 	.word	0x20000b74

080043c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ce:	e019      	b.n	8004404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043d0:	f000 fe8a 	bl	80050e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <prvCheckTasksWaitingTermination+0x4c>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe f9f1 	bl	80027c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <prvCheckTasksWaitingTermination+0x50>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <prvCheckTasksWaitingTermination+0x50>)
 80043ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvCheckTasksWaitingTermination+0x54>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <prvCheckTasksWaitingTermination+0x54>)
 80043f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043fa:	f000 fea7 	bl	800514c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f80e 	bl	8004420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <prvCheckTasksWaitingTermination+0x54>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e1      	bne.n	80043d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000b8c 	.word	0x20000b8c
 8004418:	20000bb8 	.word	0x20000bb8
 800441c:	20000ba0 	.word	0x20000ba0

08004420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f840 	bl	80054bc <vPortFree>
				vPortFree( pxTCB );
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 f83d 	bl	80054bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004442:	e019      	b.n	8004478 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800444a:	2b01      	cmp	r3, #1
 800444c:	d103      	bne.n	8004456 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 f834 	bl	80054bc <vPortFree>
	}
 8004454:	e010      	b.n	8004478 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800445c:	2b02      	cmp	r3, #2
 800445e:	d00b      	beq.n	8004478 <prvDeleteTCB+0x58>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	b672      	cpsid	i
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	b662      	cpsie	i
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e7fe      	b.n	8004476 <prvDeleteTCB+0x56>
	}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <prvResetNextTaskUnblockTime+0x44>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <prvResetNextTaskUnblockTime+0x14>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <prvResetNextTaskUnblockTime+0x16>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvResetNextTaskUnblockTime+0x48>)
 800449c:	f04f 32ff 	mov.w	r2, #4294967295
 80044a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044a2:	e008      	b.n	80044b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <prvResetNextTaskUnblockTime+0x44>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <prvResetNextTaskUnblockTime+0x48>)
 80044b4:	6013      	str	r3, [r2, #0]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000b70 	.word	0x20000b70
 80044c8:	20000bd8 	.word	0x20000bd8

080044cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <xTaskGetSchedulerState+0x34>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044da:	2301      	movs	r3, #1
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	e008      	b.n	80044f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <xTaskGetSchedulerState+0x38>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044e8:	2302      	movs	r3, #2
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	e001      	b.n	80044f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044f2:	687b      	ldr	r3, [r7, #4]
	}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000bc4 	.word	0x20000bc4
 8004504:	20000be0 	.word	0x20000be0

08004508 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d056      	beq.n	80045cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <xTaskPriorityInherit+0xd0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	429a      	cmp	r2, r3
 800452a:	d246      	bcs.n	80045ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	db06      	blt.n	8004542 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <xTaskPriorityInherit+0xd0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6959      	ldr	r1, [r3, #20]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a22      	ldr	r2, [pc, #136]	; (80045dc <xTaskPriorityInherit+0xd4>)
 8004554:	4413      	add	r3, r2
 8004556:	4299      	cmp	r1, r3
 8004558:	d101      	bne.n	800455e <xTaskPriorityInherit+0x56>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <xTaskPriorityInherit+0x58>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d022      	beq.n	80045aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f92d 	bl	80027c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <xTaskPriorityInherit+0xd0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <xTaskPriorityInherit+0xd8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d903      	bls.n	800458c <xTaskPriorityInherit+0x84>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <xTaskPriorityInherit+0xd8>)
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4a10      	ldr	r2, [pc, #64]	; (80045dc <xTaskPriorityInherit+0xd4>)
 800459a:	441a      	add	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fe f8b3 	bl	800270e <vListInsertEnd>
 80045a8:	e004      	b.n	80045b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <xTaskPriorityInherit+0xd0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e008      	b.n	80045cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <xTaskPriorityInherit+0xd0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d201      	bcs.n	80045cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045cc:	68fb      	ldr	r3, [r7, #12]
	}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200006e4 	.word	0x200006e4
 80045dc:	200006e8 	.word	0x200006e8
 80045e0:	20000bc0 	.word	0x20000bc0

080045e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d058      	beq.n	80046ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <xTaskPriorityDisinherit+0xd4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	429a      	cmp	r2, r3
 8004602:	d00b      	beq.n	800461c <xTaskPriorityDisinherit+0x38>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	b672      	cpsid	i
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	b662      	cpsie	i
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e7fe      	b.n	800461a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xTaskPriorityDisinherit+0x58>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	b672      	cpsid	i
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	b662      	cpsie	i
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	e7fe      	b.n	800463a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	429a      	cmp	r2, r3
 8004650:	d02c      	beq.n	80046ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004656:	2b00      	cmp	r3, #0
 8004658:	d128      	bne.n	80046ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe f8b2 	bl	80027c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <xTaskPriorityDisinherit+0xd8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d903      	bls.n	800468c <xTaskPriorityDisinherit+0xa8>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <xTaskPriorityDisinherit+0xd8>)
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <xTaskPriorityDisinherit+0xdc>)
 800469a:	441a      	add	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fe f833 	bl	800270e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046ac:	697b      	ldr	r3, [r7, #20]
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200006e4 	.word	0x200006e4
 80046bc:	20000bc0 	.word	0x20000bc0
 80046c0:	200006e8 	.word	0x200006e8

080046c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d071      	beq.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <vTaskPriorityDisinheritAfterTimeout+0x38>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	b672      	cpsid	i
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	b662      	cpsie	i
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e7fe      	b.n	80046fa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d902      	bls.n	800470c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e002      	b.n	8004712 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d051      	beq.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d14c      	bne.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	429a      	cmp	r2, r3
 800472e:	d10b      	bne.n	8004748 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	b672      	cpsid	i
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	b662      	cpsie	i
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	e7fe      	b.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	db04      	blt.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6959      	ldr	r1, [r3, #20]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004776:	4413      	add	r3, r2
 8004778:	4299      	cmp	r1, r3
 800477a:	d101      	bne.n	8004780 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01c      	beq.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe f81c 	bl	80027c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d903      	bls.n	80047a4 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4a06      	ldr	r2, [pc, #24]	; (80047cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047b2:	441a      	add	r2, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f7fd ffa7 	bl	800270e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047c0:	bf00      	nop
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200006e4 	.word	0x200006e4
 80047cc:	200006e8 	.word	0x200006e8
 80047d0:	20000bc0 	.word	0x20000bc0

080047d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047e6:	3201      	adds	r2, #1
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80047ea:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047ec:	681b      	ldr	r3, [r3, #0]
	}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	200006e4 	.word	0x200006e4

080047fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004806:	4b21      	ldr	r3, [pc, #132]	; (800488c <prvAddCurrentTaskToDelayedList+0x90>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <prvAddCurrentTaskToDelayedList+0x94>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd ffd8 	bl	80027c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d10a      	bne.n	8004836 <prvAddCurrentTaskToDelayedList+0x3a>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <prvAddCurrentTaskToDelayedList+0x94>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4819      	ldr	r0, [pc, #100]	; (8004894 <prvAddCurrentTaskToDelayedList+0x98>)
 8004830:	f7fd ff6d 	bl	800270e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004834:	e026      	b.n	8004884 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <prvAddCurrentTaskToDelayedList+0x94>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	429a      	cmp	r2, r3
 800484c:	d209      	bcs.n	8004862 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <prvAddCurrentTaskToDelayedList+0x94>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fd ff7b 	bl	8002756 <vListInsert>
}
 8004860:	e010      	b.n	8004884 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <prvAddCurrentTaskToDelayedList+0x94>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fd ff71 	bl	8002756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	d202      	bcs.n	8004884 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800487e:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000bbc 	.word	0x20000bbc
 8004890:	200006e4 	.word	0x200006e4
 8004894:	20000ba4 	.word	0x20000ba4
 8004898:	20000b74 	.word	0x20000b74
 800489c:	20000b70 	.word	0x20000b70
 80048a0:	20000bd8 	.word	0x20000bd8

080048a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ae:	f000 fad1 	bl	8004e54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <xTimerCreateTimerTask+0x84>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048c2:	1d3a      	adds	r2, r7, #4
 80048c4:	f107 0108 	add.w	r1, r7, #8
 80048c8:	f107 030c 	add.w	r3, r7, #12
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd fed7 	bl	8002680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	9202      	str	r2, [sp, #8]
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	2302      	movs	r3, #2
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2300      	movs	r3, #0
 80048e2:	460a      	mov	r2, r1
 80048e4:	4911      	ldr	r1, [pc, #68]	; (800492c <xTimerCreateTimerTask+0x88>)
 80048e6:	4812      	ldr	r0, [pc, #72]	; (8004930 <xTimerCreateTimerTask+0x8c>)
 80048e8:	f7fe ffc6 	bl	8003878 <xTaskCreateStatic>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <xTimerCreateTimerTask+0x90>)
 80048f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <xTimerCreateTimerTask+0x90>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048fa:	2301      	movs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <xTimerCreateTimerTask+0x78>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	b672      	cpsid	i
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	b662      	cpsie	i
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e7fe      	b.n	800491a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800491c:	697b      	ldr	r3, [r7, #20]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000c14 	.word	0x20000c14
 800492c:	080057cc 	.word	0x080057cc
 8004930:	08004a59 	.word	0x08004a59
 8004934:	20000c18 	.word	0x20000c18

08004938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xTimerGenericCommand+0x30>
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	b672      	cpsid	i
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	b662      	cpsie	i
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	e7fe      	b.n	8004966 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <xTimerGenericCommand+0x98>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02a      	beq.n	80049c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b05      	cmp	r3, #5
 8004980:	dc18      	bgt.n	80049b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004982:	f7ff fda3 	bl	80044cc <xTaskGetSchedulerState>
 8004986:	4603      	mov	r3, r0
 8004988:	2b02      	cmp	r3, #2
 800498a:	d109      	bne.n	80049a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <xTimerGenericCommand+0x98>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	f107 0110 	add.w	r1, r7, #16
 8004994:	2300      	movs	r3, #0
 8004996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004998:	f7fe f8f6 	bl	8002b88 <xQueueGenericSend>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24
 800499e:	e012      	b.n	80049c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <xTimerGenericCommand+0x98>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	f107 0110 	add.w	r1, r7, #16
 80049a8:	2300      	movs	r3, #0
 80049aa:	2200      	movs	r2, #0
 80049ac:	f7fe f8ec 	bl	8002b88 <xQueueGenericSend>
 80049b0:	6278      	str	r0, [r7, #36]	; 0x24
 80049b2:	e008      	b.n	80049c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <xTimerGenericCommand+0x98>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	f107 0110 	add.w	r1, r7, #16
 80049bc:	2300      	movs	r3, #0
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	f7fe f9e4 	bl	8002d8c <xQueueGenericSendFromISR>
 80049c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000c14 	.word	0x20000c14

080049d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <prvProcessExpiredTimer+0x80>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd feeb 	bl	80027c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d123      	bne.n	8004a42 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	18d1      	adds	r1, r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f000 f8ca 	bl	8004ba0 <prvInsertTimerInActiveList>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a12:	2300      	movs	r3, #0
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f7ff ff8b 	bl	8004938 <xTimerGenericCommand>
 8004a22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <prvProcessExpiredTimer+0x6e>
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	b672      	cpsid	i
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	b662      	cpsie	i
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e7fe      	b.n	8004a40 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	6978      	ldr	r0, [r7, #20]
 8004a48:	4798      	blx	r3
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000c0c 	.word	0x20000c0c

08004a58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f857 	bl	8004b18 <prvGetNextExpireTime>
 8004a6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f803 	bl	8004a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a76:	f000 f8d5 	bl	8004c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a7a:	e7f1      	b.n	8004a60 <prvTimerTask+0x8>

08004a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a86:	f7ff f931 	bl	8003cec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f866 	bl	8004b60 <prvSampleTimeNow>
 8004a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d130      	bne.n	8004afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <prvProcessTimerOrBlockTask+0x3c>
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d806      	bhi.n	8004ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004aaa:	f7ff f92d 	bl	8003d08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff8f 	bl	80049d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ab6:	e024      	b.n	8004b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <prvProcessTimerOrBlockTask+0x90>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <prvProcessTimerOrBlockTask+0x94>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	f7fe fe97 	bl	8003810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ae2:	f7ff f911 	bl	8003d08 <xTaskResumeAll>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <prvProcessTimerOrBlockTask+0x98>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
}
 8004afc:	e001      	b.n	8004b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004afe:	f7ff f903 	bl	8003d08 <xTaskResumeAll>
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000c10 	.word	0x20000c10
 8004b10:	20000c14 	.word	0x20000c14
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <prvGetNextExpireTime+0x44>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <prvGetNextExpireTime+0x44>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e001      	b.n	8004b4e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	20000c0c 	.word	0x20000c0c

08004b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b68:	f7ff f96c 	bl	8003e44 <xTaskGetTickCount>
 8004b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <prvSampleTimeNow+0x3c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d205      	bcs.n	8004b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b78:	f000 f90a 	bl	8004d90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <prvSampleTimeNow+0x3c>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000c1c 	.word	0x20000c1c

08004ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d812      	bhi.n	8004bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e01b      	b.n	8004c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <prvInsertTimerInActiveList+0x7c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f7fd fdb6 	bl	8002756 <vListInsert>
 8004bea:	e012      	b.n	8004c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d206      	bcs.n	8004c02 <prvInsertTimerInActiveList+0x62>
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e007      	b.n	8004c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <prvInsertTimerInActiveList+0x80>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7fd fda2 	bl	8002756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c12:	697b      	ldr	r3, [r7, #20]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000c10 	.word	0x20000c10
 8004c20:	20000c0c 	.word	0x20000c0c

08004c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	; 0x38
 8004c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c2a:	e09f      	b.n	8004d6c <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da19      	bge.n	8004c66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	3304      	adds	r3, #4
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <prvProcessReceivedCommands+0x32>
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	b672      	cpsid	i
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	b662      	cpsie	i
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e7fe      	b.n	8004c54 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5c:	6850      	ldr	r0, [r2, #4]
 8004c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c60:	6892      	ldr	r2, [r2, #8]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	db7e      	blt.n	8004d6a <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd fda3 	bl	80027c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c82:	463b      	mov	r3, r7
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ff6b 	bl	8004b60 <prvSampleTimeNow>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d86c      	bhi.n	8004d6c <prvProcessReceivedCommands+0x148>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <prvProcessReceivedCommands+0x74>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc1 	.word	0x08004cc1
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d1f 	.word	0x08004d1f
 8004cac:	08004d59 	.word	0x08004d59
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004cc1 	.word	0x08004cc1
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d1f 	.word	0x08004d1f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	18d1      	adds	r1, r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cce:	f7ff ff67 	bl	8004ba0 <prvInsertTimerInActiveList>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d049      	beq.n	8004d6c <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cde:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d141      	bne.n	8004d6c <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	441a      	add	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfa:	f7ff fe1d 	bl	8004938 <xTimerGenericCommand>
 8004cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d132      	bne.n	8004d6c <prvProcessReceivedCommands+0x148>
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	b672      	cpsid	i
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	b662      	cpsie	i
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e7fe      	b.n	8004d1c <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <prvProcessReceivedCommands+0x120>
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	b672      	cpsid	i
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	b662      	cpsie	i
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e7fe      	b.n	8004d42 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	18d1      	adds	r1, r2, r3
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d52:	f7ff ff25 	bl	8004ba0 <prvInsertTimerInActiveList>
					break;
 8004d56:	e009      	b.n	8004d6c <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 8004d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d64:	f000 fbaa 	bl	80054bc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d68:	e000      	b.n	8004d6c <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <prvProcessReceivedCommands+0x168>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1d39      	adds	r1, r7, #4
 8004d72:	2200      	movs	r2, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe f937 	bl	8002fe8 <xQueueReceive>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f af55 	bne.w	8004c2c <prvProcessReceivedCommands+0x8>
	}
}
 8004d82:	bf00      	nop
 8004d84:	3730      	adds	r7, #48	; 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000c14 	.word	0x20000c14

08004d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d96:	e046      	b.n	8004e26 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fd fd09 	bl	80027c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d12f      	bne.n	8004e26 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d90e      	bls.n	8004df6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7fd fcb1 	bl	8002756 <vListInsert>
 8004df4:	e017      	b.n	8004e26 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df6:	2300      	movs	r3, #0
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff fd99 	bl	8004938 <xTimerGenericCommand>
 8004e06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <prvSwitchTimerLists+0x96>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	b672      	cpsid	i
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	b662      	cpsie	i
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	e7fe      	b.n	8004e24 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1b3      	bne.n	8004d98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <prvSwitchTimerLists+0xc0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvSwitchTimerLists+0xbc>)
 8004e3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e3e:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <prvSwitchTimerLists+0xc0>)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000c0c 	.word	0x20000c0c
 8004e50:	20000c10 	.word	0x20000c10

08004e54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e5a:	f000 f945 	bl	80050e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d120      	bne.n	8004ea8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e66:	4814      	ldr	r0, [pc, #80]	; (8004eb8 <prvCheckForValidListAndQueue+0x64>)
 8004e68:	f7fd fc24 	bl	80026b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e6c:	4813      	ldr	r0, [pc, #76]	; (8004ebc <prvCheckForValidListAndQueue+0x68>)
 8004e6e:	f7fd fc21 	bl	80026b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <prvCheckForValidListAndQueue+0x6c>)
 8004e74:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <prvCheckForValidListAndQueue+0x64>)
 8004e76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <prvCheckForValidListAndQueue+0x70>)
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <prvCheckForValidListAndQueue+0x68>)
 8004e7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <prvCheckForValidListAndQueue+0x74>)
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <prvCheckForValidListAndQueue+0x78>)
 8004e86:	2110      	movs	r1, #16
 8004e88:	200a      	movs	r0, #10
 8004e8a:	f7fd fd31 	bl	80028f0 <xQueueGenericCreateStatic>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e92:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	490b      	ldr	r1, [pc, #44]	; (8004ed0 <prvCheckForValidListAndQueue+0x7c>)
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fc62 	bl	800376c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea8:	f000 f950 	bl	800514c <vPortExitCritical>
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000c14 	.word	0x20000c14
 8004eb8:	20000be4 	.word	0x20000be4
 8004ebc:	20000bf8 	.word	0x20000bf8
 8004ec0:	20000c0c 	.word	0x20000c0c
 8004ec4:	20000c10 	.word	0x20000c10
 8004ec8:	20000cc0 	.word	0x20000cc0
 8004ecc:	20000c20 	.word	0x20000c20
 8004ed0:	080057d4 	.word	0x080057d4

08004ed4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f04:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <pxPortInitialiseStack+0x64>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b14      	subs	r3, #20
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f06f 0202 	mvn.w	r2, #2
 8004f22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3b20      	subs	r3, #32
 8004f28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	08004f3d 	.word	0x08004f3d

08004f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <prvTaskExitError+0x58>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d00b      	beq.n	8004f68 <prvTaskExitError+0x2c>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	b672      	cpsid	i
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	b662      	cpsie	i
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e7fe      	b.n	8004f66 <prvTaskExitError+0x2a>
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	b672      	cpsid	i
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	b662      	cpsie	i
 8004f7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f7e:	bf00      	nop
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0fc      	beq.n	8004f80 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000008 	.word	0x20000008
	...

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	4770      	bx	lr
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fc8:	4808      	ldr	r0, [pc, #32]	; (8004fec <prvPortStartFirstTask+0x24>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8814 	msr	CONTROL, r0
 8004fda:	b662      	cpsie	i
 8004fdc:	b661      	cpsie	f
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	df00      	svc	0
 8004fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fea:	bf00      	nop
 8004fec:	e000ed08 	.word	0xe000ed08

08004ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <xPortStartScheduler+0xe0>)
 8004ff8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	22ff      	movs	r2, #255	; 0xff
 8005006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005018:	b2da      	uxtb	r2, r3
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <xPortStartScheduler+0xe4>)
 800501c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <xPortStartScheduler+0xe8>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005024:	e009      	b.n	800503a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005026:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <xPortStartScheduler+0xe8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <xPortStartScheduler+0xe8>)
 800502e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d0ef      	beq.n	8005026 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <xPortStartScheduler+0xe8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1c3 0307 	rsb	r3, r3, #7
 800504e:	2b04      	cmp	r3, #4
 8005050:	d00b      	beq.n	800506a <xPortStartScheduler+0x7a>
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	b672      	cpsid	i
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	b662      	cpsie	i
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	e7fe      	b.n	8005068 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <xPortStartScheduler+0xe8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <xPortStartScheduler+0xe8>)
 8005072:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <xPortStartScheduler+0xe8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <xPortStartScheduler+0xe8>)
 800507e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <xPortStartScheduler+0xec>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <xPortStartScheduler+0xec>)
 800508e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005092:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <xPortStartScheduler+0xec>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a10      	ldr	r2, [pc, #64]	; (80050dc <xPortStartScheduler+0xec>)
 800509a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800509e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050a0:	f000 f8d4 	bl	800524c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <xPortStartScheduler+0xf0>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050aa:	f000 f8f3 	bl	8005294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <xPortStartScheduler+0xf4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <xPortStartScheduler+0xf4>)
 80050b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ba:	f7ff ff85 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050be:	f7fe ff91 	bl	8003fe4 <vTaskSwitchContext>
	prvTaskExitError();
 80050c2:	f7ff ff3b 	bl	8004f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	e000e400 	.word	0xe000e400
 80050d4:	20000d10 	.word	0x20000d10
 80050d8:	20000d14 	.word	0x20000d14
 80050dc:	e000ed20 	.word	0xe000ed20
 80050e0:	20000008 	.word	0x20000008
 80050e4:	e000ef34 	.word	0xe000ef34

080050e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	b672      	cpsid	i
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	b662      	cpsie	i
 8005102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <vPortEnterCritical+0x5c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <vPortEnterCritical+0x5c>)
 800510c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <vPortEnterCritical+0x5c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d110      	bne.n	8005138 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <vPortEnterCritical+0x60>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <vPortEnterCritical+0x50>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	b672      	cpsid	i
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	b662      	cpsie	i
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	e7fe      	b.n	8005136 <vPortEnterCritical+0x4e>
	}
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	20000008 	.word	0x20000008
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <vPortExitCritical+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <vPortExitCritical+0x26>
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	b672      	cpsid	i
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	b662      	cpsie	i
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	e7fe      	b.n	8005170 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <vPortExitCritical+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3b01      	subs	r3, #1
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <vPortExitCritical+0x50>)
 800517a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <vPortExitCritical+0x50>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <vPortExitCritical+0x42>
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000008 	.word	0x20000008

080051a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f01e 0f10 	tst.w	lr, #16
 80051b0:	bf08      	it	eq
 80051b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	6010      	str	r0, [r2, #0]
 80051bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	f7fe ff06 	bl	8003fe4 <vTaskSwitchContext>
 80051d8:	f04f 0000 	mov.w	r0, #0
 80051dc:	f380 8811 	msr	BASEPRI, r0
 80051e0:	bc09      	pop	{r0, r3}
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f01e 0f10 	tst.w	lr, #16
 80051ee:	bf08      	it	eq
 80051f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051f4:	f380 8809 	msr	PSP, r0
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop

08005200 <pxCurrentTCBConst>:
 8005200:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	b672      	cpsid	i
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	b662      	cpsie	i
 8005222:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005224:	f7fe fe1e 	bl	8003e64 <xTaskIncrementTick>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <SysTick_Handler+0x40>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	603b      	str	r3, [r7, #0]
	__asm volatile
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <vPortSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <vPortSetupTimerInterrupt+0x40>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <vPortSetupTimerInterrupt+0x44>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	e000e014 	.word	0xe000e014

08005294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052a4 <vPortEnableVFP+0x10>
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800529e:	6001      	str	r1, [r0, #0]
 80052a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052a2:	bf00      	nop
 80052a4:	e000ed88 	.word	0xe000ed88

080052a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ae:	f3ef 8305 	mrs	r3, IPSR
 80052b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d915      	bls.n	80052e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052ba:	4a18      	ldr	r2, [pc, #96]	; (800531c <vPortValidateInterruptPriority+0x74>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052c4:	4b16      	ldr	r3, [pc, #88]	; (8005320 <vPortValidateInterruptPriority+0x78>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	7afa      	ldrb	r2, [r7, #11]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d20b      	bcs.n	80052e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	b672      	cpsid	i
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	b662      	cpsie	i
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	e7fe      	b.n	80052e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <vPortValidateInterruptPriority+0x7c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <vPortValidateInterruptPriority+0x80>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d90b      	bls.n	800530e <vPortValidateInterruptPriority+0x66>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	b672      	cpsid	i
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	b662      	cpsie	i
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	e7fe      	b.n	800530c <vPortValidateInterruptPriority+0x64>
	}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e3f0 	.word	0xe000e3f0
 8005320:	20000d10 	.word	0x20000d10
 8005324:	e000ed0c 	.word	0xe000ed0c
 8005328:	20000d14 	.word	0x20000d14

0800532c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005338:	f7fe fcd8 	bl	8003cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800533c:	4b5a      	ldr	r3, [pc, #360]	; (80054a8 <pvPortMalloc+0x17c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005344:	f000 f916 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005348:	4b58      	ldr	r3, [pc, #352]	; (80054ac <pvPortMalloc+0x180>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 8090 	bne.w	8005476 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01e      	beq.n	800539a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800535c:	2208      	movs	r2, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d015      	beq.n	800539a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f023 0307 	bic.w	r3, r3, #7
 8005374:	3308      	adds	r3, #8
 8005376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <pvPortMalloc+0x6e>
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	b672      	cpsid	i
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	b662      	cpsie	i
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e7fe      	b.n	8005398 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d06a      	beq.n	8005476 <pvPortMalloc+0x14a>
 80053a0:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <pvPortMalloc+0x184>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d865      	bhi.n	8005476 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053aa:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <pvPortMalloc+0x188>)
 80053ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <pvPortMalloc+0x188>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b4:	e004      	b.n	80053c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d903      	bls.n	80053d2 <pvPortMalloc+0xa6>
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053d2:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <pvPortMalloc+0x17c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	429a      	cmp	r2, r3
 80053da:	d04c      	beq.n	8005476 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	4413      	add	r3, r2
 80053e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	2308      	movs	r3, #8
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d920      	bls.n	8005440 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <pvPortMalloc+0xfc>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	b672      	cpsid	i
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	b662      	cpsie	i
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e7fe      	b.n	8005426 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800543a:	69b8      	ldr	r0, [r7, #24]
 800543c:	f000 f8fc 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <pvPortMalloc+0x184>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <pvPortMalloc+0x184>)
 800544c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <pvPortMalloc+0x184>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <pvPortMalloc+0x18c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d203      	bcs.n	8005462 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <pvPortMalloc+0x184>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <pvPortMalloc+0x18c>)
 8005460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <pvPortMalloc+0x180>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	431a      	orrs	r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005476:	f7fe fc47 	bl	8003d08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <pvPortMalloc+0x170>
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e7fe      	b.n	800549a <pvPortMalloc+0x16e>
	return pvReturn;
 800549c:	69fb      	ldr	r3, [r7, #28]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3728      	adds	r7, #40	; 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20004920 	.word	0x20004920
 80054ac:	2000492c 	.word	0x2000492c
 80054b0:	20004924 	.word	0x20004924
 80054b4:	20004918 	.word	0x20004918
 80054b8:	20004928 	.word	0x20004928

080054bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d04a      	beq.n	8005564 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054ce:	2308      	movs	r3, #8
 80054d0:	425b      	negs	r3, r3
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <vPortFree+0xb0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <vPortFree+0x46>
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	b672      	cpsid	i
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	b662      	cpsie	i
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e7fe      	b.n	8005500 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <vPortFree+0x66>
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	b672      	cpsid	i
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	b662      	cpsie	i
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	e7fe      	b.n	8005520 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <vPortFree+0xb0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <vPortFree+0xb0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005548:	f7fe fbd0 	bl	8003cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xb4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4413      	add	r3, r2
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xb4>)
 8005558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f000 f86c 	bl	8005638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005560:	f7fe fbd2 	bl	8003d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2000492c 	.word	0x2000492c
 8005570:	20004924 	.word	0x20004924

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20000d18 	.word	0x20000d18
 8005624:	20004918 	.word	0x20004918
 8005628:	20004920 	.word	0x20004920
 800562c:	20004928 	.word	0x20004928
 8005630:	20004924 	.word	0x20004924
 8005634:	2000492c 	.word	0x2000492c

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8f7      	bhi.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20004918 	.word	0x20004918
 80056e8:	20004920 	.word	0x20004920

080056ec <__libc_init_array>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	4e0d      	ldr	r6, [pc, #52]	; (8005724 <__libc_init_array+0x38>)
 80056f0:	4c0d      	ldr	r4, [pc, #52]	; (8005728 <__libc_init_array+0x3c>)
 80056f2:	1ba4      	subs	r4, r4, r6
 80056f4:	10a4      	asrs	r4, r4, #2
 80056f6:	2500      	movs	r5, #0
 80056f8:	42a5      	cmp	r5, r4
 80056fa:	d109      	bne.n	8005710 <__libc_init_array+0x24>
 80056fc:	4e0b      	ldr	r6, [pc, #44]	; (800572c <__libc_init_array+0x40>)
 80056fe:	4c0c      	ldr	r4, [pc, #48]	; (8005730 <__libc_init_array+0x44>)
 8005700:	f000 f82c 	bl	800575c <_init>
 8005704:	1ba4      	subs	r4, r4, r6
 8005706:	10a4      	asrs	r4, r4, #2
 8005708:	2500      	movs	r5, #0
 800570a:	42a5      	cmp	r5, r4
 800570c:	d105      	bne.n	800571a <__libc_init_array+0x2e>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005714:	4798      	blx	r3
 8005716:	3501      	adds	r5, #1
 8005718:	e7ee      	b.n	80056f8 <__libc_init_array+0xc>
 800571a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800571e:	4798      	blx	r3
 8005720:	3501      	adds	r5, #1
 8005722:	e7f2      	b.n	800570a <__libc_init_array+0x1e>
 8005724:	080057fc 	.word	0x080057fc
 8005728:	080057fc 	.word	0x080057fc
 800572c:	080057fc 	.word	0x080057fc
 8005730:	08005800 	.word	0x08005800

08005734 <memcpy>:
 8005734:	b510      	push	{r4, lr}
 8005736:	1e43      	subs	r3, r0, #1
 8005738:	440a      	add	r2, r1
 800573a:	4291      	cmp	r1, r2
 800573c:	d100      	bne.n	8005740 <memcpy+0xc>
 800573e:	bd10      	pop	{r4, pc}
 8005740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005748:	e7f7      	b.n	800573a <memcpy+0x6>

0800574a <memset>:
 800574a:	4402      	add	r2, r0
 800574c:	4603      	mov	r3, r0
 800574e:	4293      	cmp	r3, r2
 8005750:	d100      	bne.n	8005754 <memset+0xa>
 8005752:	4770      	bx	lr
 8005754:	f803 1b01 	strb.w	r1, [r3], #1
 8005758:	e7f9      	b.n	800574e <memset+0x4>
	...

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr

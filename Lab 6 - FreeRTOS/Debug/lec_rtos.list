
lec_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007164  08007164  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800716c  0800716c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b0  20000010  08007184  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034c0  08007184  000234c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c01  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ef7  00000000  00000000  00038c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001428  00000000  00000000  0003bb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003377  00000000  00000000  0003e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000108c7  00000000  00000000  000415a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7f03  00000000  00000000  00051e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00119dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08006f3c 	.word	0x08006f3c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08006f3c 	.word	0x08006f3c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	4604      	mov	r4, r0
 8000278:	9e08      	ldr	r6, [sp, #32]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0c03 	orr.w	ip, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	fbbc f7fe 	udiv	r7, ip, lr
 80002a6:	fa1f f885 	uxth.w	r8, r5
 80002aa:	fb0e c317 	mls	r3, lr, r7, ip
 80002ae:	fb07 f908 	mul.w	r9, r7, r8
 80002b2:	0c21      	lsrs	r1, r4, #16
 80002b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b8:	4599      	cmp	r9, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002c2:	f080 811c 	bcs.w	80004fe <__udivmoddi4+0x28e>
 80002c6:	4599      	cmp	r9, r3
 80002c8:	f240 8119 	bls.w	80004fe <__udivmoddi4+0x28e>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	eba3 0309 	sub.w	r3, r3, r9
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	fb00 f108 	mul.w	r1, r0, r8
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f0:	f080 8107 	bcs.w	8000502 <__udivmoddi4+0x292>
 80002f4:	42a1      	cmp	r1, r4
 80002f6:	f240 8104 	bls.w	8000502 <__udivmoddi4+0x292>
 80002fa:	3802      	subs	r0, #2
 80002fc:	442c      	add	r4, r5
 80002fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000302:	2700      	movs	r7, #0
 8000304:	1a64      	subs	r4, r4, r1
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	2300      	movs	r3, #0
 800030a:	40d4      	lsrs	r4, r2
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ec 	beq.w	80004f8 <__udivmoddi4+0x288>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d148      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fb 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	469c      	mov	ip, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	2701      	movs	r7, #1
 8000364:	1b49      	subs	r1, r1, r5
 8000366:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800036a:	fa1f f985 	uxth.w	r9, r5
 800036e:	fbb1 fef8 	udiv	lr, r1, r8
 8000372:	fb08 111e 	mls	r1, r8, lr, r1
 8000376:	fb09 f00e 	mul.w	r0, r9, lr
 800037a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800037e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000382:	4298      	cmp	r0, r3
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x126>
 8000386:	18eb      	adds	r3, r5, r3
 8000388:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x124>
 800038e:	4298      	cmp	r0, r3
 8000390:	f200 80cd 	bhi.w	800052e <__udivmoddi4+0x2be>
 8000394:	468e      	mov	lr, r1
 8000396:	1a1b      	subs	r3, r3, r0
 8000398:	fbb3 f0f8 	udiv	r0, r3, r8
 800039c:	fb08 3310 	mls	r3, r8, r0, r3
 80003a0:	fb09 f900 	mul.w	r9, r9, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ae:	192c      	adds	r4, r5, r4
 80003b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f200 80b6 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 80003bc:	4618      	mov	r0, r3
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003c6:	e79e      	b.n	8000306 <__udivmoddi4+0x96>
 80003c8:	f1c7 0520 	rsb	r5, r7, #32
 80003cc:	40bb      	lsls	r3, r7
 80003ce:	fa22 fc05 	lsr.w	ip, r2, r5
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa21 f405 	lsr.w	r4, r1, r5
 80003da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003de:	fbb4 f9fe 	udiv	r9, r4, lr
 80003e2:	fa1f f88c 	uxth.w	r8, ip
 80003e6:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ea:	fa20 f305 	lsr.w	r3, r0, r5
 80003ee:	40b9      	lsls	r1, r7
 80003f0:	fb09 fa08 	mul.w	sl, r9, r8
 80003f4:	4319      	orrs	r1, r3
 80003f6:	0c0b      	lsrs	r3, r1, #16
 80003f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f307 	lsl.w	r3, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	45a2      	cmp	sl, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4464      	add	r4, ip
 8000420:	eba4 040a 	sub.w	r4, r4, sl
 8000424:	fbb4 f0fe 	udiv	r0, r4, lr
 8000428:	fb0e 4410 	mls	r4, lr, r0, r4
 800042c:	fb00 fa08 	mul.w	sl, r0, r8
 8000430:	b289      	uxth	r1, r1
 8000432:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000436:	45a2      	cmp	sl, r4
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x1dc>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000442:	d26b      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000444:	45a2      	cmp	sl, r4
 8000446:	d969      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000448:	3802      	subs	r0, #2
 800044a:	4464      	add	r4, ip
 800044c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000450:	fba0 8902 	umull	r8, r9, r0, r2
 8000454:	eba4 040a 	sub.w	r4, r4, sl
 8000458:	454c      	cmp	r4, r9
 800045a:	4641      	mov	r1, r8
 800045c:	46ce      	mov	lr, r9
 800045e:	d354      	bcc.n	800050a <__udivmoddi4+0x29a>
 8000460:	d051      	beq.n	8000506 <__udivmoddi4+0x296>
 8000462:	2e00      	cmp	r6, #0
 8000464:	d069      	beq.n	800053a <__udivmoddi4+0x2ca>
 8000466:	1a5a      	subs	r2, r3, r1
 8000468:	eb64 040e 	sbc.w	r4, r4, lr
 800046c:	fa04 f505 	lsl.w	r5, r4, r5
 8000470:	fa22 f307 	lsr.w	r3, r2, r7
 8000474:	40fc      	lsrs	r4, r7
 8000476:	431d      	orrs	r5, r3
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	4095      	lsls	r5, r2
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	fa21 f003 	lsr.w	r0, r1, r3
 800048a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800048e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000492:	fa1f f985 	uxth.w	r9, r5
 8000496:	fb08 0017 	mls	r0, r8, r7, r0
 800049a:	fa24 f303 	lsr.w	r3, r4, r3
 800049e:	4091      	lsls	r1, r2
 80004a0:	fb07 fc09 	mul.w	ip, r7, r9
 80004a4:	430b      	orrs	r3, r1
 80004a6:	0c19      	lsrs	r1, r3, #16
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	458c      	cmp	ip, r1
 80004ae:	fa04 f402 	lsl.w	r4, r4, r2
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x254>
 80004b4:	1869      	adds	r1, r5, r1
 80004b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80004ba:	d231      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004bc:	458c      	cmp	ip, r1
 80004be:	d92f      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	3f02      	subs	r7, #2
 80004c2:	4429      	add	r1, r5
 80004c4:	eba1 010c 	sub.w	r1, r1, ip
 80004c8:	fbb1 f0f8 	udiv	r0, r1, r8
 80004cc:	fb08 1c10 	mls	ip, r8, r0, r1
 80004d0:	fb00 fe09 	mul.w	lr, r0, r9
 80004d4:	b299      	uxth	r1, r3
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	458e      	cmp	lr, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e4:	d218      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004e6:	458e      	cmp	lr, r1
 80004e8:	d916      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f6:	e73a      	b.n	800036e <__udivmoddi4+0xfe>
 80004f8:	4637      	mov	r7, r6
 80004fa:	4630      	mov	r0, r6
 80004fc:	e708      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fe:	460f      	mov	r7, r1
 8000500:	e6e6      	b.n	80002d0 <__udivmoddi4+0x60>
 8000502:	4618      	mov	r0, r3
 8000504:	e6fb      	b.n	80002fe <__udivmoddi4+0x8e>
 8000506:	4543      	cmp	r3, r8
 8000508:	d2ab      	bcs.n	8000462 <__udivmoddi4+0x1f2>
 800050a:	ebb8 0102 	subs.w	r1, r8, r2
 800050e:	eb69 020c 	sbc.w	r2, r9, ip
 8000512:	3801      	subs	r0, #1
 8000514:	4696      	mov	lr, r2
 8000516:	e7a4      	b.n	8000462 <__udivmoddi4+0x1f2>
 8000518:	4618      	mov	r0, r3
 800051a:	e7e8      	b.n	80004ee <__udivmoddi4+0x27e>
 800051c:	4608      	mov	r0, r1
 800051e:	e795      	b.n	800044c <__udivmoddi4+0x1dc>
 8000520:	4607      	mov	r7, r0
 8000522:	e7cf      	b.n	80004c4 <__udivmoddi4+0x254>
 8000524:	4681      	mov	r9, r0
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3802      	subs	r0, #2
 800052a:	442c      	add	r4, r5
 800052c:	e747      	b.n	80003be <__udivmoddi4+0x14e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	442b      	add	r3, r5
 8000534:	e72f      	b.n	8000396 <__udivmoddi4+0x126>
 8000536:	4638      	mov	r0, r7
 8000538:	e707      	b.n	800034a <__udivmoddi4+0xda>
 800053a:	4637      	mov	r7, r6
 800053c:	e6e8      	b.n	8000310 <__udivmoddi4+0xa0>
 800053e:	bf00      	nop

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fd0a 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f892 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f9be 	bl	80008d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000554:	f000 f938 	bl	80007c8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000558:	f000 f990 	bl	800087c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800055c:	f000 f8f6 	bl	800074c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000560:	4829      	ldr	r0, [pc, #164]	; (8000608 <main+0xc4>)
 8000562:	f000 fe07 	bl	8001174 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000566:	2104      	movs	r1, #4
 8000568:	4828      	ldr	r0, [pc, #160]	; (800060c <main+0xc8>)
 800056a:	f002 fa59 	bl	8002a20 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800056e:	f003 f933 	bl	80037d8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 0, &BtnSem_attributes);
 8000572:	4a27      	ldr	r2, [pc, #156]	; (8000610 <main+0xcc>)
 8000574:	2100      	movs	r1, #0
 8000576:	2001      	movs	r0, #1
 8000578:	f003 fa6c 	bl	8003a54 <osSemaphoreNew>
 800057c:	4602      	mov	r2, r0
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <main+0xd0>)
 8000580:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8000582:	4a25      	ldr	r2, [pc, #148]	; (8000618 <main+0xd4>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	200a      	movs	r0, #10
 8000588:	f003 fbc0 	bl	8003d0c <osMessageQueueNew>
 800058c:	4602      	mov	r2, r0
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0xd8>)
 8000590:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <main+0xdc>)
 8000594:	2100      	movs	r1, #0
 8000596:	4823      	ldr	r0, [pc, #140]	; (8000624 <main+0xe0>)
 8000598:	f003 f984 	bl	80038a4 <osThreadNew>
 800059c:	4602      	mov	r2, r0
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <main+0xe4>)
 80005a0:	601a      	str	r2, [r3, #0]

  /* creation of LED1Task */
  LED1TaskHandle = osThreadNew(StartLED1Task, NULL, &LED1Task_attributes);
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <main+0xe8>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	4822      	ldr	r0, [pc, #136]	; (8000630 <main+0xec>)
 80005a8:	f003 f97c 	bl	80038a4 <osThreadNew>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <main+0xf0>)
 80005b0:	601a      	str	r2, [r3, #0]

  /* creation of LED2Task */
  LED2TaskHandle = osThreadNew(StartLED2Task, NULL, &LED2Task_attributes);
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <main+0xf4>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4821      	ldr	r0, [pc, #132]	; (800063c <main+0xf8>)
 80005b8:	f003 f974 	bl	80038a4 <osThreadNew>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <main+0xfc>)
 80005c0:	601a      	str	r2, [r3, #0]

  /* creation of ReadBtnTask */
  ReadBtnTaskHandle = osThreadNew(StartReadBtnTask, NULL, &ReadBtnTask_attributes);
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <main+0x100>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	4820      	ldr	r0, [pc, #128]	; (8000648 <main+0x104>)
 80005c8:	f003 f96c 	bl	80038a4 <osThreadNew>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <main+0x108>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* creation of LED3Task */
  LED3TaskHandle = osThreadNew(StartLED3Task, NULL, &LED3Task_attributes);
 80005d2:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <main+0x10c>)
 80005d4:	2100      	movs	r1, #0
 80005d6:	481f      	ldr	r0, [pc, #124]	; (8000654 <main+0x110>)
 80005d8:	f003 f964 	bl	80038a4 <osThreadNew>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <main+0x114>)
 80005e0:	601a      	str	r2, [r3, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 80005e2:	4a1e      	ldr	r2, [pc, #120]	; (800065c <main+0x118>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <main+0x11c>)
 80005e8:	f003 f95c 	bl	80038a4 <osThreadNew>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <main+0x120>)
 80005f0:	601a      	str	r2, [r3, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <main+0x124>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <main+0x128>)
 80005f8:	f003 f954 	bl	80038a4 <osThreadNew>
 80005fc:	4602      	mov	r2, r0
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <main+0x12c>)
 8000600:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000602:	f003 f91b 	bl	800383c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0xc2>
 8000608:	20002594 	.word	0x20002594
 800060c:	20001f8c 	.word	0x20001f8c
 8000610:	0800713c 	.word	0x0800713c
 8000614:	20001d34 	.word	0x20001d34
 8000618:	08007124 	.word	0x08007124
 800061c:	20002030 	.word	0x20002030
 8000620:	08007028 	.word	0x08007028
 8000624:	08000999 	.word	0x08000999
 8000628:	20001d38 	.word	0x20001d38
 800062c:	0800704c 	.word	0x0800704c
 8000630:	080009a9 	.word	0x080009a9
 8000634:	200030cc 	.word	0x200030cc
 8000638:	08007070 	.word	0x08007070
 800063c:	080009c9 	.word	0x080009c9
 8000640:	200025c4 	.word	0x200025c4
 8000644:	08007094 	.word	0x08007094
 8000648:	08000a11 	.word	0x08000a11
 800064c:	2000282c 	.word	0x2000282c
 8000650:	080070b8 	.word	0x080070b8
 8000654:	08000a71 	.word	0x08000a71
 8000658:	20002824 	.word	0x20002824
 800065c:	080070dc 	.word	0x080070dc
 8000660:	08000aa5 	.word	0x08000aa5
 8000664:	20002828 	.word	0x20002828
 8000668:	08007100 	.word	0x08007100
 800066c:	08000b41 	.word	0x08000b41
 8000670:	20002034 	.word	0x20002034

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09c      	sub	sp, #112	; 0x70
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067e:	2238      	movs	r2, #56	; 0x38
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 fc51 	bl	8006f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fc43 	bl	8006f2a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80006ae:	2304      	movs	r3, #4
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa08 	bl	8001af4 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ea:	f000 fa5f 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fd08 	bl	8002120 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000716:	f000 fa49 	bl	8000bac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800071a:	2302      	movs	r3, #2
 800071c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800071e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000722:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f001 ff46 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 fa3b 	bl	8000bac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000736:	f001 fddd 	bl	80022f4 <HAL_RCC_EnableCSS>
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SystemClock_Config+0xd4>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	; 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	42420070 	.word	0x42420070

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC1_Init+0x74>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ADC1_Init+0x74>)
 800076a:	2201      	movs	r2, #1
 800076c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000776:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_ADC1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_ADC1_Init+0x74>)
 800078a:	f000 fc1b 	bl	8000fc4 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 fa0a 	bl	8000bac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000798:	230e      	movs	r3, #14
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2301      	movs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0x74>)
 80007aa:	f000 fd9d 	bl	80012e8 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007b4:	f000 f9fa 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20002594 	.word	0x20002594
 80007c4:	40012400 	.word	0x40012400

080007c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_TIM4_Init+0xac>)
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <MX_TIM4_Init+0xb0>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300;
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_TIM4_Init+0xac>)
 80007f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM4_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM4_Init+0xac>)
 8000800:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000804:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM4_Init+0xac>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM4_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <MX_TIM4_Init+0xac>)
 8000814:	f002 f8b4 	bl	8002980 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f9c5 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4619      	mov	r1, r3
 8000830:	4810      	ldr	r0, [pc, #64]	; (8000874 <MX_TIM4_Init+0xac>)
 8000832:	f002 fda1 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800083c:	f000 f9b6 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2204      	movs	r2, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <MX_TIM4_Init+0xac>)
 8000858:	f002 fa94 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000862:	f000 f9a3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_TIM4_Init+0xac>)
 8000868:	f000 fa36 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20001f8c 	.word	0x20001f8c
 8000878:	40000800 	.word	0x40000800

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f002 fdd8 	bl	8003468 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f975 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000308c 	.word	0x2000308c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_GPIO_Init+0xbc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a28      	ldr	r2, [pc, #160]	; (800098c <MX_GPIO_Init+0xbc>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_GPIO_Init+0xbc>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0xbc>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_GPIO_Init+0xbc>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xbc>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0320 	and.w	r3, r3, #32
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_GPIO_Init+0xbc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_GPIO_Init+0xbc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_GPIO_Init+0xbc>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_GPIO_Init+0xbc>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_GPIO_Init+0xbc>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_GPIO_Init+0xbc>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2198      	movs	r1, #152	; 0x98
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_GPIO_Init+0xc0>)
 800094a:	f001 f8a2 	bl	8001a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800094e:	2398      	movs	r3, #152	; 0x98
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2302      	movs	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000966:	f000 ff23 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 800096a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000980:	f000 ff16 	bl	80017b0 <HAL_GPIO_Init>

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	40011400 	.word	0x40011400
 8000994:	40010c00 	.word	0x40010c00

08000998 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 f829 	bl	80039f8 <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartDefaultTask+0x8>

080009a8 <StartLED1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1Task */
void StartLED1Task(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80009b0:	2108      	movs	r1, #8
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <StartLED1Task+0x1c>)
 80009b4:	f001 f885 	bl	8001ac2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f003 f81c 	bl	80039f8 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80009c0:	e7f6      	b.n	80009b0 <StartLED1Task+0x8>
 80009c2:	bf00      	nop
 80009c4:	40011400 	.word	0x40011400

080009c8 <StartLED2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2Task */
void StartLED2Task(void *argument)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b0a3      	sub	sp, #140	; 0x8c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2Task */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009d0:	2110      	movs	r1, #16
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <StartLED2Task+0x3c>)
 80009d4:	f001 f875 	bl	8001ac2 <HAL_GPIO_TogglePin>

	strcpy(msg.Buf,"LED2 Blink\r\n\0");
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <StartLED2Task+0x40>)
 80009de:	461c      	mov	r4, r3
 80009e0:	4613      	mov	r3, r2
 80009e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e4:	c407      	stmia	r4!, {r0, r1, r2}
 80009e6:	7023      	strb	r3, [r4, #0]
	osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <StartLED2Task+0x44>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	f107 0108 	add.w	r1, r7, #8
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f4:	2200      	movs	r2, #0
 80009f6:	f003 fa0f 	bl	8003e18 <osMessageQueuePut>

    osDelay(2000);
 80009fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009fe:	f002 fffb 	bl	80039f8 <osDelay>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a02:	e7e5      	b.n	80009d0 <StartLED2Task+0x8>
 8000a04:	40011400 	.word	0x40011400
 8000a08:	08006fb8 	.word	0x08006fb8
 8000a0c:	20002030 	.word	0x20002030

08000a10 <StartReadBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBtnTask */
void StartReadBtnTask(void *argument)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b0a3      	sub	sp, #140	; 0x8c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBtnTask */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	if (!HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin))
 8000a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <StartReadBtnTask+0x50>)
 8000a1e:	f001 f821 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d115      	bne.n	8000a54 <StartReadBtnTask+0x44>
	{
		osSemaphoreRelease(BtnSemHandle);
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <StartReadBtnTask+0x54>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 f915 	bl	8003c5c <osSemaphoreRelease>
		strcpy(msg.Buf,"Btn Pressed\r\n\0");
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <StartReadBtnTask+0x58>)
 8000a38:	461c      	mov	r4, r3
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3e:	c407      	stmia	r4!, {r0, r1, r2}
 8000a40:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <StartReadBtnTask+0x5c>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	f107 0108 	add.w	r1, r7, #8
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f003 f9e2 	bl	8003e18 <osMessageQueuePut>
	}
    osDelay(500);
 8000a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a58:	f002 ffce 	bl	80039f8 <osDelay>
	if (!HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin))
 8000a5c:	e7dc      	b.n	8000a18 <StartReadBtnTask+0x8>
 8000a5e:	bf00      	nop
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	20001d34 	.word	0x20001d34
 8000a68:	08006fc8 	.word	0x08006fc8
 8000a6c:	20002030 	.word	0x20002030

08000a70 <StartLED3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED3Task */
void StartLED3Task(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED3Task */
  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK)
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <StartLED3Task+0x2c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 f885 	bl	8003b90 <osSemaphoreAcquire>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <StartLED3Task+0x24>
	{
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <StartLED3Task+0x30>)
 8000a90:	f001 f817 	bl	8001ac2 <HAL_GPIO_TogglePin>
	}
    osDelay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f002 ffaf 	bl	80039f8 <osDelay>
	if (osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK)
 8000a9a:	e7ed      	b.n	8000a78 <StartLED3Task+0x8>
 8000a9c:	20001d34 	.word	0x20001d34
 8000aa0:	40011400 	.word	0x40011400

08000aa4 <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0a4      	sub	sp, #144	; 0x90
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCTask */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
    uint16_t adc_res = HAL_ADC_GetValue(&hadc1);
 8000aac:	481f      	ldr	r0, [pc, #124]	; (8000b2c <StartADCTask+0x88>)
 8000aae:	f000 fc0f 	bl	80012d0 <HAL_ADC_GetValue>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,adc_res);
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <StartADCTask+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8000ac0:	639a      	str	r2, [r3, #56]	; 0x38

    if (adc_res == 0)
 8000ac2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d113      	bne.n	8000af2 <StartADCTask+0x4e>
    {
    	strcpy(msg.Buf,"MIN ADC\r\n\0");
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <StartADCTask+0x90>)
 8000ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad2:	c303      	stmia	r3!, {r0, r1}
 8000ad4:	801a      	strh	r2, [r3, #0]
    	osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <StartADCTask+0x94>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f003 f998 	bl	8003e18 <osMessageQueuePut>
    	osDelay(500);
 8000ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aec:	f002 ff84 	bl	80039f8 <osDelay>
 8000af0:	e017      	b.n	8000b22 <StartADCTask+0x7e>
    }
    else if (adc_res > 4000)
 8000af2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8000af6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000afa:	d912      	bls.n	8000b22 <StartADCTask+0x7e>
    {
    	strcpy(msg.Buf,"MAX ADC\r\n\0");
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <StartADCTask+0x98>)
 8000b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b04:	c303      	stmia	r3!, {r0, r1}
 8000b06:	801a      	strh	r2, [r3, #0]
    	osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <StartADCTask+0x94>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010c 	add.w	r1, r7, #12
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b14:	2200      	movs	r2, #0
 8000b16:	f003 f97f 	bl	8003e18 <osMessageQueuePut>
    	osDelay(500);
 8000b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1e:	f002 ff6b 	bl	80039f8 <osDelay>
    }

	osDelay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f002 ff68 	bl	80039f8 <osDelay>
  {
 8000b28:	e7c0      	b.n	8000aac <StartADCTask+0x8>
 8000b2a:	bf00      	nop
 8000b2c:	20002594 	.word	0x20002594
 8000b30:	20001f8c 	.word	0x20001f8c
 8000b34:	08006fd8 	.word	0x08006fd8
 8000b38:	20002030 	.word	0x20002030
 8000b3c:	08006fe4 	.word	0x08006fe4

08000b40 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0a2      	sub	sp, #136	; 0x88
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <StartUARTTask+0x40>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	f107 0108 	add.w	r1, r7, #8
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b54:	2200      	movs	r2, #0
 8000b56:	f003 f9d3 	bl	8003f00 <osMessageQueueGet>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb66 	bl	8000230 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	f107 0108 	add.w	r1, r7, #8
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <StartUARTTask+0x44>)
 8000b72:	f002 fcc6 	bl	8003502 <HAL_UART_Transmit>
	osDelay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f002 ff3e 	bl	80039f8 <osDelay>
    osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);
 8000b7c:	e7e4      	b.n	8000b48 <StartUARTTask+0x8>
 8000b7e:	bf00      	nop
 8000b80:	20002030 	.word	0x20002030
 8000b84:	2000308c 	.word	0x2000308c

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9a:	f000 f9f7 	bl	8000f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <Error_Handler+0x6>

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_MspInit+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_MspInit+0x68>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_MspInit+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_MspInit+0x68>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_MspInit+0x68>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x68>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	210f      	movs	r1, #15
 8000bee:	f06f 0001 	mvn.w	r0, #1
 8000bf2:	f000 fdb2 	bl	800175a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_MspInit+0x6c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_MspInit+0x6c>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_ADC_MspInit+0x6c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d121      	bne.n	8000c88 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_ADC_MspInit+0x70>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c74:	2310      	movs	r3, #16
 8000c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_ADC_MspInit+0x74>)
 8000c84:	f000 fd94 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40012400 	.word	0x40012400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40011000 	.word	0x40011000

08000c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x34>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10b      	bne.n	8000cc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x38>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_TIM_MspPostInit+0x78>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d126      	bne.n	8000d46 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_TIM_MspPostInit+0x7c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_TIM_MspPostInit+0x7c>)
 8000cfe:	f043 0320 	orr.w	r3, r3, #32
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_TIM_MspPostInit+0x7c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0320 	and.w	r3, r3, #32
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <HAL_TIM_MspPostInit+0x80>)
 8000d26:	f000 fd43 	bl	80017b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_TIM_MspPostInit+0x84>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_TIM_MspPostInit+0x84>)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40000800 	.word	0x40000800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011400 	.word	0x40011400
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0xa4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d13d      	bne.n	8000dfc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	61d3      	str	r3, [r2, #28]
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db0:	2320      	movs	r3, #32
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dc4:	f000 fcf4 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc8:	2340      	movs	r3, #64	; 0x40
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000ddc:	f000 fce8 	bl	80017b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_UART_MspInit+0xb0>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_UART_MspInit+0xb0>)
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f000 fc96 	bl	800175a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000e2e:	2036      	movs	r0, #54	; 0x36
 8000e30:	f000 fcaf 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	61d3      	str	r3, [r2, #28]
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fb46 	bl	80024e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 fb1c 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8000e60:	4603      	mov	r3, r0
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <HAL_InitTick+0xa4>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e96:	f001 fcc1 	bl	800281c <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_InitTick+0xa8>)
 8000ea2:	f001 fd13 	bl	80028cc <HAL_TIM_Base_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3730      	adds	r7, #48	; 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	431bde83 	.word	0x431bde83
 8000ebc:	20003434 	.word	0x20003434
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ec8:	f001 fb3e 	bl	8002548 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x8>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
	...

08000ef4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <TIM6_IRQHandler+0x10>)
 8000efa:	f001 fe3b 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20003434 	.word	0x20003434

08000f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f16:	e003      	b.n	8000f20 <LoopCopyDataInit>

08000f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f1e:	3104      	adds	r1, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f28:	d3f6      	bcc.n	8000f18 <CopyDataInit>
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f2c:	e002      	b.n	8000f34 <LoopFillZerobss>

08000f2e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f30:	f842 3b04 	str.w	r3, [r2], #4

08000f34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f38:	d3f9      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3a:	f7ff ffe5 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f005 ffc5 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff faff 	bl	8000544 <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r3, =_sidata
 8000f48:	08007174 	.word	0x08007174
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f50:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000f54:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000f58:	200034c0 	.word	0x200034c0

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x28>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x28>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fbe7 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff4c 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe1a 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <HAL_IncTick+0x20>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	2000347c 	.word	0x2000347c

08000fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	2000347c 	.word	0x2000347c

08000fc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0be      	b.n	8001164 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d109      	bne.n	8001008 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe0e 	bl	8000c24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fab7 	bl	800157c <ADC_ConversionStop_Disable>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8099 	bne.w	8001152 <HAL_ADC_Init+0x18e>
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 8095 	bne.w	8001152 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001030:	f023 0302 	bic.w	r3, r3, #2
 8001034:	f043 0202 	orr.w	r2, r3, #2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001044:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800104c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4313      	orrs	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105c:	d003      	beq.n	8001066 <HAL_ADC_Init+0xa2>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d102      	bne.n	800106c <HAL_ADC_Init+0xa8>
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	e000      	b.n	800106e <HAL_ADC_Init+0xaa>
 800106c:	2300      	movs	r3, #0
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7d1b      	ldrb	r3, [r3, #20]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d119      	bne.n	80010b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b1b      	ldrb	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	3b01      	subs	r3, #1
 800108a:	035a      	lsls	r2, r3, #13
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	e00b      	b.n	80010b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f043 0220 	orr.w	r2, r3, #32
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_ADC_Init+0x1a8>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e0:	d003      	beq.n	80010ea <HAL_ADC_Init+0x126>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d104      	bne.n	80010f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	051b      	lsls	r3, r3, #20
 80010f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	430a      	orrs	r2, r1
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_ADC_Init+0x1ac>)
 8001110:	4013      	ands	r3, r2
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	429a      	cmp	r2, r3
 8001116:	d10b      	bne.n	8001130 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112e:	e018      	b.n	8001162 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	f023 0312 	bic.w	r3, r3, #18
 8001138:	f043 0210 	orr.w	r2, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001150:	e007      	b.n	8001162 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f043 0210 	orr.w	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001162:	7dfb      	ldrb	r3, [r7, #23]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	ffe1f7fd 	.word	0xffe1f7fd
 8001170:	ff1f0efe 	.word	0xff1f0efe

08001174 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Start+0x1a>
 800118a:	2302      	movs	r3, #2
 800118c:	e098      	b.n	80012c0 <HAL_ADC_Start+0x14c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f99e 	bl	80014d8 <ADC_Enable>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 8087 	bne.w	80012b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <HAL_ADC_Start+0x154>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d105      	bne.n	80011d2 <HAL_ADC_Start+0x5e>
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_ADC_Start+0x158>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d115      	bne.n	80011fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d026      	beq.n	800123a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011fc:	e01d      	b.n	800123a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <HAL_ADC_Start+0x158>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d004      	beq.n	800121e <HAL_ADC_Start+0xaa>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <HAL_ADC_Start+0x154>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10d      	bne.n	800123a <HAL_ADC_Start+0xc6>
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_ADC_Start+0x158>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	f023 0206 	bic.w	r2, r3, #6
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
 8001252:	e002      	b.n	800125a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f06f 0202 	mvn.w	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001276:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800127a:	d113      	bne.n	80012a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_ADC_Start+0x154>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d105      	bne.n	8001292 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_ADC_Start+0x158>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d108      	bne.n	80012a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	e00c      	b.n	80012be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e003      	b.n	80012be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40012800 	.word	0x40012800
 80012cc:	40012400 	.word	0x40012400

080012d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x20>
 8001304:	2302      	movs	r3, #2
 8001306:	e0dc      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1da>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b06      	cmp	r3, #6
 8001316:	d81c      	bhi.n	8001352 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b05      	subs	r3, #5
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	4019      	ands	r1, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b05      	subs	r3, #5
 8001344:	fa00 f203 	lsl.w	r2, r0, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
 8001350:	e03c      	b.n	80013cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d81c      	bhi.n	8001394 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	3b23      	subs	r3, #35	; 0x23
 800136c:	221f      	movs	r2, #31
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	4019      	ands	r1, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b23      	subs	r3, #35	; 0x23
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
 8001392:	e01b      	b.n	80013cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b41      	subs	r3, #65	; 0x41
 80013a6:	221f      	movs	r2, #31
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4019      	ands	r1, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b41      	subs	r3, #65	; 0x41
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b09      	cmp	r3, #9
 80013d2:	d91c      	bls.n	800140e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68d9      	ldr	r1, [r3, #12]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	3b1e      	subs	r3, #30
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4019      	ands	r1, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6898      	ldr	r0, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	3b1e      	subs	r3, #30
 8001400:	fa00 f203 	lsl.w	r2, r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	e019      	b.n	8001442 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6919      	ldr	r1, [r3, #16]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	2207      	movs	r2, #7
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	4019      	ands	r1, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6898      	ldr	r0, [r3, #8]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	fa00 f203 	lsl.w	r2, r0, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d003      	beq.n	8001452 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800144e:	2b11      	cmp	r3, #17
 8001450:	d132      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d125      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d126      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001478:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d11a      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3b01      	subs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_ConfigChannel+0x1b2>
 80014a6:	e007      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f043 0220 	orr.w	r2, r3, #32
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40012400 	.word	0x40012400
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d039      	beq.n	800156a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <ADC_Enable+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <ADC_Enable+0xa0>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001514:	e002      	b.n	800151c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3b01      	subs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001522:	f7ff fd45 	bl	8000fb0 <HAL_GetTick>
 8001526:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001528:	e018      	b.n	800155c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800152a:	f7ff fd41 	bl	8000fb0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d911      	bls.n	800155c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f043 0210 	orr.w	r2, r3, #16
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e007      	b.n	800156c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d1df      	bne.n	800152a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d127      	bne.n	80015e6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015a6:	f7ff fd03 	bl	8000fb0 <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ac:	e014      	b.n	80015d8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015ae:	f7ff fcff 	bl	8000fb0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d90d      	bls.n	80015d8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e007      	b.n	80015e8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d0e3      	beq.n	80015ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4906      	ldr	r1, [pc, #24]	; (8001688 <__NVIC_EnableIRQ+0x34>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff4f 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff64 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ffb2 	bl	80016e0 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff81 	bl	800168c <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff57 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e127      	b.n	8001a14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c4:	2201      	movs	r2, #1
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8116 	bne.w	8001a0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d034      	beq.n	8001854 <HAL_GPIO_Init+0xa4>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d80d      	bhi.n	800180a <HAL_GPIO_Init+0x5a>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d02b      	beq.n	800184a <HAL_GPIO_Init+0x9a>
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d804      	bhi.n	8001800 <HAL_GPIO_Init+0x50>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0xae>
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d01c      	beq.n	8001838 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e048      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001800:	2b03      	cmp	r3, #3
 8001802:	d043      	beq.n	800188c <HAL_GPIO_Init+0xdc>
 8001804:	2b11      	cmp	r3, #17
 8001806:	d01b      	beq.n	8001840 <HAL_GPIO_Init+0x90>
          break;
 8001808:	e043      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800180a:	4a89      	ldr	r2, [pc, #548]	; (8001a30 <HAL_GPIO_Init+0x280>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d026      	beq.n	800185e <HAL_GPIO_Init+0xae>
 8001810:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_GPIO_Init+0x280>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d806      	bhi.n	8001824 <HAL_GPIO_Init+0x74>
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_GPIO_Init+0x284>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d020      	beq.n	800185e <HAL_GPIO_Init+0xae>
 800181c:	4a86      	ldr	r2, [pc, #536]	; (8001a38 <HAL_GPIO_Init+0x288>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01d      	beq.n	800185e <HAL_GPIO_Init+0xae>
          break;
 8001822:	e036      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001824:	4a85      	ldr	r2, [pc, #532]	; (8001a3c <HAL_GPIO_Init+0x28c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0xae>
 800182a:	4a85      	ldr	r2, [pc, #532]	; (8001a40 <HAL_GPIO_Init+0x290>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d016      	beq.n	800185e <HAL_GPIO_Init+0xae>
 8001830:	4a84      	ldr	r2, [pc, #528]	; (8001a44 <HAL_GPIO_Init+0x294>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xae>
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e028      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e023      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01e      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e019      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e012      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2bff      	cmp	r3, #255	; 0xff
 8001896:	d801      	bhi.n	800189c <HAL_GPIO_Init+0xec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	e001      	b.n	80018a0 <HAL_GPIO_Init+0xf0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2bff      	cmp	r3, #255	; 0xff
 80018a6:	d802      	bhi.n	80018ae <HAL_GPIO_Init+0xfe>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x104>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3b08      	subs	r3, #8
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	210f      	movs	r1, #15
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8096 	beq.w	8001a0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fa:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_GPIO_Init+0x29c>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x2a0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x19e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x19a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_GPIO_Init+0x2a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x196>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2ac>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x192>
 800193e:	2303      	movs	r3, #3
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 8001942:	2304      	movs	r3, #4
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 800194e:	2300      	movs	r3, #0
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001960:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x29c>)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4938      	ldr	r1, [pc, #224]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	43db      	mvns	r3, r3
 8001990:	4933      	ldr	r1, [pc, #204]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	492e      	ldr	r1, [pc, #184]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4929      	ldr	r1, [pc, #164]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4924      	ldr	r1, [pc, #144]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	491f      	ldr	r1, [pc, #124]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	491a      	ldr	r1, [pc, #104]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60cb      	str	r3, [r1, #12]
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4915      	ldr	r1, [pc, #84]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f aed0 	bne.w	80017c4 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	372c      	adds	r7, #44	; 0x2c
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10220000 	.word	0x10220000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa2:	787b      	ldrb	r3, [r7, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	041a      	lsls	r2, r3, #16
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e304      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8087 	beq.w	8001c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d00c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b20:	4b8f      	ldr	r3, [pc, #572]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d112      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d06c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x12c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d168      	bne.n	8001c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e2de      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x76>
 8001b5c:	4b80      	ldr	r3, [pc, #512]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x98>
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a77      	ldr	r2, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xbc>
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a71      	ldr	r2, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f9ee 	bl	8000fb0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f9ea 	bl	8000fb0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e292      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe4>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f9da 	bl	8000fb0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f9d6 	bl	8000fb0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e27e      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x10c>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e252      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4939      	ldr	r1, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f98f 	bl	8000fb0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff f98b 	bl	8000fb0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e233      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f96e 	bl	8000fb0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f96a 	bl	8000fb0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e212      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d03a      	beq.n	8001d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff f94e 	bl	8000fb0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f94a 	bl	8000fb0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1f2      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 fc1a 	bl	8002570 <RCC_Delay>
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f934 	bl	8000fb0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	e00f      	b.n	8001d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f930 	bl	8000fb0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d908      	bls.n	8001d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1d8      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	42420000 	.word	0x42420000
 8001d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	4b9b      	ldr	r3, [pc, #620]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e9      	bne.n	8001d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a6 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b94      	ldr	r3, [pc, #592]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b8e      	ldr	r3, [pc, #568]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4ec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x4ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a87      	ldr	r2, [pc, #540]	; (8001fe0 <HAL_RCC_OscConfig+0x4ec>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff f8f1 	bl	8000fb0 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7ff f8ed 	bl	8000fb0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e195      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x4ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x312>
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e02d      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x334>
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a72      	ldr	r2, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	e01c      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x356>
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff f8a1 	bl	8000fb0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff f89d 	bl	8000fb0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e143      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCC_OscConfig+0x37e>
 8001e94:	e014      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f88b 	bl	8000fb0 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff f887 	bl	8000fb0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e12d      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d105      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 808c 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e103      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d14e      	bne.n	8001fae <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0ef      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCC_OscConfig+0x4f0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff f83b 	bl	8000fb0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f3e:	f7ff f837 	bl	8000fb0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b64      	cmp	r3, #100	; 0x64
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0df      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	491c      	ldr	r1, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x4f0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff f813 	bl	8000fb0 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f8e:	f7ff f80f 	bl	8000fb0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0b7      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x49a>
 8001fac:	e022      	b.n	8001ff4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_RCC_OscConfig+0x4e8>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_OscConfig+0x4f0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fff6 	bl	8000fb0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001fc8:	f7fe fff2 	bl	8000fb0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d908      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e09a      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e9      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8088 	beq.w	800210e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d068      	beq.n	80020dc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d14d      	bne.n	80020ae <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_RCC_OscConfig+0x628>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ffca 	bl	8000fb0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ffc6 	bl	8000fb0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e06e      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d10f      	bne.n	8002068 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4931      	ldr	r1, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8002052:	4313      	orrs	r3, r2
 8002054:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	492d      	ldr	r1, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 8002064:	4313      	orrs	r3, r2
 8002066:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	430b      	orrs	r3, r1
 800207a:	4927      	ldr	r1, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_OscConfig+0x628>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe ff93 	bl	8000fb0 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe ff8f 	bl	8000fb0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e037      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x59a>
 80020ac:	e02f      	b.n	800210e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x628>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe ff7c 	bl	8000fb0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7fe ff78 	bl	8000fb0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e020      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x5c8>
 80020da:	e018      	b.n	800210e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e013      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x624>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	42420060 	.word	0x42420060

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4965      	ldr	r1, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800219e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e073      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7fe fece 	bl	8000fb0 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7fe feca 	bl	8000fb0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f82d 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	fa21 f303 	lsr.w	r3, r1, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1cc>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fda0 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	0800714c 	.word	0x0800714c
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_EnableCSS+0x14>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	4242004c 	.word	0x4242004c

0800230c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230e:	b091      	sub	sp, #68	; 0x44
 8002310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 8002314:	f107 0414 	add.w	r4, r7, #20
 8002318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800231a:	c407      	stmia	r4!, {r0, r1, r2}
 800231c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <HAL_RCC_GetSysClockFreq+0x164>)
 8002320:	1d3c      	adds	r4, r7, #4
 8002322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d002      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x4e>
 8002354:	2b08      	cmp	r3, #8
 8002356:	d003      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x54>
 8002358:	e07f      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_GetSysClockFreq+0x16c>)
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800235e:	e07f      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800236c:	4413      	add	r3, r2
 800236e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d065      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800238a:	4413      	add	r3, r2
 800238c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d043      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	3301      	adds	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3302      	adds	r3, #2
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	f04f 0400 	mov.w	r4, #0
 80023c8:	fb03 f502 	mul.w	r5, r3, r2
 80023cc:	fb01 f004 	mul.w	r0, r1, r4
 80023d0:	4428      	add	r0, r5
 80023d2:	fba1 3403 	umull	r3, r4, r1, r3
 80023d6:	1902      	adds	r2, r0, r4
 80023d8:	4614      	mov	r4, r2
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_RCC_GetSysClockFreq+0x16c>)
 80023dc:	fb02 f104 	mul.w	r1, r2, r4
 80023e0:	2200      	movs	r2, #0
 80023e2:	fb02 f203 	mul.w	r2, r2, r3
 80023e6:	440a      	add	r2, r1
 80023e8:	4923      	ldr	r1, [pc, #140]	; (8002478 <HAL_RCC_GetSysClockFreq+0x16c>)
 80023ea:	fba3 5601 	umull	r5, r6, r3, r1
 80023ee:	1993      	adds	r3, r2, r6
 80023f0:	461e      	mov	r6, r3
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	f04f 0400 	mov.w	r4, #0
 8002400:	fb03 fc02 	mul.w	ip, r3, r2
 8002404:	fb01 f004 	mul.w	r0, r1, r4
 8002408:	4460      	add	r0, ip
 800240a:	fba1 3403 	umull	r3, r4, r1, r3
 800240e:	1902      	adds	r2, r0, r4
 8002410:	4614      	mov	r4, r2
 8002412:	461a      	mov	r2, r3
 8002414:	4623      	mov	r3, r4
 8002416:	4628      	mov	r0, r5
 8002418:	4631      	mov	r1, r6
 800241a:	f7fd ff11 	bl	8000240 <__aeabi_uldivmod>
 800241e:	4603      	mov	r3, r0
 8002420:	460c      	mov	r4, r1
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	e007      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <HAL_RCC_GetSysClockFreq+0x16c>)
 800242a:	fb02 f203 	mul.w	r2, r2, r3
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002436:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800243a:	461a      	mov	r2, r3
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	4293      	cmp	r3, r2
 8002440:	d108      	bne.n	8002454 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	e004      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_RCC_GetSysClockFreq+0x170>)
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002458:	e002      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_GetSysClockFreq+0x174>)
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800245e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002462:	4618      	mov	r0, r3
 8002464:	3744      	adds	r7, #68	; 0x44
 8002466:	46bd      	mov	sp, r7
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246a:	bf00      	nop
 800246c:	08006ff0 	.word	0x08006ff0
 8002470:	08007000 	.word	0x08007000
 8002474:	40021000 	.word	0x40021000
 8002478:	017d7840 	.word	0x017d7840
 800247c:	003d0900 	.word	0x003d0900
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <HAL_RCC_GetHCLKFreq+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff2 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	0800715c 	.word	0x0800715c

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c4:	f7ff ffde 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024c8:	4601      	mov	r1, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	0800715c 	.word	0x0800715c

080024e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	220f      	movs	r2, #15
 80024f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_GetClockConfig+0x58>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_RCC_GetClockConfig+0x58>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_GetClockConfig+0x58>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_RCC_GetClockConfig+0x58>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_GetClockConfig+0x5c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40021000 	.word	0x40021000
 8002544:	40022000 	.word	0x40022000

08002548 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_NMI_IRQHandler+0x20>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d104      	bne.n	8002562 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002558:	f000 f828 	bl	80025ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_NMI_IRQHandler+0x24>)
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	701a      	strb	r2, [r3, #0]
  }
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	4002100a 	.word	0x4002100a

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07d      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	4b8b      	ldr	r3, [pc, #556]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a87      	ldr	r2, [pc, #540]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
 80025f4:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002600:	2301      	movs	r3, #1
 8002602:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d118      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002610:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7e      	ldr	r2, [pc, #504]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261c:	f7fe fcc8 	bl	8000fb0 <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	e008      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002624:	f7fe fcc4 	bl	8000fb0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0e5      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02e      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d027      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266a:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002676:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d014      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fc93 	bl	8000fb0 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fc8f 	bl	8000fb0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ae      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b0:	4b56      	ldr	r3, [pc, #344]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4953      	ldr	r1, [pc, #332]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c2:	7efb      	ldrb	r3, [r7, #27]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e0:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4947      	ldr	r1, [pc, #284]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4940      	ldr	r1, [pc, #256]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800270c:	4313      	orrs	r3, r2
 800270e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4938      	ldr	r1, [pc, #224]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800272a:	4313      	orrs	r3, r2
 800272c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d148      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d138      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e042      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4920      	ldr	r1, [pc, #128]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800278a:	4313      	orrs	r3, r2
 800278c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	491c      	ldr	r1, [pc, #112]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800279c:	4313      	orrs	r3, r2
 800279e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fc03 	bl	8000fb0 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ae:	f7fe fbff 	bl	8000fb0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e020      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80027cc:	e009      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d001      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00f      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
 8002814:	42420440 	.word	0x42420440
 8002818:	42420070 	.word	0x42420070

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e041      	b.n	80028b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f839 	bl	80028ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fb74 	bl	8002f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e03f      	b.n	8002964 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_Base_Start_IT+0xa4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d00e      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x62>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_TIM_Base_Start_IT+0xa8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_TIM_Base_Start_IT+0xac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x62>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_TIM_Base_Start_IT+0xb0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d010      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002950:	e007      	b.n	8002962 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400
 8002978:	40000800 	.word	0x40000800
 800297c:	40000c00 	.word	0x40000c00

08002980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f978 	bl	8000c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fac2 	bl	8002f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x24>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x58>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e063      	b.n	8002b5a <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x82>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x92>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xa2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fc2c 	bl	8003330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <HAL_TIM_PWM_Start+0x144>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_TIM_PWM_Start+0x144>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_TIM_PWM_Start+0x104>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d00e      	beq.n	8002b24 <HAL_TIM_PWM_Start+0x104>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_TIM_PWM_Start+0x148>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <HAL_TIM_PWM_Start+0x104>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <HAL_TIM_PWM_Start+0x14c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_TIM_PWM_Start+0x104>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_TIM_PWM_Start+0x150>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d010      	beq.n	8002b58 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b46:	e007      	b.n	8002b58 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9ab 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f99e 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f9ad 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f981 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f974 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f983 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f957 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f94a 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f959 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f92d 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f920 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f92f 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd ff48 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fb99 	bl	8003456 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8f3 	bl	8002f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fb64 	bl	8003444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0ac      	b.n	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	f200 809f 	bhi.w	8002eec <HAL_TIM_PWM_ConfigChannel+0x168>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002eed 	.word	0x08002eed
 8002dbc:	08002eed 	.word	0x08002eed
 8002dc0:	08002eed 	.word	0x08002eed
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08002eed 	.word	0x08002eed
 8002dcc:	08002eed 	.word	0x08002eed
 8002dd0:	08002eed 	.word	0x08002eed
 8002dd4:	08002e6b 	.word	0x08002e6b
 8002dd8:	08002eed 	.word	0x08002eed
 8002ddc:	08002eed 	.word	0x08002eed
 8002de0:	08002eed 	.word	0x08002eed
 8002de4:	08002eab 	.word	0x08002eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f916 	bl	8003020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0208 	orr.w	r2, r2, #8
 8002e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6999      	ldr	r1, [r3, #24]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]
      break;
 8002e26:	e062      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f95c 	bl	80030ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]
      break;
 8002e68:	e041      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f9a5 	bl	80031c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0208 	orr.w	r2, r2, #8
 8002e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0204 	bic.w	r2, r2, #4
 8002e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
      break;
 8002ea8:	e021      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f9ef 	bl	8003294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]
      break;
 8002eea:	e000      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <TIM_Base_SetConfig+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <TIM_Base_SetConfig+0xcc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0xd0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0x38>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a28      	ldr	r2, [pc, #160]	; (800301c <TIM_Base_SetConfig+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <TIM_Base_SetConfig+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x72>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x72>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <TIM_Base_SetConfig+0xcc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x72>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <TIM_Base_SetConfig+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x72>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <TIM_Base_SetConfig+0xd4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <TIM_Base_SetConfig+0xc8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	615a      	str	r2, [r3, #20]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00

08003020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 0302 	bic.w	r3, r3, #2
 8003068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <TIM_OC1_SetConfig+0xc8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10c      	bne.n	8003096 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0308 	bic.w	r3, r3, #8
 8003082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <TIM_OC1_SetConfig+0xc8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d111      	bne.n	80030c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	621a      	str	r2, [r3, #32]
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40012c00 	.word	0x40012c00

080030ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0210 	bic.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0320 	bic.w	r3, r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <TIM_OC2_SetConfig+0xd0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d10d      	bne.n	8003168 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <TIM_OC2_SetConfig+0xd0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d113      	bne.n	8003198 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00

080031c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <TIM_OC3_SetConfig+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10d      	bne.n	800323a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <TIM_OC3_SetConfig+0xd0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d113      	bne.n	800326a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40012c00 	.word	0x40012c00

08003294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	031b      	lsls	r3, r3, #12
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a0f      	ldr	r2, [pc, #60]	; (800332c <TIM_OC4_SetConfig+0x98>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00

08003330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e04b      	b.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d00e      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10c      	bne.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00

08003444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e03f      	b.n	80034fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fc66 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f905 	bl	80036bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d17c      	bne.n	800361c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit+0x2c>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e075      	b.n	800361e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit+0x3e>
 800353c:	2302      	movs	r3, #2
 800353e:	e06e      	b.n	800361e <HAL_UART_Transmit+0x11c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	; 0x21
 8003552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003556:	f7fd fd2b 	bl	8000fb0 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d108      	bne.n	8003584 <HAL_UART_Transmit+0x82>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e003      	b.n	800358c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003594:	e02a      	b.n	80035ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f840 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e036      	b.n	800361e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3302      	adds	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e007      	b.n	80035de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cf      	bne.n	8003596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f810 	bl	8003626 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e006      	b.n	800361e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	e02c      	b.n	8003692 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363e:	d028      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x30>
 8003646:	f7fd fcb3 	bl	8000fb0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	429a      	cmp	r2, r3
 8003654:	d21d      	bcs.n	8003692 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003664:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d0c3      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036f6:	f023 030c 	bic.w	r3, r3, #12
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	430b      	orrs	r3, r1
 8003702:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <UART_SetConfig+0x114>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe fecc 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	e002      	b.n	8003732 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe feb4 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003730:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <UART_SetConfig+0x118>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	0119      	lsls	r1, r3, #4
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f2f3 	udiv	r2, r2, r3
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <UART_SetConfig+0x118>)
 800376a:	fba3 0302 	umull	r0, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2064      	movs	r0, #100	; 0x64
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003788:	4419      	add	r1, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009a      	lsls	r2, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <UART_SetConfig+0x118>)
 80037a2:	fba3 0302 	umull	r0, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2064      	movs	r0, #100	; 0x64
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	3332      	adds	r3, #50	; 0x32
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <UART_SetConfig+0x118>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	440a      	add	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40013800 	.word	0x40013800
 80037d4:	51eb851f 	.word	0x51eb851f

080037d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037de:	f3ef 8305 	mrs	r3, IPSR
 80037e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	607b      	str	r3, [r7, #4]
  return(result);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <osKernelInitialize+0x32>
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <osKernelInitialize+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d109      	bne.n	8003812 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003802:	603b      	str	r3, [r7, #0]
  return(result);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800380a:	f06f 0305 	mvn.w	r3, #5
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <osKernelInitialize+0x60>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <osKernelInitialize+0x60>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e002      	b.n	800382c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800382a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	2000002c 	.word	0x2000002c

0800383c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003842:	f3ef 8305 	mrs	r3, IPSR
 8003846:	60bb      	str	r3, [r7, #8]
  return(result);
 8003848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	607b      	str	r3, [r7, #4]
  return(result);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <osKernelStart+0x32>
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <osKernelStart+0x64>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d109      	bne.n	8003876 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003862:	f3ef 8311 	mrs	r3, BASEPRI
 8003866:	603b      	str	r3, [r7, #0]
  return(result);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <osKernelStart+0x3a>
    stat = osErrorISR;
 800386e:	f06f 0305 	mvn.w	r3, #5
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e00e      	b.n	8003894 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <osKernelStart+0x64>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <osKernelStart+0x64>)
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003884:	f001 fe3e 	bl	8005504 <vTaskStartScheduler>
      stat = osOK;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e002      	b.n	8003894 <osKernelStart+0x58>
    } else {
      stat = osError;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000002c 	.word	0x2000002c

080038a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b092      	sub	sp, #72	; 0x48
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b4:	f3ef 8305 	mrs	r3, IPSR
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 8094 	bne.w	80039ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8310 	mrs	r3, PRIMASK
 80038c6:	623b      	str	r3, [r7, #32]
  return(result);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808d 	bne.w	80039ea <osThreadNew+0x146>
 80038d0:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <osThreadNew+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d106      	bne.n	80038e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038d8:	f3ef 8311 	mrs	r3, BASEPRI
 80038dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8082 	bne.w	80039ea <osThreadNew+0x146>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d07e      	beq.n	80039ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038f0:	2318      	movs	r3, #24
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038f4:	2300      	movs	r3, #0
 80038f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038f8:	f107 031b 	add.w	r3, r7, #27
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d045      	beq.n	8003996 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <osThreadNew+0x74>
        name = attr->name;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <osThreadNew+0x9a>
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b38      	cmp	r3, #56	; 0x38
 8003930:	d805      	bhi.n	800393e <osThreadNew+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <osThreadNew+0x9e>
        return (NULL);
 800393e:	2300      	movs	r3, #0
 8003940:	e054      	b.n	80039ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <osThreadNew+0xd4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b5b      	cmp	r3, #91	; 0x5b
 8003960:	d90a      	bls.n	8003978 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <osThreadNew+0xd4>
        mem = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
 8003976:	e010      	b.n	800399a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10c      	bne.n	800399a <osThreadNew+0xf6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d108      	bne.n	800399a <osThreadNew+0xf6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <osThreadNew+0xf6>
          mem = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
 8003994:	e001      	b.n	800399a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b01      	cmp	r3, #1
 800399e:	d110      	bne.n	80039c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a8:	9202      	str	r2, [sp, #8]
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f001 fbdc 	bl	8005174 <xTaskCreateStatic>
 80039bc:	4603      	mov	r3, r0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e013      	b.n	80039ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f001 fc23 	bl	8005226 <xTaskCreate>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <osThreadNew+0x146>
          hTask = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3738      	adds	r7, #56	; 0x38
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000002c 	.word	0x2000002c

080039f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a00:	f3ef 8305 	mrs	r3, IPSR
 8003a04:	613b      	str	r3, [r7, #16]
  return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10f      	bne.n	8003a2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <osDelay+0x34>
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <osDelay+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d109      	bne.n	8003a34 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a20:	f3ef 8311 	mrs	r3, BASEPRI
 8003a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <osDelay+0x3c>
    stat = osErrorISR;
 8003a2c:	f06f 0305 	mvn.w	r3, #5
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e007      	b.n	8003a44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 fd2c 	bl	800549c <vTaskDelay>
    }
  }

  return (stat);
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000002c 	.word	0x2000002c

08003a54 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a64:	f3ef 8305 	mrs	r3, IPSR
 8003a68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a6a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 8088 	bne.w	8003b82 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	617b      	str	r3, [r7, #20]
  return(result);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8081 	bne.w	8003b82 <osSemaphoreNew+0x12e>
 8003a80:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <osSemaphoreNew+0x138>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d105      	bne.n	8003a94 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a88:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d176      	bne.n	8003b82 <osSemaphoreNew+0x12e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d073      	beq.n	8003b82 <osSemaphoreNew+0x12e>
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d86f      	bhi.n	8003b82 <osSemaphoreNew+0x12e>
    mem = -1;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d015      	beq.n	8003ada <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <osSemaphoreNew+0x70>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b4f      	cmp	r3, #79	; 0x4f
 8003abc:	d902      	bls.n	8003ac4 <osSemaphoreNew+0x70>
        mem = 1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	e00c      	b.n	8003ade <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <osSemaphoreNew+0x8a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <osSemaphoreNew+0x8a>
          mem = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	e001      	b.n	8003ade <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae4:	d04d      	beq.n	8003b82 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d129      	bne.n	8003b40 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10b      	bne.n	8003b0a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	2303      	movs	r3, #3
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 fbb9 	bl	8004278 <xQueueGenericCreateStatic>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24
 8003b08:	e005      	b.n	8003b16 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f000 fc24 	bl	800435c <xQueueGenericCreate>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <osSemaphoreNew+0x10e>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01f      	beq.n	8003b62 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2a:	f000 fcdd 	bl	80044e8 <xQueueGenericSend>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d016      	beq.n	8003b62 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8003b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b36:	f001 f950 	bl	8004dda <vQueueDelete>
            hSemaphore = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e010      	b.n	8003b62 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fc64 	bl	800441c <xQueueCreateCountingSemaphoreStatic>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24
 8003b56:	e004      	b.n	8003b62 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc93 	bl	8004486 <xQueueCreateCountingSemaphore>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <osSemaphoreNew+0x122>
          name = attr->name;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	e001      	b.n	8003b7a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7e:	f001 fa75 	bl	800506c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2000002c 	.word	0x2000002c

08003b90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003ba8:	f06f 0303 	mvn.w	r3, #3
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e04b      	b.n	8003c48 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb0:	f3ef 8305 	mrs	r3, IPSR
 8003bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8003bb6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <osSemaphoreAcquire+0x4c>
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <osSemaphoreAcquire+0xc4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d128      	bne.n	8003c22 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8003bd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003be2:	f06f 0303 	mvn.w	r3, #3
 8003be6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003be8:	e02d      	b.n	8003c46 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	69b8      	ldr	r0, [r7, #24]
 8003bf8:	f001 f872 	bl	8004ce0 <xQueueReceiveFromISR>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d003      	beq.n	8003c0a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003c02:	f06f 0302 	mvn.w	r3, #2
 8003c06:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003c08:	e01d      	b.n	8003c46 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <osSemaphoreAcquire+0xb6>
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <osSemaphoreAcquire+0xc8>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003c20:	e011      	b.n	8003c46 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003c22:	6839      	ldr	r1, [r7, #0]
 8003c24:	69b8      	ldr	r0, [r7, #24]
 8003c26:	f000 ff53 	bl	8004ad0 <xQueueSemaphoreTake>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d00b      	beq.n	8003c48 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003c36:	f06f 0301 	mvn.w	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e004      	b.n	8003c48 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003c3e:	f06f 0302 	mvn.w	r3, #2
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	e000      	b.n	8003c48 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003c46:	bf00      	nop
      }
    }
  }

  return (stat);
 8003c48:	69fb      	ldr	r3, [r7, #28]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000002c 	.word	0x2000002c
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003c72:	f06f 0303 	mvn.w	r3, #3
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e03e      	b.n	8003cf8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7a:	f3ef 8305 	mrs	r3, IPSR
 8003c7e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c80:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c86:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <osSemaphoreRelease+0x4a>
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <osSemaphoreRelease+0xa8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d120      	bne.n	8003cdc <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4619      	mov	r1, r3
 8003cb0:	69b8      	ldr	r0, [r7, #24]
 8003cb2:	f000 fda7 	bl	8004804 <xQueueGiveFromISR>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d003      	beq.n	8003cc4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003cbc:	f06f 0302 	mvn.w	r3, #2
 8003cc0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003cc2:	e018      	b.n	8003cf6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <osSemaphoreRelease+0x9a>
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <osSemaphoreRelease+0xac>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003cda:	e00c      	b.n	8003cf6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	69b8      	ldr	r0, [r7, #24]
 8003ce4:	f000 fc00 	bl	80044e8 <xQueueGenericSend>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d004      	beq.n	8003cf8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003cee:	f06f 0302 	mvn.w	r3, #2
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e000      	b.n	8003cf8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003cf6:	bf00      	nop
    }
  }

  return (stat);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000002c 	.word	0x2000002c
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	; 0x30
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1c:	f3ef 8305 	mrs	r3, IPSR
 8003d20:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d22:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d170      	bne.n	8003e0a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d28:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d16a      	bne.n	8003e0a <osMessageQueueNew+0xfe>
 8003d34:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <osMessageQueueNew+0x108>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d105      	bne.n	8003d48 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d40:	613b      	str	r3, [r7, #16]
  return(result);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d160      	bne.n	8003e0a <osMessageQueueNew+0xfe>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d05d      	beq.n	8003e0a <osMessageQueueNew+0xfe>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05a      	beq.n	8003e0a <osMessageQueueNew+0xfe>
    mem = -1;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d029      	beq.n	8003db4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <osMessageQueueNew+0x82>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b4f      	cmp	r3, #79	; 0x4f
 8003d6e:	d90e      	bls.n	8003d8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d302      	bcc.n	8003d8e <osMessageQueueNew+0x82>
        mem = 1;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	e014      	b.n	8003db8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d110      	bne.n	8003db8 <osMessageQueueNew+0xac>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <osMessageQueueNew+0xac>
          mem = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	e001      	b.n	8003db8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10c      	bne.n	8003dd8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6899      	ldr	r1, [r3, #8]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa52 	bl	8004278 <xQueueGenericCreateStatic>
 8003dd4:	6278      	str	r0, [r7, #36]	; 0x24
 8003dd6:	e008      	b.n	8003dea <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003dde:	2200      	movs	r2, #0
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 faba 	bl	800435c <xQueueGenericCreate>
 8003de8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <osMessageQueueNew+0xf2>
        name = attr->name;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e001      	b.n	8003e02 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e02:	69f9      	ldr	r1, [r7, #28]
 8003e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e06:	f001 f931 	bl	800506c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	2000002c 	.word	0x2000002c

08003e18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e30:	f3ef 8305 	mrs	r3, IPSR
 8003e34:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e36:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <osMessageQueuePut+0x44>
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <osMessageQueuePut+0xe0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d12e      	bne.n	8003eae <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e50:	f3ef 8311 	mrs	r3, BASEPRI
 8003e54:	617b      	str	r3, [r7, #20]
  return(result);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d028      	beq.n	8003eae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <osMessageQueuePut+0x56>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <osMessageQueuePut+0x56>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003e6e:	f06f 0303 	mvn.w	r3, #3
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e74:	e039      	b.n	8003eea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e7a:	f107 0210 	add.w	r2, r7, #16
 8003e7e:	2300      	movs	r3, #0
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	6a38      	ldr	r0, [r7, #32]
 8003e84:	f000 fc2a 	bl	80046dc <xQueueGenericSendFromISR>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d003      	beq.n	8003e96 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003e8e:	f06f 0302 	mvn.w	r3, #2
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e94:	e029      	b.n	8003eea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d026      	beq.n	8003eea <osMessageQueuePut+0xd2>
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <osMessageQueuePut+0xe4>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eac:	e01d      	b.n	8003eea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <osMessageQueuePut+0xa2>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003eba:	f06f 0303 	mvn.w	r3, #3
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e014      	b.n	8003eec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	6a38      	ldr	r0, [r7, #32]
 8003eca:	f000 fb0d 	bl	80044e8 <xQueueGenericSend>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d00b      	beq.n	8003eec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003eda:	f06f 0301 	mvn.w	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee0:	e004      	b.n	8003eec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003ee2:	f06f 0302 	mvn.w	r3, #2
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee8:	e000      	b.n	8003eec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3728      	adds	r7, #40	; 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000002c 	.word	0x2000002c
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f16:	f3ef 8305 	mrs	r3, IPSR
 8003f1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <osMessageQueueGet+0x42>
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <osMessageQueueGet+0xdc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d12e      	bne.n	8003f94 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f36:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d028      	beq.n	8003f94 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <osMessageQueueGet+0x54>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <osMessageQueueGet+0x54>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003f54:	f06f 0303 	mvn.w	r3, #3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f5a:	e038      	b.n	8003fce <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	461a      	mov	r2, r3
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	6a38      	ldr	r0, [r7, #32]
 8003f6a:	f000 feb9 	bl	8004ce0 <xQueueReceiveFromISR>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d003      	beq.n	8003f7c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003f74:	f06f 0302 	mvn.w	r3, #2
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f7a:	e028      	b.n	8003fce <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d025      	beq.n	8003fce <osMessageQueueGet+0xce>
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <osMessageQueueGet+0xe0>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f92:	e01c      	b.n	8003fce <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <osMessageQueueGet+0xa0>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003fa0:	f06f 0303 	mvn.w	r3, #3
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	e013      	b.n	8003fd0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	6a38      	ldr	r0, [r7, #32]
 8003fae:	f000 fcb3 	bl	8004918 <xQueueReceive>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d00b      	beq.n	8003fd0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003fbe:	f06f 0301 	mvn.w	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	e004      	b.n	8003fd0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003fc6:	f06f 0302 	mvn.w	r3, #2
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	e000      	b.n	8003fd0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	; 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000002c 	.word	0x2000002c
 8003fe0:	e000ed04 	.word	0xe000ed04

08003fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a06      	ldr	r2, [pc, #24]	; (800400c <vApplicationGetIdleTaskMemory+0x28>)
 8003ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4a05      	ldr	r2, [pc, #20]	; (8004010 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	20000030 	.word	0x20000030
 8004010:	2000008c 	.word	0x2000008c

08004014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <vApplicationGetTimerTaskMemory+0x2c>)
 8004024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4a06      	ldr	r2, [pc, #24]	; (8004044 <vApplicationGetTimerTaskMemory+0x30>)
 800402a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2000028c 	.word	0x2000028c
 8004044:	200002e8 	.word	0x200002e8

08004048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f103 0208 	add.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f103 0208 	add.w	r2, r3, #8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f103 0208 	add.w	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040fa:	d103      	bne.n	8004104 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e00c      	b.n	800411e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3308      	adds	r3, #8
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e002      	b.n	8004112 <vListInsert+0x2e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d2f6      	bcs.n	800410c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6892      	ldr	r2, [r2, #8]
 800416a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6852      	ldr	r2, [r2, #4]
 8004174:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d103      	bne.n	8004188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1e5a      	subs	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
	...

080041a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	e7fe      	b.n	80041ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80041d0:	f002 fbb2 	bl	8006938 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	3b01      	subs	r3, #1
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	441a      	add	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	22ff      	movs	r2, #255	; 0xff
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d114      	bne.n	8004250 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3310      	adds	r3, #16
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fbea 	bl	8005a0c <xTaskRemoveFromEventList>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <xQueueGenericReset+0xcc>)
 8004240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	e009      	b.n	8004264 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3310      	adds	r3, #16
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fef7 	bl	8004048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fef2 	bl	8004048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004264:	f002 fb96 	bl	8006994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004268:	2301      	movs	r3, #1
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <xQueueGenericCreateStatic+0x28>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	e7fe      	b.n	800429e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <xQueueGenericCreateStatic+0x42>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	e7fe      	b.n	80042b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <xQueueGenericCreateStatic+0x4e>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <xQueueGenericCreateStatic+0x52>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericCreateStatic+0x54>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <xQueueGenericCreateStatic+0x6c>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	e7fe      	b.n	80042e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <xQueueGenericCreateStatic+0x78>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <xQueueGenericCreateStatic+0x7c>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <xQueueGenericCreateStatic+0x7e>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <xQueueGenericCreateStatic+0x96>
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e7fe      	b.n	800430c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800430e:	2350      	movs	r3, #80	; 0x50
 8004310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d009      	beq.n	800432c <xQueueGenericCreateStatic+0xb4>
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	e7fe      	b.n	800432a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800433e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f842 	bl	80043d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004354:	4618      	mov	r0, r3
 8004356:	3730      	adds	r7, #48	; 0x30
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xQueueGenericCreate+0x28>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e7fe      	b.n	8004382 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e004      	b.n	800439a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3350      	adds	r3, #80	; 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 fbc0 	bl	8006b24 <pvPortMalloc>
 80043a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	3350      	adds	r3, #80	; 0x50
 80043b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ba:	79fa      	ldrb	r2, [r7, #7]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f805 	bl	80043d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043cc:	69bb      	ldr	r3, [r7, #24]
	}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004404:	2101      	movs	r1, #1
 8004406:	69b8      	ldr	r0, [r7, #24]
 8004408:	f7ff fece 	bl	80041a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <xQueueCreateCountingSemaphoreStatic+0x26>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e7fe      	b.n	8004440 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	429a      	cmp	r2, r3
 8004448:	d909      	bls.n	800445e <xQueueCreateCountingSemaphoreStatic+0x42>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e7fe      	b.n	800445c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800445e:	2302      	movs	r3, #2
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	2100      	movs	r1, #0
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff ff05 	bl	8004278 <xQueueGenericCreateStatic>
 800446e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800447c:	69fb      	ldr	r3, [r7, #28]
	}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <xQueueCreateCountingSemaphore+0x24>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e7fe      	b.n	80044a8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d909      	bls.n	80044c6 <xQueueCreateCountingSemaphore+0x40>
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e7fe      	b.n	80044c4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80044c6:	2202      	movs	r2, #2
 80044c8:	2100      	movs	r1, #0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff46 	bl	800435c <xQueueGenericCreate>
 80044d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80044de:	697b      	ldr	r3, [r7, #20]
	}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08e      	sub	sp, #56	; 0x38
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <xQueueGenericSend+0x30>
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	e7fe      	b.n	8004516 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <xQueueGenericSend+0x3e>
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <xQueueGenericSend+0x42>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueGenericSend+0x44>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <xQueueGenericSend+0x5c>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	e7fe      	b.n	8004542 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d103      	bne.n	8004552 <xQueueGenericSend+0x6a>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <xQueueGenericSend+0x6e>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <xQueueGenericSend+0x70>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <xQueueGenericSend+0x88>
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	e7fe      	b.n	800456e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004570:	f001 fc06 	bl	8005d80 <xTaskGetSchedulerState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <xQueueGenericSend+0x98>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <xQueueGenericSend+0x9c>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <xQueueGenericSend+0x9e>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <xQueueGenericSend+0xb6>
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	e7fe      	b.n	800459c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800459e:	f002 f9cb 	bl	8006938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <xQueueGenericSend+0xcc>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d129      	bne.n	8004608 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ba:	f000 fc47 	bl	8004e4c <prvCopyDataToQueue>
 80045be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 fa1d 	bl	8005a0c <xTaskRemoveFromEventList>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045d8:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <xQueueGenericSend+0x1f0>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	e00a      	b.n	8004600 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <xQueueGenericSend+0x1f0>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004600:	f002 f9c8 	bl	8006994 <vPortExitCritical>
				return pdPASS;
 8004604:	2301      	movs	r3, #1
 8004606:	e063      	b.n	80046d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800460e:	f002 f9c1 	bl	8006994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004612:	2300      	movs	r3, #0
 8004614:	e05c      	b.n	80046d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fa55 	bl	8005ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004626:	2301      	movs	r3, #1
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800462a:	f002 f9b3 	bl	8006994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800462e:	f000 ffcd 	bl	80055cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004632:	f002 f981 	bl	8006938 <vPortEnterCritical>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463c:	b25b      	sxtb	r3, r3
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004642:	d103      	bne.n	800464c <xQueueGenericSend+0x164>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004652:	b25b      	sxtb	r3, r3
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004658:	d103      	bne.n	8004662 <xQueueGenericSend+0x17a>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004662:	f002 f997 	bl	8006994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004666:	1d3a      	adds	r2, r7, #4
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fa44 	bl	8005afc <xTaskCheckForTimeOut>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d124      	bne.n	80046c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800467a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467c:	f000 fcde 	bl	800503c <prvIsQueueFull>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	3310      	adds	r3, #16
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f001 f96e 	bl	8005970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004696:	f000 fc69 	bl	8004f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800469a:	f000 ffa5 	bl	80055e8 <xTaskResumeAll>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f af7c 	bne.w	800459e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <xQueueGenericSend+0x1f0>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	e772      	b.n	800459e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ba:	f000 fc57 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046be:	f000 ff93 	bl	80055e8 <xTaskResumeAll>
 80046c2:	e76c      	b.n	800459e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c6:	f000 fc51 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ca:	f000 ff8d 	bl	80055e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046ce:	2300      	movs	r3, #0
		}
	}
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3738      	adds	r7, #56	; 0x38
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	; 0x38
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <xQueueGenericSendFromISR+0x2c>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	e7fe      	b.n	8004706 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <xQueueGenericSendFromISR+0x3a>
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <xQueueGenericSendFromISR+0x3e>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueGenericSendFromISR+0x40>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <xQueueGenericSendFromISR+0x58>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	e7fe      	b.n	8004732 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d103      	bne.n	8004742 <xQueueGenericSendFromISR+0x66>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <xQueueGenericSendFromISR+0x6a>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericSendFromISR+0x6c>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <xQueueGenericSendFromISR+0x84>
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e7fe      	b.n	800475e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004760:	f002 f9a4 	bl	8006aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004764:	f3ef 8211 	mrs	r2, BASEPRI
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	61ba      	str	r2, [r7, #24]
 800477a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800477c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <xQueueGenericSendFromISR+0xb6>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d12c      	bne.n	80047ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a2:	f000 fb53 	bl	8004e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ae:	d112      	bne.n	80047d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	3324      	adds	r3, #36	; 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f925 	bl	8005a0c <xTaskRemoveFromEventList>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e007      	b.n	80047e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047da:	3301      	adds	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	b25a      	sxtb	r2, r3
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047e6:	2301      	movs	r3, #1
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047ea:	e001      	b.n	80047f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3738      	adds	r7, #56	; 0x38
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <xQueueGiveFromISR+0x28>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	e7fe      	b.n	800482a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <xQueueGiveFromISR+0x44>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e7fe      	b.n	8004846 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueGiveFromISR+0x54>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueGiveFromISR+0x58>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueGiveFromISR+0x5a>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <xQueueGiveFromISR+0x72>
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	e7fe      	b.n	8004874 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004876:	f002 f919 	bl	8006aac <vPortValidateInterruptPriority>
	__asm volatile
 800487a:	f3ef 8211 	mrs	r2, BASEPRI
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617a      	str	r2, [r7, #20]
 8004890:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004892:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d22b      	bcs.n	80048fe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d112      	bne.n	80048e8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	3324      	adds	r3, #36	; 0x24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f89c 	bl	8005a0c <xTaskRemoveFromEventList>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	b25a      	sxtb	r2, r3
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	e001      	b.n	8004902 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800490e:	4618      	mov	r0, r3
 8004910:	3738      	adds	r7, #56	; 0x38
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <xQueueReceive+0x2e>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	e7fe      	b.n	8004944 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <xQueueReceive+0x3c>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <xQueueReceive+0x40>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <xQueueReceive+0x42>
 8004958:	2300      	movs	r3, #0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <xQueueReceive+0x5a>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e7fe      	b.n	8004970 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004972:	f001 fa05 	bl	8005d80 <xTaskGetSchedulerState>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xQueueReceive+0x6a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueReceive+0x6e>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueReceive+0x70>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xQueueReceive+0x88>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e7fe      	b.n	800499e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a0:	f001 ffca 	bl	8006938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01f      	beq.n	80049f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b4:	f000 fab4 	bl	8004f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1e5a      	subs	r2, r3, #1
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00f      	beq.n	80049e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	3310      	adds	r3, #16
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 f81d 	bl	8005a0c <xTaskRemoveFromEventList>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <xQueueReceive+0x1b4>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049e8:	f001 ffd4 	bl	8006994 <vPortExitCritical>
				return pdPASS;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e069      	b.n	8004ac4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f6:	f001 ffcd 	bl	8006994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e062      	b.n	8004ac4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f861 	bl	8005ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a12:	f001 ffbf 	bl	8006994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a16:	f000 fdd9 	bl	80055cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1a:	f001 ff8d 	bl	8006938 <vPortEnterCritical>
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2a:	d103      	bne.n	8004a34 <xQueueReceive+0x11c>
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3a:	b25b      	sxtb	r3, r3
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a40:	d103      	bne.n	8004a4a <xQueueReceive+0x132>
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a4a:	f001 ffa3 	bl	8006994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4e:	1d3a      	adds	r2, r7, #4
 8004a50:	f107 0310 	add.w	r3, r7, #16
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 f850 	bl	8005afc <xTaskCheckForTimeOut>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d123      	bne.n	8004aaa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a64:	f000 fad4 	bl	8005010 <prvIsQueueEmpty>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d017      	beq.n	8004a9e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	3324      	adds	r3, #36	; 0x24
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ff7a 	bl	8005970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7e:	f000 fa75 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a82:	f000 fdb1 	bl	80055e8 <xTaskResumeAll>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d189      	bne.n	80049a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <xQueueReceive+0x1b4>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	e780      	b.n	80049a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa0:	f000 fa64 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa4:	f000 fda0 	bl	80055e8 <xTaskResumeAll>
 8004aa8:	e77a      	b.n	80049a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	f000 fa5e 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab0:	f000 fd9a 	bl	80055e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab6:	f000 faab 	bl	8005010 <prvIsQueueEmpty>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f43f af6f 	beq.w	80049a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ac2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3730      	adds	r7, #48	; 0x30
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <xQueueSemaphoreTake+0x30>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e7fe      	b.n	8004afe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <xQueueSemaphoreTake+0x4c>
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e7fe      	b.n	8004b1a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b1c:	f001 f930 	bl	8005d80 <xTaskGetSchedulerState>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <xQueueSemaphoreTake+0x5c>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <xQueueSemaphoreTake+0x60>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <xQueueSemaphoreTake+0x62>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <xQueueSemaphoreTake+0x7a>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e7fe      	b.n	8004b48 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4a:	f001 fef5 	bl	8006938 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d024      	beq.n	8004ba4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	1e5a      	subs	r2, r3, #1
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b6a:	f001 fa85 	bl	8006078 <pvTaskIncrementMutexHeldCount>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00f      	beq.n	8004b9c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	3310      	adds	r3, #16
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 ff43 	bl	8005a0c <xTaskRemoveFromEventList>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <xQueueSemaphoreTake+0x20c>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b9c:	f001 fefa 	bl	8006994 <vPortExitCritical>
				return pdPASS;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e096      	b.n	8004cd2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d110      	bne.n	8004bcc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <xQueueSemaphoreTake+0xf4>
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e7fe      	b.n	8004bc2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bc4:	f001 fee6 	bl	8006994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e082      	b.n	8004cd2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ff7a 	bl	8005ad0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be0:	f001 fed8 	bl	8006994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be4:	f000 fcf2 	bl	80055cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be8:	f001 fea6 	bl	8006938 <vPortEnterCritical>
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf8:	d103      	bne.n	8004c02 <xQueueSemaphoreTake+0x132>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0e:	d103      	bne.n	8004c18 <xQueueSemaphoreTake+0x148>
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c18:	f001 febc 	bl	8006994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 ff69 	bl	8005afc <xTaskCheckForTimeOut>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d132      	bne.n	8004c96 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c32:	f000 f9ed 	bl	8005010 <prvIsQueueEmpty>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d026      	beq.n	8004c8a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004c44:	f001 fe78 	bl	8006938 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 f8b5 	bl	8005dbc <xTaskPriorityInherit>
 8004c52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c54:	f001 fe9e 	bl	8006994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	3324      	adds	r3, #36	; 0x24
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fe85 	bl	8005970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c68:	f000 f980 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c6c:	f000 fcbc 	bl	80055e8 <xTaskResumeAll>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f47f af69 	bne.w	8004b4a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <xQueueSemaphoreTake+0x20c>)
 8004c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	e75f      	b.n	8004b4a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c8c:	f000 f96e 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c90:	f000 fcaa 	bl	80055e8 <xTaskResumeAll>
 8004c94:	e759      	b.n	8004b4a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c98:	f000 f968 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c9c:	f000 fca4 	bl	80055e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ca2:	f000 f9b5 	bl	8005010 <prvIsQueueEmpty>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f43f af4e 	beq.w	8004b4a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004cb4:	f001 fe40 	bl	8006938 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cba:	f000 f8b0 	bl	8004e1e <prvGetDisinheritPriorityAfterTimeout>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 f952 	bl	8005f70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ccc:	f001 fe62 	bl	8006994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3738      	adds	r7, #56	; 0x38
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08e      	sub	sp, #56	; 0x38
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <xQueueReceiveFromISR+0x2a>
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	e7fe      	b.n	8004d08 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <xQueueReceiveFromISR+0x38>
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <xQueueReceiveFromISR+0x3c>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <xQueueReceiveFromISR+0x3e>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <xQueueReceiveFromISR+0x56>
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e7fe      	b.n	8004d34 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d36:	f001 feb9 	bl	8006aac <vPortValidateInterruptPriority>
	__asm volatile
 8004d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02f      	beq.n	8004dc2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d70:	f000 f8d6 	bl	8004f20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d84:	d112      	bne.n	8004dac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	3310      	adds	r3, #16
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fe3a 	bl	8005a0c <xTaskRemoveFromEventList>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00e      	beq.n	8004dbc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e007      	b.n	8004dbc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004db0:	3301      	adds	r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	b25a      	sxtb	r2, r3
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc0:	e001      	b.n	8004dc6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3738      	adds	r7, #56	; 0x38
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <vQueueDelete+0x26>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	e7fe      	b.n	8004dfe <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f95b 	bl	80050bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f001 ff49 	bl	8006ca8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e001      	b.n	8004e40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e40:	68fb      	ldr	r3, [r7, #12]
	}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14d      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f80e 	bl	8005e98 <xTaskPriorityDisinherit>
 8004e7c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	e043      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d119      	bne.n	8004ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6898      	ldr	r0, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	461a      	mov	r2, r3
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	f002 f83c 	bl	8006f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d32b      	bcc.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	e026      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68d8      	ldr	r0, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	f002 f822 	bl	8006f14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	425b      	negs	r3, r3
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d105      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	441a      	add	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d303      	bcc.n	8004f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68d9      	ldr	r1, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	f001 ffd8 	bl	8006f14 <memcpy>
	}
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f74:	f001 fce0 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f80:	e011      	b.n	8004fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fd3c 	bl	8005a0c <xTaskRemoveFromEventList>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f9a:	f000 fe0f 	bl	8005bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dce9      	bgt.n	8004f82 <prvUnlockQueue+0x16>
 8004fae:	e000      	b.n	8004fb2 <prvUnlockQueue+0x46>
					break;
 8004fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fceb 	bl	8006994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fbe:	f001 fcbb 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fca:	e011      	b.n	8004ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fd17 	bl	8005a0c <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fe4:	f000 fdea 	bl	8005bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dce9      	bgt.n	8004fcc <prvUnlockQueue+0x60>
 8004ff8:	e000      	b.n	8004ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	22ff      	movs	r2, #255	; 0xff
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005004:	f001 fcc6 	bl	8006994 <vPortExitCritical>
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005018:	f001 fc8e 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e001      	b.n	800502e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fcb1 	bl	8006994 <vPortExitCritical>

	return xReturn;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005044:	f001 fc78 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	429a      	cmp	r2, r3
 8005052:	d102      	bne.n	800505a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f001 fc99 	bl	8006994 <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e014      	b.n	80050a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800507c:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <vQueueAddToRegistry+0x4c>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005088:	490b      	ldr	r1, [pc, #44]	; (80050b8 <vQueueAddToRegistry+0x4c>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <vQueueAddToRegistry+0x4c>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800509e:	e005      	b.n	80050ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b07      	cmp	r3, #7
 80050aa:	d9e7      	bls.n	800507c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20003480 	.word	0x20003480

080050bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e016      	b.n	80050f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050ca:	4a0f      	ldr	r2, [pc, #60]	; (8005108 <vQueueUnregisterQueue+0x4c>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d10b      	bne.n	80050f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80050da:	4a0b      	ldr	r2, [pc, #44]	; (8005108 <vQueueUnregisterQueue+0x4c>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2100      	movs	r1, #0
 80050e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <vQueueUnregisterQueue+0x4c>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
				break;
 80050f0:	e005      	b.n	80050fe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b07      	cmp	r3, #7
 80050fc:	d9e5      	bls.n	80050ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	20003480 	.word	0x20003480

0800510c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800511c:	f001 fc0c 	bl	8006938 <vPortEnterCritical>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005126:	b25b      	sxtb	r3, r3
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512c:	d103      	bne.n	8005136 <vQueueWaitForMessageRestricted+0x2a>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513c:	b25b      	sxtb	r3, r3
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005142:	d103      	bne.n	800514c <vQueueWaitForMessageRestricted+0x40>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514c:	f001 fc22 	bl	8006994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3324      	adds	r3, #36	; 0x24
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fc29 	bl	80059b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f7ff ff00 	bl	8004f6c <prvUnlockQueue>
	}
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08e      	sub	sp, #56	; 0x38
 8005178:	af04      	add	r7, sp, #16
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <xTaskCreateStatic+0x28>
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	e7fe      	b.n	800519a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <xTaskCreateStatic+0x42>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e7fe      	b.n	80051b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051b6:	235c      	movs	r3, #92	; 0x5c
 80051b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b5c      	cmp	r3, #92	; 0x5c
 80051be:	d009      	beq.n	80051d4 <xTaskCreateStatic+0x60>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e7fe      	b.n	80051d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01e      	beq.n	8005218 <xTaskCreateStatic+0xa4>
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051f2:	2300      	movs	r3, #0
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	9302      	str	r3, [sp, #8]
 80051fa:	f107 0314 	add.w	r3, r7, #20
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f850 	bl	80052b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005212:	f000 f8d3 	bl	80053bc <prvAddNewTaskToReadyList>
 8005216:	e001      	b.n	800521c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800521c:	697b      	ldr	r3, [r7, #20]
	}
 800521e:	4618      	mov	r0, r3
 8005220:	3728      	adds	r7, #40	; 0x28
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005226:	b580      	push	{r7, lr}
 8005228:	b08c      	sub	sp, #48	; 0x30
 800522a:	af04      	add	r7, sp, #16
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fc72 	bl	8006b24 <pvPortMalloc>
 8005240:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005248:	205c      	movs	r0, #92	; 0x5c
 800524a:	f001 fc6b 	bl	8006b24 <pvPortMalloc>
 800524e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
 800525c:	e005      	b.n	800526a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f001 fd22 	bl	8006ca8 <vPortFree>
 8005264:	e001      	b.n	800526a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d017      	beq.n	80052a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	2300      	movs	r3, #0
 800527c:	9303      	str	r3, [sp, #12]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f80e 	bl	80052b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005294:	69f8      	ldr	r0, [r7, #28]
 8005296:	f000 f891 	bl	80053bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800529a:	2301      	movs	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e002      	b.n	80052a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052a6:	69bb      	ldr	r3, [r7, #24]
	}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	461a      	mov	r2, r3
 80052c8:	21a5      	movs	r1, #165	; 0xa5
 80052ca:	f001 fe2e 	bl	8006f2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d8:	3b01      	subs	r3, #1
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <prvInitialiseNewTask+0x56>
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e7fe      	b.n	8005304 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	e012      	b.n	8005332 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	7819      	ldrb	r1, [r3, #0]
 8005314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	3334      	adds	r3, #52	; 0x34
 800531c:	460a      	mov	r2, r1
 800531e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d9e9      	bls.n	800530c <prvInitialiseNewTask+0x5c>
 8005338:	e000      	b.n	800533c <prvInitialiseNewTask+0x8c>
		{
			break;
 800533a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b37      	cmp	r3, #55	; 0x37
 8005348:	d901      	bls.n	800534e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800534a:	2337      	movs	r3, #55	; 0x37
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3304      	adds	r3, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fe8e 	bl	8004086 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	3318      	adds	r3, #24
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fe89 	bl	8004086 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005378:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005388:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	69b8      	ldr	r0, [r7, #24]
 800539e:	f001 f9dd 	bl	800675c <pxPortInitialiseStack>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b4:	bf00      	nop
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c4:	f001 fab8 	bl	8006938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <prvAddNewTaskToReadyList+0xc4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <prvAddNewTaskToReadyList+0xc4>)
 80053d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053d2:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <prvAddNewTaskToReadyList+0xc8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053da:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <prvAddNewTaskToReadyList+0xc8>)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <prvAddNewTaskToReadyList+0xc4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d110      	bne.n	800540a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e8:	f000 fc0c 	bl	8005c04 <prvInitialiseTaskLists>
 80053ec:	e00d      	b.n	800540a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ee:	4b26      	ldr	r3, [pc, #152]	; (8005488 <prvAddNewTaskToReadyList+0xcc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053f6:	4b23      	ldr	r3, [pc, #140]	; (8005484 <prvAddNewTaskToReadyList+0xc8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d802      	bhi.n	800540a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005404:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <prvAddNewTaskToReadyList+0xc8>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <prvAddNewTaskToReadyList+0xd0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <prvAddNewTaskToReadyList+0xd0>)
 8005412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <prvAddNewTaskToReadyList+0xd0>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <prvAddNewTaskToReadyList+0xd4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d903      	bls.n	8005430 <prvAddNewTaskToReadyList+0x74>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <prvAddNewTaskToReadyList+0xd4>)
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <prvAddNewTaskToReadyList+0xd8>)
 800543e:	441a      	add	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f7fe fe29 	bl	800409e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800544c:	f001 faa2 	bl	8006994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <prvAddNewTaskToReadyList+0xcc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <prvAddNewTaskToReadyList+0xc8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	429a      	cmp	r2, r3
 8005464:	d207      	bcs.n	8005476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvAddNewTaskToReadyList+0xdc>)
 8005468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000bbc 	.word	0x20000bbc
 8005484:	200006e8 	.word	0x200006e8
 8005488:	20000bc8 	.word	0x20000bc8
 800548c:	20000bd8 	.word	0x20000bd8
 8005490:	20000bc4 	.word	0x20000bc4
 8005494:	200006ec 	.word	0x200006ec
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <vTaskDelay+0x60>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <vTaskDelay+0x2e>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	e7fe      	b.n	80054c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054ca:	f000 f87f 	bl	80055cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ce:	2100      	movs	r1, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fde5 	bl	80060a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054d6:	f000 f887 	bl	80055e8 <xTaskResumeAll>
 80054da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vTaskDelay+0x64>)
 80054e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000be4 	.word	0x20000be4
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005512:	463a      	mov	r2, r7
 8005514:	1d39      	adds	r1, r7, #4
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fd62 	bl	8003fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	9202      	str	r2, [sp, #8]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	2300      	movs	r3, #0
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	460a      	mov	r2, r1
 8005532:	4920      	ldr	r1, [pc, #128]	; (80055b4 <vTaskStartScheduler+0xb0>)
 8005534:	4820      	ldr	r0, [pc, #128]	; (80055b8 <vTaskStartScheduler+0xb4>)
 8005536:	f7ff fe1d 	bl	8005174 <xTaskCreateStatic>
 800553a:	4602      	mov	r2, r0
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <vTaskStartScheduler+0xb8>)
 800553e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <vTaskStartScheduler+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005548:	2301      	movs	r3, #1
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e001      	b.n	8005552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d102      	bne.n	800555e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005558:	f000 fdf6 	bl	8006148 <xTimerCreateTimerTask>
 800555c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d115      	bne.n	8005590 <vTaskStartScheduler+0x8c>
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <vTaskStartScheduler+0xbc>)
 8005578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800557c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <vTaskStartScheduler+0xc0>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005584:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <vTaskStartScheduler+0xc4>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800558a:	f001 f965 	bl	8006858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800558e:	e00d      	b.n	80055ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005596:	d109      	bne.n	80055ac <vTaskStartScheduler+0xa8>
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e7fe      	b.n	80055aa <vTaskStartScheduler+0xa6>
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	08007010 	.word	0x08007010
 80055b8:	08005bd5 	.word	0x08005bd5
 80055bc:	20000be0 	.word	0x20000be0
 80055c0:	20000bdc 	.word	0x20000bdc
 80055c4:	20000bc8 	.word	0x20000bc8
 80055c8:	20000bc0 	.word	0x20000bc0

080055cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <vTaskSuspendAll+0x18>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <vTaskSuspendAll+0x18>)
 80055d8:	6013      	str	r3, [r2, #0]
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000be4 	.word	0x20000be4

080055e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <xTaskResumeAll+0x114>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <xTaskResumeAll+0x2a>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7fe      	b.n	8005610 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005612:	f001 f991 	bl	8006938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <xTaskResumeAll+0x114>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a37      	ldr	r2, [pc, #220]	; (80056fc <xTaskResumeAll+0x114>)
 800561e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <xTaskResumeAll+0x114>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d162      	bne.n	80056ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005628:	4b35      	ldr	r3, [pc, #212]	; (8005700 <xTaskResumeAll+0x118>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d05e      	beq.n	80056ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005630:	e02f      	b.n	8005692 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005632:	4b34      	ldr	r3, [pc, #208]	; (8005704 <xTaskResumeAll+0x11c>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3318      	adds	r3, #24
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fd88 	bl	8004154 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fd83 	bl	8004154 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <xTaskResumeAll+0x120>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <xTaskResumeAll+0x7a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <xTaskResumeAll+0x120>)
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a27      	ldr	r2, [pc, #156]	; (800570c <xTaskResumeAll+0x124>)
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7fe fd10 	bl	800409e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <xTaskResumeAll+0x128>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800568c:	4b21      	ldr	r3, [pc, #132]	; (8005714 <xTaskResumeAll+0x12c>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <xTaskResumeAll+0x11c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1cb      	bne.n	8005632 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056a0:	f000 fb4a 	bl	8005d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056a4:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <xTaskResumeAll+0x130>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056b0:	f000 f844 	bl	800573c <xTaskIncrementTick>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <xTaskResumeAll+0x12c>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f1      	bne.n	80056b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056cc:	4b12      	ldr	r3, [pc, #72]	; (8005718 <xTaskResumeAll+0x130>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <xTaskResumeAll+0x12c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <xTaskResumeAll+0x134>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ee:	f001 f951 	bl	8006994 <vPortExitCritical>

	return xAlreadyYielded;
 80056f2:	68bb      	ldr	r3, [r7, #8]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000be4 	.word	0x20000be4
 8005700:	20000bbc 	.word	0x20000bbc
 8005704:	20000b7c 	.word	0x20000b7c
 8005708:	20000bc4 	.word	0x20000bc4
 800570c:	200006ec 	.word	0x200006ec
 8005710:	200006e8 	.word	0x200006e8
 8005714:	20000bd0 	.word	0x20000bd0
 8005718:	20000bcc 	.word	0x20000bcc
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <xTaskGetTickCount+0x18>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800572c:	687b      	ldr	r3, [r7, #4]
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	20000bc0 	.word	0x20000bc0

0800573c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005746:	4b51      	ldr	r3, [pc, #324]	; (800588c <xTaskIncrementTick+0x150>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 808d 	bne.w	800586a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005750:	4b4f      	ldr	r3, [pc, #316]	; (8005890 <xTaskIncrementTick+0x154>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005758:	4a4d      	ldr	r2, [pc, #308]	; (8005890 <xTaskIncrementTick+0x154>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11f      	bne.n	80057a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005764:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <xTaskIncrementTick+0x158>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <xTaskIncrementTick+0x46>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	e7fe      	b.n	8005780 <xTaskIncrementTick+0x44>
 8005782:	4b44      	ldr	r3, [pc, #272]	; (8005894 <xTaskIncrementTick+0x158>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	4b43      	ldr	r3, [pc, #268]	; (8005898 <xTaskIncrementTick+0x15c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a41      	ldr	r2, [pc, #260]	; (8005894 <xTaskIncrementTick+0x158>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4a41      	ldr	r2, [pc, #260]	; (8005898 <xTaskIncrementTick+0x15c>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <xTaskIncrementTick+0x160>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	4a3f      	ldr	r2, [pc, #252]	; (800589c <xTaskIncrementTick+0x160>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	f000 faca 	bl	8005d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a4:	4b3e      	ldr	r3, [pc, #248]	; (80058a0 <xTaskIncrementTick+0x164>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d34e      	bcc.n	800584c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ae:	4b39      	ldr	r3, [pc, #228]	; (8005894 <xTaskIncrementTick+0x158>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <xTaskIncrementTick+0x80>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <xTaskIncrementTick+0x82>
 80057bc:	2300      	movs	r3, #0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <xTaskIncrementTick+0x164>)
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c8:	601a      	str	r2, [r3, #0]
					break;
 80057ca:	e03f      	b.n	800584c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057cc:	4b31      	ldr	r3, [pc, #196]	; (8005894 <xTaskIncrementTick+0x158>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d203      	bcs.n	80057ec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057e4:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <xTaskIncrementTick+0x164>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6013      	str	r3, [r2, #0]
						break;
 80057ea:	e02f      	b.n	800584c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fcaf 	bl	8004154 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3318      	adds	r3, #24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe fca6 	bl	8004154 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <xTaskIncrementTick+0x168>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <xTaskIncrementTick+0xe0>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <xTaskIncrementTick+0x168>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <xTaskIncrementTick+0x16c>)
 800582a:	441a      	add	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fc33 	bl	800409e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <xTaskIncrementTick+0x170>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	429a      	cmp	r2, r3
 8005844:	d3b3      	bcc.n	80057ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800584a:	e7b0      	b.n	80057ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800584c:	4b17      	ldr	r3, [pc, #92]	; (80058ac <xTaskIncrementTick+0x170>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4915      	ldr	r1, [pc, #84]	; (80058a8 <xTaskIncrementTick+0x16c>)
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d907      	bls.n	8005874 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e004      	b.n	8005874 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <xTaskIncrementTick+0x174>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <xTaskIncrementTick+0x174>)
 8005872:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTaskIncrementTick+0x178>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005880:	697b      	ldr	r3, [r7, #20]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000be4 	.word	0x20000be4
 8005890:	20000bc0 	.word	0x20000bc0
 8005894:	20000b74 	.word	0x20000b74
 8005898:	20000b78 	.word	0x20000b78
 800589c:	20000bd4 	.word	0x20000bd4
 80058a0:	20000bdc 	.word	0x20000bdc
 80058a4:	20000bc4 	.word	0x20000bc4
 80058a8:	200006ec 	.word	0x200006ec
 80058ac:	200006e8 	.word	0x200006e8
 80058b0:	20000bcc 	.word	0x20000bcc
 80058b4:	20000bd0 	.word	0x20000bd0

080058b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058be:	4b27      	ldr	r3, [pc, #156]	; (800595c <vTaskSwitchContext+0xa4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <vTaskSwitchContext+0xa8>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058cc:	e040      	b.n	8005950 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <vTaskSwitchContext+0xa8>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <vTaskSwitchContext+0xac>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e00f      	b.n	80058fc <vTaskSwitchContext+0x44>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <vTaskSwitchContext+0x3e>
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	607b      	str	r3, [r7, #4]
 80058f4:	e7fe      	b.n	80058f4 <vTaskSwitchContext+0x3c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	491a      	ldr	r1, [pc, #104]	; (8005968 <vTaskSwitchContext+0xb0>)
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0e5      	beq.n	80058dc <vTaskSwitchContext+0x24>
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4a13      	ldr	r2, [pc, #76]	; (8005968 <vTaskSwitchContext+0xb0>)
 800591c:	4413      	add	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	3308      	adds	r3, #8
 8005932:	429a      	cmp	r2, r3
 8005934:	d104      	bne.n	8005940 <vTaskSwitchContext+0x88>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <vTaskSwitchContext+0xb4>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4a06      	ldr	r2, [pc, #24]	; (8005964 <vTaskSwitchContext+0xac>)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000be4 	.word	0x20000be4
 8005960:	20000bd0 	.word	0x20000bd0
 8005964:	20000bc4 	.word	0x20000bc4
 8005968:	200006ec 	.word	0x200006ec
 800596c:	200006e8 	.word	0x200006e8

08005970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <vTaskPlaceOnEventList+0x24>
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e7fe      	b.n	8005992 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <vTaskPlaceOnEventList+0x44>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3318      	adds	r3, #24
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fe fba1 	bl	80040e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a2:	2101      	movs	r1, #1
 80059a4:	6838      	ldr	r0, [r7, #0]
 80059a6:	f000 fb7b 	bl	80060a0 <prvAddCurrentTaskToDelayedList>
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200006e8 	.word	0x200006e8

080059b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <vTaskPlaceOnEventListRestricted+0x26>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e7fe      	b.n	80059dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vTaskPlaceOnEventListRestricted+0x50>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3318      	adds	r3, #24
 80059e4:	4619      	mov	r1, r3
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7fe fb59 	bl	800409e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	68b8      	ldr	r0, [r7, #8]
 80059fc:	f000 fb50 	bl	80060a0 <prvAddCurrentTaskToDelayedList>
	}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200006e8 	.word	0x200006e8

08005a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <xTaskRemoveFromEventList+0x2a>
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e7fe      	b.n	8005a34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3318      	adds	r3, #24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fb8a 	bl	8004154 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <xTaskRemoveFromEventList+0xac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11d      	bne.n	8005a84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fb81 	bl	8004154 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4b19      	ldr	r3, [pc, #100]	; (8005abc <xTaskRemoveFromEventList+0xb0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d903      	bls.n	8005a66 <xTaskRemoveFromEventList+0x5a>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <xTaskRemoveFromEventList+0xb0>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <xTaskRemoveFromEventList+0xb4>)
 8005a74:	441a      	add	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7fe fb0e 	bl	800409e <vListInsertEnd>
 8005a82:	e005      	b.n	8005a90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3318      	adds	r3, #24
 8005a88:	4619      	mov	r1, r3
 8005a8a:	480e      	ldr	r0, [pc, #56]	; (8005ac4 <xTaskRemoveFromEventList+0xb8>)
 8005a8c:	f7fe fb07 	bl	800409e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <xTaskRemoveFromEventList+0xbc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d905      	bls.n	8005aaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <xTaskRemoveFromEventList+0xc0>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e001      	b.n	8005aae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000be4 	.word	0x20000be4
 8005abc:	20000bc4 	.word	0x20000bc4
 8005ac0:	200006ec 	.word	0x200006ec
 8005ac4:	20000b7c 	.word	0x20000b7c
 8005ac8:	200006e8 	.word	0x200006e8
 8005acc:	20000bd0 	.word	0x20000bd0

08005ad0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <vTaskInternalSetTimeOutState+0x24>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <vTaskInternalSetTimeOutState+0x28>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000bd4 	.word	0x20000bd4
 8005af8:	20000bc0 	.word	0x20000bc0

08005afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <xTaskCheckForTimeOut+0x24>
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	e7fe      	b.n	8005b1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <xTaskCheckForTimeOut+0x3e>
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e7fe      	b.n	8005b38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b3a:	f000 fefd 	bl	8006938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <xTaskCheckForTimeOut+0xb8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b56:	d102      	bne.n	8005b5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e023      	b.n	8005ba6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <xTaskCheckForTimeOut+0xbc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d007      	beq.n	8005b7a <xTaskCheckForTimeOut+0x7e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e015      	b.n	8005ba6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d20b      	bcs.n	8005b9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1ad2      	subs	r2, r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff9d 	bl	8005ad0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e004      	b.n	8005ba6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ba6:	f000 fef5 	bl	8006994 <vPortExitCritical>

	return xReturn;
 8005baa:	69fb      	ldr	r3, [r7, #28]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000bc0 	.word	0x20000bc0
 8005bb8:	20000bd4 	.word	0x20000bd4

08005bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <vTaskMissedYield+0x14>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000bd0 	.word	0x20000bd0

08005bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bdc:	f000 f852 	bl	8005c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <prvIdleTask+0x28>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d9f9      	bls.n	8005bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <prvIdleTask+0x2c>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf8:	e7f0      	b.n	8005bdc <prvIdleTask+0x8>
 8005bfa:	bf00      	nop
 8005bfc:	200006ec 	.word	0x200006ec
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	e00c      	b.n	8005c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <prvInitialiseTaskLists+0x60>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fa12 	bl	8004048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b37      	cmp	r3, #55	; 0x37
 8005c2e:	d9ef      	bls.n	8005c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c30:	480d      	ldr	r0, [pc, #52]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c32:	f7fe fa09 	bl	8004048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c36:	480d      	ldr	r0, [pc, #52]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c38:	f7fe fa06 	bl	8004048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c3c:	480c      	ldr	r0, [pc, #48]	; (8005c70 <prvInitialiseTaskLists+0x6c>)
 8005c3e:	f7fe fa03 	bl	8004048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c42:	480c      	ldr	r0, [pc, #48]	; (8005c74 <prvInitialiseTaskLists+0x70>)
 8005c44:	f7fe fa00 	bl	8004048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c48:	480b      	ldr	r0, [pc, #44]	; (8005c78 <prvInitialiseTaskLists+0x74>)
 8005c4a:	f7fe f9fd 	bl	8004048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <prvInitialiseTaskLists+0x78>)
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvInitialiseTaskLists+0x7c>)
 8005c56:	4a05      	ldr	r2, [pc, #20]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200006ec 	.word	0x200006ec
 8005c68:	20000b4c 	.word	0x20000b4c
 8005c6c:	20000b60 	.word	0x20000b60
 8005c70:	20000b7c 	.word	0x20000b7c
 8005c74:	20000b90 	.word	0x20000b90
 8005c78:	20000ba8 	.word	0x20000ba8
 8005c7c:	20000b74 	.word	0x20000b74
 8005c80:	20000b78 	.word	0x20000b78

08005c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8a:	e019      	b.n	8005cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c8c:	f000 fe54 	bl	8006938 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c90:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <prvCheckTasksWaitingTermination+0x4c>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fa59 	bl	8004154 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <prvCheckTasksWaitingTermination+0x50>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <prvCheckTasksWaitingTermination+0x50>)
 8005caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cb6:	f000 fe6d 	bl	8006994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f80e 	bl	8005cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e1      	bne.n	8005c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000b90 	.word	0x20000b90
 8005cd4:	20000bbc 	.word	0x20000bbc
 8005cd8:	20000ba4 	.word	0x20000ba4

08005cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 ffd8 	bl	8006ca8 <vPortFree>
				vPortFree( pxTCB );
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 ffd5 	bl	8006ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cfe:	e017      	b.n	8005d30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d103      	bne.n	8005d12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 ffcc 	bl	8006ca8 <vPortFree>
	}
 8005d10:	e00e      	b.n	8005d30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d009      	beq.n	8005d30 <prvDeleteTCB+0x54>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e7fe      	b.n	8005d2e <prvDeleteTCB+0x52>
	}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <prvResetNextTaskUnblockTime+0x40>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <prvResetNextTaskUnblockTime+0x14>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <prvResetNextTaskUnblockTime+0x16>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <prvResetNextTaskUnblockTime+0x44>)
 8005d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d5a:	e008      	b.n	8005d6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <prvResetNextTaskUnblockTime+0x40>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <prvResetNextTaskUnblockTime+0x44>)
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr
 8005d78:	20000b74 	.word	0x20000b74
 8005d7c:	20000bdc 	.word	0x20000bdc

08005d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <xTaskGetSchedulerState+0x34>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	e008      	b.n	8005da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <xTaskGetSchedulerState+0x38>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	e001      	b.n	8005da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005da6:	687b      	ldr	r3, [r7, #4]
	}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000bc8 	.word	0x20000bc8
 8005db8:	20000be4 	.word	0x20000be4

08005dbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d056      	beq.n	8005e80 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <xTaskPriorityInherit+0xd0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d246      	bcs.n	8005e6e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	db06      	blt.n	8005df6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <xTaskPriorityInherit+0xd0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6959      	ldr	r1, [r3, #20]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <xTaskPriorityInherit+0xd4>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	d101      	bne.n	8005e12 <xTaskPriorityInherit+0x56>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xTaskPriorityInherit+0x58>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d022      	beq.n	8005e5e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe f999 	bl	8004154 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e22:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <xTaskPriorityInherit+0xd0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <xTaskPriorityInherit+0xd8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d903      	bls.n	8005e40 <xTaskPriorityInherit+0x84>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <xTaskPriorityInherit+0xd8>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <xTaskPriorityInherit+0xd4>)
 8005e4e:	441a      	add	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f7fe f921 	bl	800409e <vListInsertEnd>
 8005e5c:	e004      	b.n	8005e68 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <xTaskPriorityInherit+0xd0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e008      	b.n	8005e80 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <xTaskPriorityInherit+0xd0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d201      	bcs.n	8005e80 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e80:	68fb      	ldr	r3, [r7, #12]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200006e8 	.word	0x200006e8
 8005e90:	200006ec 	.word	0x200006ec
 8005e94:	20000bc4 	.word	0x20000bc4

08005e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d054      	beq.n	8005f58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eae:	4b2d      	ldr	r3, [pc, #180]	; (8005f64 <xTaskPriorityDisinherit+0xcc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d009      	beq.n	8005ecc <xTaskPriorityDisinherit+0x34>
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e7fe      	b.n	8005eca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <xTaskPriorityDisinherit+0x50>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d02c      	beq.n	8005f58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d128      	bne.n	8005f58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe f922 	bl	8004154 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <xTaskPriorityDisinherit+0xd0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <xTaskPriorityDisinherit+0xa0>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <xTaskPriorityDisinherit+0xd0>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <xTaskPriorityDisinherit+0xd4>)
 8005f46:	441a      	add	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fe f8a5 	bl	800409e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f58:	697b      	ldr	r3, [r7, #20]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200006e8 	.word	0x200006e8
 8005f68:	20000bc4 	.word	0x20000bc4
 8005f6c:	200006ec 	.word	0x200006ec

08005f70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d06d      	beq.n	8006064 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e7fe      	b.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d902      	bls.n	8005fb4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	e002      	b.n	8005fba <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d04f      	beq.n	8006064 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d14a      	bne.n	8006064 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fce:	4b27      	ldr	r3, [pc, #156]	; (800606c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d109      	bne.n	8005fec <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	e7fe      	b.n	8005fea <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	db04      	blt.n	800600a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6959      	ldr	r1, [r3, #20]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4a15      	ldr	r2, [pc, #84]	; (8006070 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800601a:	4413      	add	r3, r2
 800601c:	4299      	cmp	r1, r3
 800601e:	d101      	bne.n	8006024 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01c      	beq.n	8006064 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	3304      	adds	r3, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe f890 	bl	8004154 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d903      	bls.n	8006048 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006056:	441a      	add	r2, r3
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe f81d 	bl	800409e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006064:	bf00      	nop
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	200006e8 	.word	0x200006e8
 8006070:	200006ec 	.word	0x200006ec
 8006074:	20000bc4 	.word	0x20000bc4

08006078 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800607c:	4b07      	ldr	r3, [pc, #28]	; (800609c <pvTaskIncrementMutexHeldCount+0x24>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <pvTaskIncrementMutexHeldCount+0x24>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800608a:	3201      	adds	r2, #1
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <pvTaskIncrementMutexHeldCount+0x24>)
 8006090:	681b      	ldr	r3, [r3, #0]
	}
 8006092:	4618      	mov	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	200006e8 	.word	0x200006e8

080060a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060aa:	4b21      	ldr	r3, [pc, #132]	; (8006130 <prvAddCurrentTaskToDelayedList+0x90>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe f84c 	bl	8004154 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c2:	d10a      	bne.n	80060da <prvAddCurrentTaskToDelayedList+0x3a>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ca:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <prvAddCurrentTaskToDelayedList+0x94>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4819      	ldr	r0, [pc, #100]	; (8006138 <prvAddCurrentTaskToDelayedList+0x98>)
 80060d4:	f7fd ffe3 	bl	800409e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060d8:	e026      	b.n	8006128 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4413      	add	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <prvAddCurrentTaskToDelayedList+0x94>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d209      	bcs.n	8006106 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <prvAddCurrentTaskToDelayedList+0x9c>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f7fd fff0 	bl	80040e4 <vListInsert>
}
 8006104:	e010      	b.n	8006128 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <prvAddCurrentTaskToDelayedList+0x94>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fd ffe6 	bl	80040e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <prvAddCurrentTaskToDelayedList+0xa4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	429a      	cmp	r2, r3
 8006120:	d202      	bcs.n	8006128 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006122:	4a08      	ldr	r2, [pc, #32]	; (8006144 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6013      	str	r3, [r2, #0]
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000bc0 	.word	0x20000bc0
 8006134:	200006e8 	.word	0x200006e8
 8006138:	20000ba8 	.word	0x20000ba8
 800613c:	20000b78 	.word	0x20000b78
 8006140:	20000b74 	.word	0x20000b74
 8006144:	20000bdc 	.word	0x20000bdc

08006148 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006152:	f000 fac3 	bl	80066dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <xTimerCreateTimerTask+0x80>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d021      	beq.n	80061a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006166:	1d3a      	adds	r2, r7, #4
 8006168:	f107 0108 	add.w	r1, r7, #8
 800616c:	f107 030c 	add.w	r3, r7, #12
 8006170:	4618      	mov	r0, r3
 8006172:	f7fd ff4f 	bl	8004014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	2302      	movs	r3, #2
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	460a      	mov	r2, r1
 8006188:	4910      	ldr	r1, [pc, #64]	; (80061cc <xTimerCreateTimerTask+0x84>)
 800618a:	4811      	ldr	r0, [pc, #68]	; (80061d0 <xTimerCreateTimerTask+0x88>)
 800618c:	f7fe fff2 	bl	8005174 <xTaskCreateStatic>
 8006190:	4602      	mov	r2, r0
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <xTimerCreateTimerTask+0x8c>)
 8006194:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <xTimerCreateTimerTask+0x8c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <xTimerCreateTimerTask+0x74>
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e7fe      	b.n	80061ba <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061bc:	697b      	ldr	r3, [r7, #20]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000c18 	.word	0x20000c18
 80061cc:	08007018 	.word	0x08007018
 80061d0:	080062f1 	.word	0x080062f1
 80061d4:	20000c1c 	.word	0x20000c1c

080061d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d109      	bne.n	8006204 <xTimerGenericCommand+0x2c>
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	e7fe      	b.n	8006202 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <xTimerGenericCommand+0x94>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02a      	beq.n	8006262 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b05      	cmp	r3, #5
 800621c:	dc18      	bgt.n	8006250 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800621e:	f7ff fdaf 	bl	8005d80 <xTaskGetSchedulerState>
 8006222:	4603      	mov	r3, r0
 8006224:	2b02      	cmp	r3, #2
 8006226:	d109      	bne.n	800623c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006228:	4b10      	ldr	r3, [pc, #64]	; (800626c <xTimerGenericCommand+0x94>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	f107 0110 	add.w	r1, r7, #16
 8006230:	2300      	movs	r3, #0
 8006232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006234:	f7fe f958 	bl	80044e8 <xQueueGenericSend>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24
 800623a:	e012      	b.n	8006262 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <xTimerGenericCommand+0x94>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	f107 0110 	add.w	r1, r7, #16
 8006244:	2300      	movs	r3, #0
 8006246:	2200      	movs	r2, #0
 8006248:	f7fe f94e 	bl	80044e8 <xQueueGenericSend>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24
 800624e:	e008      	b.n	8006262 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <xTimerGenericCommand+0x94>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	f107 0110 	add.w	r1, r7, #16
 8006258:	2300      	movs	r3, #0
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	f7fe fa3e 	bl	80046dc <xQueueGenericSendFromISR>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006264:	4618      	mov	r0, r3
 8006266:	3728      	adds	r7, #40	; 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20000c18 	.word	0x20000c18

08006270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800627a:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <prvProcessExpiredTimer+0x7c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3304      	adds	r3, #4
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd ff63 	bl	8004154 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d121      	bne.n	80062da <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	18d1      	adds	r1, r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f000 f8c8 	bl	8006438 <prvInsertTimerInActiveList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062ae:	2300      	movs	r3, #0
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	2300      	movs	r3, #0
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	2100      	movs	r1, #0
 80062b8:	6978      	ldr	r0, [r7, #20]
 80062ba:	f7ff ff8d 	bl	80061d8 <xTimerGenericCommand>
 80062be:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <prvProcessExpiredTimer+0x6a>
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e7fe      	b.n	80062d8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	6978      	ldr	r0, [r7, #20]
 80062e0:	4798      	blx	r3
}
 80062e2:	bf00      	nop
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000c10 	.word	0x20000c10

080062f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f857 	bl	80063b0 <prvGetNextExpireTime>
 8006302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f803 	bl	8006314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800630e:	f000 f8d5 	bl	80064bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006312:	e7f1      	b.n	80062f8 <prvTimerTask+0x8>

08006314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800631e:	f7ff f955 	bl	80055cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	4618      	mov	r0, r3
 8006328:	f000 f866 	bl	80063f8 <prvSampleTimeNow>
 800632c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d130      	bne.n	8006396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <prvProcessTimerOrBlockTask+0x3c>
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	429a      	cmp	r2, r3
 8006340:	d806      	bhi.n	8006350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006342:	f7ff f951 	bl	80055e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff91 	bl	8006270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800634e:	e024      	b.n	800639a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <prvProcessTimerOrBlockTask+0x90>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <prvProcessTimerOrBlockTask+0x94>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4619      	mov	r1, r3
 8006376:	f7fe fec9 	bl	800510c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800637a:	f7ff f935 	bl	80055e8 <xTaskResumeAll>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006384:	4b09      	ldr	r3, [pc, #36]	; (80063ac <prvProcessTimerOrBlockTask+0x98>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
}
 8006394:	e001      	b.n	800639a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006396:	f7ff f927 	bl	80055e8 <xTaskResumeAll>
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000c14 	.word	0x20000c14
 80063a8:	20000c18 	.word	0x20000c18
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <prvGetNextExpireTime+0x44>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <prvGetNextExpireTime+0x44>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e001      	b.n	80063e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000c10 	.word	0x20000c10

080063f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006400:	f7ff f98e 	bl	8005720 <xTaskGetTickCount>
 8006404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <prvSampleTimeNow+0x3c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	429a      	cmp	r2, r3
 800640e:	d205      	bcs.n	800641c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006410:	f000 f904 	bl	800661c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e002      	b.n	8006422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006422:	4a04      	ldr	r2, [pc, #16]	; (8006434 <prvSampleTimeNow+0x3c>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000c20 	.word	0x20000c20

08006438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d812      	bhi.n	8006484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e01b      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <prvInsertTimerInActiveList+0x7c>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f7fd fe31 	bl	80040e4 <vListInsert>
 8006482:	e012      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d206      	bcs.n	800649a <prvInsertTimerInActiveList+0x62>
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d302      	bcc.n	800649a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e007      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <prvInsertTimerInActiveList+0x80>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f7fd fe1d 	bl	80040e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000c14 	.word	0x20000c14
 80064b8:	20000c10 	.word	0x20000c10

080064bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08e      	sub	sp, #56	; 0x38
 80064c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064c2:	e099      	b.n	80065f8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da17      	bge.n	80064fa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	3304      	adds	r3, #4
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <prvProcessReceivedCommands+0x2e>
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e7fe      	b.n	80064e8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f0:	6850      	ldr	r0, [r2, #4]
 80064f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f4:	6892      	ldr	r2, [r2, #8]
 80064f6:	4611      	mov	r1, r2
 80064f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db7a      	blt.n	80065f6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fe1f 	bl	8004154 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006516:	463b      	mov	r3, r7
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff6d 	bl	80063f8 <prvSampleTimeNow>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b09      	cmp	r3, #9
 8006524:	d868      	bhi.n	80065f8 <prvProcessReceivedCommands+0x13c>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <prvProcessReceivedCommands+0x70>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006555 	.word	0x08006555
 8006530:	08006555 	.word	0x08006555
 8006534:	08006555 	.word	0x08006555
 8006538:	080065f9 	.word	0x080065f9
 800653c:	080065af 	.word	0x080065af
 8006540:	080065e5 	.word	0x080065e5
 8006544:	08006555 	.word	0x08006555
 8006548:	08006555 	.word	0x08006555
 800654c:	080065f9 	.word	0x080065f9
 8006550:	080065af 	.word	0x080065af
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	18d1      	adds	r1, r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006562:	f7ff ff69 	bl	8006438 <prvInsertTimerInActiveList>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d045      	beq.n	80065f8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d13d      	bne.n	80065f8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	441a      	add	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	2100      	movs	r1, #0
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f7ff fe23 	bl	80061d8 <xTimerGenericCommand>
 8006592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d12e      	bne.n	80065f8 <prvProcessReceivedCommands+0x13c>
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e7fe      	b.n	80065ac <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <prvProcessReceivedCommands+0x114>
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e7fe      	b.n	80065ce <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	18d1      	adds	r1, r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065de:	f7ff ff2b 	bl	8006438 <prvInsertTimerInActiveList>
					break;
 80065e2:	e009      	b.n	80065f8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80065ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f0:	f000 fb5a 	bl	8006ca8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065f4:	e000      	b.n	80065f8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f8:	4b07      	ldr	r3, [pc, #28]	; (8006618 <prvProcessReceivedCommands+0x15c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	1d39      	adds	r1, r7, #4
 80065fe:	2200      	movs	r2, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe f989 	bl	8004918 <xQueueReceive>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	f47f af5b 	bne.w	80064c4 <prvProcessReceivedCommands+0x8>
	}
}
 800660e:	bf00      	nop
 8006610:	3730      	adds	r7, #48	; 0x30
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000c18 	.word	0x20000c18

0800661c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006622:	e044      	b.n	80066ae <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006624:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800662e:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fd fd89 	bl	8004154 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d12d      	bne.n	80066ae <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d90e      	bls.n	8006682 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006670:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7fd fd32 	bl	80040e4 <vListInsert>
 8006680:	e015      	b.n	80066ae <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006682:	2300      	movs	r3, #0
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	2100      	movs	r1, #0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fda3 	bl	80061d8 <xTimerGenericCommand>
 8006692:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <prvSwitchTimerLists+0x92>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	e7fe      	b.n	80066ac <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1b5      	bne.n	8006624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <prvSwitchTimerLists+0xbc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvSwitchTimerLists+0xb8>)
 80066c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066c6:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <prvSwitchTimerLists+0xbc>)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6013      	str	r3, [r2, #0]
}
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000c10 	.word	0x20000c10
 80066d8:	20000c14 	.word	0x20000c14

080066dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066e2:	f000 f929 	bl	8006938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d120      	bne.n	8006730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ee:	4814      	ldr	r0, [pc, #80]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066f0:	f7fd fcaa 	bl	8004048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 80066f6:	f7fd fca7 	bl	8004048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvCheckForValidListAndQueue+0x6c>)
 80066fc:	4a10      	ldr	r2, [pc, #64]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <prvCheckForValidListAndQueue+0x70>)
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <prvCheckForValidListAndQueue+0x74>)
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <prvCheckForValidListAndQueue+0x78>)
 800670e:	2110      	movs	r1, #16
 8006710:	200a      	movs	r0, #10
 8006712:	f7fd fdb1 	bl	8004278 <xQueueGenericCreateStatic>
 8006716:	4602      	mov	r2, r0
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	490b      	ldr	r1, [pc, #44]	; (8006758 <prvCheckForValidListAndQueue+0x7c>)
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fc9e 	bl	800506c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006730:	f000 f930 	bl	8006994 <vPortExitCritical>
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000c18 	.word	0x20000c18
 8006740:	20000be8 	.word	0x20000be8
 8006744:	20000bfc 	.word	0x20000bfc
 8006748:	20000c10 	.word	0x20000c10
 800674c:	20000c14 	.word	0x20000c14
 8006750:	20000cc4 	.word	0x20000cc4
 8006754:	20000c24 	.word	0x20000c24
 8006758:	08007020 	.word	0x08007020

0800675c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b04      	subs	r3, #4
 800676c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800678c:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <pxPortInitialiseStack+0x54>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b14      	subs	r3, #20
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3b20      	subs	r3, #32
 80067a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr
 80067b0:	080067b5 	.word	0x080067b5

080067b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <prvTaskExitError+0x4c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c6:	d009      	beq.n	80067dc <prvTaskExitError+0x28>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e7fe      	b.n	80067da <prvTaskExitError+0x26>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ee:	bf00      	nop
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0fc      	beq.n	80067f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	2000000c 	.word	0x2000000c
	...

08006810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <pxCurrentTCBConst2>)
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800681a:	f380 8809 	msr	PSP, r0
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8811 	msr	BASEPRI, r0
 800682a:	f04e 0e0d 	orr.w	lr, lr, #13
 800682e:	4770      	bx	lr

08006830 <pxCurrentTCBConst2>:
 8006830:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006838:	4806      	ldr	r0, [pc, #24]	; (8006854 <prvPortStartFirstTask+0x1c>)
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	6800      	ldr	r0, [r0, #0]
 800683e:	f380 8808 	msr	MSP, r0
 8006842:	b662      	cpsie	i
 8006844:	b661      	cpsie	f
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	df00      	svc	0
 8006850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006852:	bf00      	nop
 8006854:	e000ed08 	.word	0xe000ed08

08006858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800685e:	4b31      	ldr	r3, [pc, #196]	; (8006924 <xPortStartScheduler+0xcc>)
 8006860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4b29      	ldr	r3, [pc, #164]	; (8006928 <xPortStartScheduler+0xd0>)
 8006884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006886:	4b29      	ldr	r3, [pc, #164]	; (800692c <xPortStartScheduler+0xd4>)
 8006888:	2207      	movs	r2, #7
 800688a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800688c:	e009      	b.n	80068a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <xPortStartScheduler+0xd4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a25      	ldr	r2, [pc, #148]	; (800692c <xPortStartScheduler+0xd4>)
 8006896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b80      	cmp	r3, #128	; 0x80
 80068ac:	d0ef      	beq.n	800688e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068ae:	4b1f      	ldr	r3, [pc, #124]	; (800692c <xPortStartScheduler+0xd4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1c3 0307 	rsb	r3, r3, #7
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d009      	beq.n	80068ce <xPortStartScheduler+0x76>
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	e7fe      	b.n	80068cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <xPortStartScheduler+0xd4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <xPortStartScheduler+0xd4>)
 80068d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <xPortStartScheduler+0xd4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068e0:	4a12      	ldr	r2, [pc, #72]	; (800692c <xPortStartScheduler+0xd4>)
 80068e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068ec:	4b10      	ldr	r3, [pc, #64]	; (8006930 <xPortStartScheduler+0xd8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <xPortStartScheduler+0xd8>)
 80068f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <xPortStartScheduler+0xd8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <xPortStartScheduler+0xd8>)
 80068fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006904:	f000 f8b0 	bl	8006a68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <xPortStartScheduler+0xdc>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800690e:	f7ff ff93 	bl	8006838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006912:	f7fe ffd1 	bl	80058b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006916:	f7ff ff4d 	bl	80067b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000e400 	.word	0xe000e400
 8006928:	20000d14 	.word	0x20000d14
 800692c:	20000d18 	.word	0x20000d18
 8006930:	e000ed20 	.word	0xe000ed20
 8006934:	2000000c 	.word	0x2000000c

08006938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006950:	4b0e      	ldr	r3, [pc, #56]	; (800698c <vPortEnterCritical+0x54>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a0d      	ldr	r2, [pc, #52]	; (800698c <vPortEnterCritical+0x54>)
 8006958:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800695a:	4b0c      	ldr	r3, [pc, #48]	; (800698c <vPortEnterCritical+0x54>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10e      	bne.n	8006980 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <vPortEnterCritical+0x58>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <vPortEnterCritical+0x48>
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	e7fe      	b.n	800697e <vPortEnterCritical+0x46>
	}
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	2000000c 	.word	0x2000000c
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <vPortExitCritical+0x48>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <vPortExitCritical+0x22>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	e7fe      	b.n	80069b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <vPortExitCritical+0x48>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <vPortExitCritical+0x48>)
 80069be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <vPortExitCritical+0x48>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <vPortExitCritical+0x3e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	2000000c 	.word	0x2000000c

080069e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069e0:	f3ef 8009 	mrs	r0, PSP
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <pxCurrentTCBConst>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069f0:	6010      	str	r0, [r2, #0]
 80069f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80069f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069fa:	f380 8811 	msr	BASEPRI, r0
 80069fe:	f7fe ff5b 	bl	80058b8 <vTaskSwitchContext>
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	6808      	ldr	r0, [r1, #0]
 8006a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a16:	f380 8809 	msr	PSP, r0
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	4770      	bx	lr

08006a20 <pxCurrentTCBConst>:
 8006a20:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a40:	f7fe fe7c 	bl	800573c <xTaskIncrementTick>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <SysTick_Handler+0x3c>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	2300      	movs	r3, #0
 8006a54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <vPortSetupTimerInterrupt+0x30>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <vPortSetupTimerInterrupt+0x34>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <vPortSetupTimerInterrupt+0x38>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <vPortSetupTimerInterrupt+0x40>)
 8006a86:	3b01      	subs	r3, #1
 8006a88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8a:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <vPortSetupTimerInterrupt+0x30>)
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	601a      	str	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	e000e010 	.word	0xe000e010
 8006a9c:	e000e018 	.word	0xe000e018
 8006aa0:	20000000 	.word	0x20000000
 8006aa4:	10624dd3 	.word	0x10624dd3
 8006aa8:	e000e014 	.word	0xe000e014

08006aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ab2:	f3ef 8305 	mrs	r3, IPSR
 8006ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d913      	bls.n	8006ae6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006abe:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <vPortValidateInterruptPriority+0x68>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vPortValidateInterruptPriority+0x6c>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	7afa      	ldrb	r2, [r7, #11]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d209      	bcs.n	8006ae6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	e7fe      	b.n	8006ae4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <vPortValidateInterruptPriority+0x70>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <vPortValidateInterruptPriority+0x74>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d909      	bls.n	8006b0a <vPortValidateInterruptPriority+0x5e>
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	e7fe      	b.n	8006b08 <vPortValidateInterruptPriority+0x5c>
	}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	e000e3f0 	.word	0xe000e3f0
 8006b18:	20000d14 	.word	0x20000d14
 8006b1c:	e000ed0c 	.word	0xe000ed0c
 8006b20:	20000d18 	.word	0x20000d18

08006b24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b30:	f7fe fd4c 	bl	80055cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b34:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <pvPortMalloc+0x170>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b3c:	f000 f90c 	bl	8006d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b40:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <pvPortMalloc+0x174>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 808c 	bne.w	8006c66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01c      	beq.n	8006b8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006b54:	2208      	movs	r2, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f023 0307 	bic.w	r3, r3, #7
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <pvPortMalloc+0x6a>
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e7fe      	b.n	8006b8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d068      	beq.n	8006c66 <pvPortMalloc+0x142>
 8006b94:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <pvPortMalloc+0x178>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d863      	bhi.n	8006c66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b9e:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <pvPortMalloc+0x17c>)
 8006ba0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <pvPortMalloc+0x17c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ba8:	e004      	b.n	8006bb4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d903      	bls.n	8006bc6 <pvPortMalloc+0xa2>
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f1      	bne.n	8006baa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bc6:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <pvPortMalloc+0x170>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d04a      	beq.n	8006c66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	4413      	add	r3, r2
 8006bd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1ad2      	subs	r2, r2, r3
 8006bea:	2308      	movs	r3, #8
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d91e      	bls.n	8006c30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <pvPortMalloc+0xf4>
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	e7fe      	b.n	8006c16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c2a:	69b8      	ldr	r0, [r7, #24]
 8006c2c:	f000 f8f6 	bl	8006e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <pvPortMalloc+0x178>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <pvPortMalloc+0x178>)
 8006c3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <pvPortMalloc+0x178>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <pvPortMalloc+0x180>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d203      	bcs.n	8006c52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <pvPortMalloc+0x178>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <pvPortMalloc+0x180>)
 8006c50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <pvPortMalloc+0x174>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c66:	f7fe fcbf 	bl	80055e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <pvPortMalloc+0x164>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e7fe      	b.n	8006c86 <pvPortMalloc+0x162>
	return pvReturn;
 8006c88:	69fb      	ldr	r3, [r7, #28]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20001d24 	.word	0x20001d24
 8006c98:	20001d30 	.word	0x20001d30
 8006c9c:	20001d28 	.word	0x20001d28
 8006ca0:	20001d1c 	.word	0x20001d1c
 8006ca4:	20001d2c 	.word	0x20001d2c

08006ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d046      	beq.n	8006d48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cba:	2308      	movs	r3, #8
 8006cbc:	425b      	negs	r3, r3
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <vPortFree+0xa8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <vPortFree+0x42>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e7fe      	b.n	8006ce8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <vPortFree+0x5e>
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	e7fe      	b.n	8006d04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <vPortFree+0xa8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d115      	bne.n	8006d48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortFree+0xa8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	401a      	ands	r2, r3
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d2c:	f7fe fc4e 	bl	80055cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <vPortFree+0xac>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <vPortFree+0xac>)
 8006d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f000 f86c 	bl	8006e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d44:	f7fe fc50 	bl	80055e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001d30 	.word	0x20001d30
 8006d54:	20001d28 	.word	0x20001d28

08006d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d64:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <prvHeapInit+0xac>)
 8006d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00c      	beq.n	8006d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3307      	adds	r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <prvHeapInit+0xac>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d90:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <prvHeapInit+0xb0>)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <prvHeapInit+0xb0>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da4:	2208      	movs	r2, #8
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0307 	bic.w	r3, r3, #7
 8006db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <prvHeapInit+0xb4>)
 8006db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <prvHeapInit+0xb4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dc2:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <prvHeapInit+0xb4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <prvHeapInit+0xb4>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <prvHeapInit+0xb8>)
 8006de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <prvHeapInit+0xbc>)
 8006dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <prvHeapInit+0xc0>)
 8006df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000d1c 	.word	0x20000d1c
 8006e08:	20001d1c 	.word	0x20001d1c
 8006e0c:	20001d24 	.word	0x20001d24
 8006e10:	20001d2c 	.word	0x20001d2c
 8006e14:	20001d28 	.word	0x20001d28
 8006e18:	20001d30 	.word	0x20001d30

08006e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e24:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <prvInsertBlockIntoFreeList+0xa8>)
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e002      	b.n	8006e30 <prvInsertBlockIntoFreeList+0x14>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d8f7      	bhi.n	8006e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d108      	bne.n	8006e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	441a      	add	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d118      	bne.n	8006ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvInsertBlockIntoFreeList+0xac>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d00d      	beq.n	8006e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	441a      	add	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e008      	b.n	8006eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <prvInsertBlockIntoFreeList+0xac>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e003      	b.n	8006eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d002      	beq.n	8006eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr
 8006ec4:	20001d1c 	.word	0x20001d1c
 8006ec8:	20001d24 	.word	0x20001d24

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	2500      	movs	r5, #0
 8006ed0:	4e0c      	ldr	r6, [pc, #48]	; (8006f04 <__libc_init_array+0x38>)
 8006ed2:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed4:	1ba4      	subs	r4, r4, r6
 8006ed6:	10a4      	asrs	r4, r4, #2
 8006ed8:	42a5      	cmp	r5, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	f000 f82e 	bl	8006f3c <_init>
 8006ee0:	2500      	movs	r5, #0
 8006ee2:	4e0a      	ldr	r6, [pc, #40]	; (8006f0c <__libc_init_array+0x40>)
 8006ee4:	4c0a      	ldr	r4, [pc, #40]	; (8006f10 <__libc_init_array+0x44>)
 8006ee6:	1ba4      	subs	r4, r4, r6
 8006ee8:	10a4      	asrs	r4, r4, #2
 8006eea:	42a5      	cmp	r5, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ef4:	4798      	blx	r3
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006efe:	4798      	blx	r3
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	0800716c 	.word	0x0800716c
 8006f08:	0800716c 	.word	0x0800716c
 8006f0c:	0800716c 	.word	0x0800716c
 8006f10:	08007170 	.word	0x08007170

08006f14 <memcpy>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	1e43      	subs	r3, r0, #1
 8006f18:	440a      	add	r2, r1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	bd10      	pop	{r4, pc}
 8006f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f28:	e7f7      	b.n	8006f1a <memcpy+0x6>

08006f2a <memset>:
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d100      	bne.n	8006f34 <memset+0xa>
 8006f32:	4770      	bx	lr
 8006f34:	f803 1b01 	strb.w	r1, [r3], #1
 8006f38:	e7f9      	b.n	8006f2e <memset+0x4>
	...

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
